{"ast":null,"code":"import { youtubeService } from './youtubeService';\nclass OverviewService {\n  async getOverviewData() {\n    try {\n      // Get YouTube analytics\n      const youtubeAnalytics = await youtubeService.getAnalytics();\n\n      // Calculate YouTube engagement (using likes + comments as engagement)\n      const youtubeEngagement = youtubeAnalytics.recentVideos.reduce((total, video) => {\n        return total + video.likeCount + video.commentCount;\n      }, 0) / youtubeAnalytics.recentVideos.length;\n\n      // Generate realistic data based on YouTube stats\n      const currentSubscribers = youtubeAnalytics.channelStats.subscriberCount;\n      const currentViews = youtubeAnalytics.channelStats.viewCount;\n\n      // Get current date and generate last 6 months\n      const now = new Date();\n      const months = [];\n      for (let i = 5; i >= 0; i--) {\n        const date = new Date(now.getFullYear(), now.getMonth() - i, 1);\n        months.push(date.toLocaleDateString('en-US', {\n          month: 'short'\n        }));\n      }\n\n      // Calculate progression factors for realistic growth\n      const progressionFactors = [0.7, 0.8, 0.85, 0.9, 0.95, 1.0];\n\n      // Engagement data with real YouTube data and actual months\n      const engagementData = months.map((month, index) => ({\n        month,\n        threads: Math.round(12000 + index * 1200),\n        instagram: Math.round(35000 + index * 3000),\n        youtube: Math.round(youtubeEngagement * progressionFactors[index])\n      }));\n\n      // Growth data with real YouTube data and actual months\n      const growthData = months.map((month, index) => ({\n        month,\n        threads: Math.round(42000 + index * 1300),\n        instagram: Math.round(62000 + index * 1800),\n        youtube: Math.round(currentSubscribers * progressionFactors[index])\n      }));\n\n      // Audience data with real YouTube data\n      const audienceData = [{\n        name: 'Instagram',\n        value: 71200,\n        color: '#E4405F'\n      }, {\n        name: 'Threads',\n        value: 48500,\n        color: '#000000'\n      }, {\n        name: 'YouTube',\n        value: currentSubscribers,\n        color: '#FF0000'\n      }];\n      return {\n        engagementData,\n        growthData,\n        audienceData\n      };\n    } catch (error) {\n      console.error('Error loading overview data:', error);\n\n      // Fallback to mock data if YouTube service fails\n      const now = new Date();\n      const months = [];\n      for (let i = 5; i >= 0; i--) {\n        const date = new Date(now.getFullYear(), now.getMonth() - i, 1);\n        months.push(date.toLocaleDateString('en-US', {\n          month: 'short'\n        }));\n      }\n      return {\n        engagementData: months.map((month, index) => ({\n          month,\n          threads: 12000 + index * 1200,\n          instagram: 35000 + index * 3000,\n          youtube: 45000 + index * 6000\n        })),\n        growthData: months.map((month, index) => ({\n          month,\n          threads: 42000 + index * 1300,\n          instagram: 62000 + index * 1800,\n          youtube: 10000 + index * 800\n        })),\n        audienceData: [{\n          name: 'Instagram',\n          value: 71200,\n          color: '#E4405F'\n        }, {\n          name: 'Threads',\n          value: 48500,\n          color: '#000000'\n        }, {\n          name: 'YouTube',\n          value: 14100,\n          color: '#FF0000'\n        }]\n      };\n    }\n  }\n}\nexport const overviewService = new OverviewService();","map":{"version":3,"names":["youtubeService","OverviewService","getOverviewData","youtubeAnalytics","getAnalytics","youtubeEngagement","recentVideos","reduce","total","video","likeCount","commentCount","length","currentSubscribers","channelStats","subscriberCount","currentViews","viewCount","now","Date","months","i","date","getFullYear","getMonth","push","toLocaleDateString","month","progressionFactors","engagementData","map","index","threads","Math","round","instagram","youtube","growthData","audienceData","name","value","color","error","console","overviewService"],"sources":["/Users/marcodamm/Desktop/Stats_SocialMedia/src/services/overviewService.ts"],"sourcesContent":["import { youtubeService } from './youtubeService';\n\nexport interface OverviewData {\n  engagementData: Array<{ month: string; threads: number; instagram: number; youtube: number }>;\n  growthData: Array<{ month: string; threads: number; instagram: number; youtube: number }>;\n  audienceData: Array<{ name: string; value: number; color: string }>;\n}\n\nclass OverviewService {\n  async getOverviewData(): Promise<OverviewData> {\n    try {\n      // Get YouTube analytics\n      const youtubeAnalytics = await youtubeService.getAnalytics();\n      \n      // Calculate YouTube engagement (using likes + comments as engagement)\n      const youtubeEngagement = youtubeAnalytics.recentVideos.reduce((total, video) => {\n        return total + video.likeCount + video.commentCount;\n      }, 0) / youtubeAnalytics.recentVideos.length;\n\n      // Generate realistic data based on YouTube stats\n      const currentSubscribers = youtubeAnalytics.channelStats.subscriberCount;\n      const currentViews = youtubeAnalytics.channelStats.viewCount;\n      \n      // Get current date and generate last 6 months\n      const now = new Date();\n      const months = [];\n      for (let i = 5; i >= 0; i--) {\n        const date = new Date(now.getFullYear(), now.getMonth() - i, 1);\n        months.push(date.toLocaleDateString('en-US', { month: 'short' }));\n      }\n      \n      // Calculate progression factors for realistic growth\n      const progressionFactors = [0.7, 0.8, 0.85, 0.9, 0.95, 1.0];\n      \n      // Engagement data with real YouTube data and actual months\n      const engagementData = months.map((month, index) => ({\n        month,\n        threads: Math.round(12000 + (index * 1200)),\n        instagram: Math.round(35000 + (index * 3000)),\n        youtube: Math.round(youtubeEngagement * progressionFactors[index])\n      }));\n\n      // Growth data with real YouTube data and actual months\n      const growthData = months.map((month, index) => ({\n        month,\n        threads: Math.round(42000 + (index * 1300)),\n        instagram: Math.round(62000 + (index * 1800)),\n        youtube: Math.round(currentSubscribers * progressionFactors[index])\n      }));\n\n      // Audience data with real YouTube data\n      const audienceData = [\n        { name: 'Instagram', value: 71200, color: '#E4405F' },\n        { name: 'Threads', value: 48500, color: '#000000' },\n        { name: 'YouTube', value: currentSubscribers, color: '#FF0000' },\n      ];\n\n      return {\n        engagementData,\n        growthData,\n        audienceData,\n      };\n    } catch (error) {\n      console.error('Error loading overview data:', error);\n      \n      // Fallback to mock data if YouTube service fails\n      const now = new Date();\n      const months = [];\n      for (let i = 5; i >= 0; i--) {\n        const date = new Date(now.getFullYear(), now.getMonth() - i, 1);\n        months.push(date.toLocaleDateString('en-US', { month: 'short' }));\n      }\n      \n      return {\n        engagementData: months.map((month, index) => ({\n          month,\n          threads: 12000 + (index * 1200),\n          instagram: 35000 + (index * 3000),\n          youtube: 45000 + (index * 6000),\n        })),\n        growthData: months.map((month, index) => ({\n          month,\n          threads: 42000 + (index * 1300),\n          instagram: 62000 + (index * 1800),\n          youtube: 10000 + (index * 800),\n        })),\n        audienceData: [\n          { name: 'Instagram', value: 71200, color: '#E4405F' },\n          { name: 'Threads', value: 48500, color: '#000000' },\n          { name: 'YouTube', value: 14100, color: '#FF0000' },\n        ],\n      };\n    }\n  }\n}\n\nexport const overviewService = new OverviewService(); "],"mappings":"AAAA,SAASA,cAAc,QAAQ,kBAAkB;AAQjD,MAAMC,eAAe,CAAC;EACpB,MAAMC,eAAeA,CAAA,EAA0B;IAC7C,IAAI;MACF;MACA,MAAMC,gBAAgB,GAAG,MAAMH,cAAc,CAACI,YAAY,CAAC,CAAC;;MAE5D;MACA,MAAMC,iBAAiB,GAAGF,gBAAgB,CAACG,YAAY,CAACC,MAAM,CAAC,CAACC,KAAK,EAAEC,KAAK,KAAK;QAC/E,OAAOD,KAAK,GAAGC,KAAK,CAACC,SAAS,GAAGD,KAAK,CAACE,YAAY;MACrD,CAAC,EAAE,CAAC,CAAC,GAAGR,gBAAgB,CAACG,YAAY,CAACM,MAAM;;MAE5C;MACA,MAAMC,kBAAkB,GAAGV,gBAAgB,CAACW,YAAY,CAACC,eAAe;MACxE,MAAMC,YAAY,GAAGb,gBAAgB,CAACW,YAAY,CAACG,SAAS;;MAE5D;MACA,MAAMC,GAAG,GAAG,IAAIC,IAAI,CAAC,CAAC;MACtB,MAAMC,MAAM,GAAG,EAAE;MACjB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,IAAI,CAAC,EAAEA,CAAC,EAAE,EAAE;QAC3B,MAAMC,IAAI,GAAG,IAAIH,IAAI,CAACD,GAAG,CAACK,WAAW,CAAC,CAAC,EAAEL,GAAG,CAACM,QAAQ,CAAC,CAAC,GAAGH,CAAC,EAAE,CAAC,CAAC;QAC/DD,MAAM,CAACK,IAAI,CAACH,IAAI,CAACI,kBAAkB,CAAC,OAAO,EAAE;UAAEC,KAAK,EAAE;QAAQ,CAAC,CAAC,CAAC;MACnE;;MAEA;MACA,MAAMC,kBAAkB,GAAG,CAAC,GAAG,EAAE,GAAG,EAAE,IAAI,EAAE,GAAG,EAAE,IAAI,EAAE,GAAG,CAAC;;MAE3D;MACA,MAAMC,cAAc,GAAGT,MAAM,CAACU,GAAG,CAAC,CAACH,KAAK,EAAEI,KAAK,MAAM;QACnDJ,KAAK;QACLK,OAAO,EAAEC,IAAI,CAACC,KAAK,CAAC,KAAK,GAAIH,KAAK,GAAG,IAAK,CAAC;QAC3CI,SAAS,EAAEF,IAAI,CAACC,KAAK,CAAC,KAAK,GAAIH,KAAK,GAAG,IAAK,CAAC;QAC7CK,OAAO,EAAEH,IAAI,CAACC,KAAK,CAAC7B,iBAAiB,GAAGuB,kBAAkB,CAACG,KAAK,CAAC;MACnE,CAAC,CAAC,CAAC;;MAEH;MACA,MAAMM,UAAU,GAAGjB,MAAM,CAACU,GAAG,CAAC,CAACH,KAAK,EAAEI,KAAK,MAAM;QAC/CJ,KAAK;QACLK,OAAO,EAAEC,IAAI,CAACC,KAAK,CAAC,KAAK,GAAIH,KAAK,GAAG,IAAK,CAAC;QAC3CI,SAAS,EAAEF,IAAI,CAACC,KAAK,CAAC,KAAK,GAAIH,KAAK,GAAG,IAAK,CAAC;QAC7CK,OAAO,EAAEH,IAAI,CAACC,KAAK,CAACrB,kBAAkB,GAAGe,kBAAkB,CAACG,KAAK,CAAC;MACpE,CAAC,CAAC,CAAC;;MAEH;MACA,MAAMO,YAAY,GAAG,CACnB;QAAEC,IAAI,EAAE,WAAW;QAAEC,KAAK,EAAE,KAAK;QAAEC,KAAK,EAAE;MAAU,CAAC,EACrD;QAAEF,IAAI,EAAE,SAAS;QAAEC,KAAK,EAAE,KAAK;QAAEC,KAAK,EAAE;MAAU,CAAC,EACnD;QAAEF,IAAI,EAAE,SAAS;QAAEC,KAAK,EAAE3B,kBAAkB;QAAE4B,KAAK,EAAE;MAAU,CAAC,CACjE;MAED,OAAO;QACLZ,cAAc;QACdQ,UAAU;QACVC;MACF,CAAC;IACH,CAAC,CAAC,OAAOI,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;;MAEpD;MACA,MAAMxB,GAAG,GAAG,IAAIC,IAAI,CAAC,CAAC;MACtB,MAAMC,MAAM,GAAG,EAAE;MACjB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,IAAI,CAAC,EAAEA,CAAC,EAAE,EAAE;QAC3B,MAAMC,IAAI,GAAG,IAAIH,IAAI,CAACD,GAAG,CAACK,WAAW,CAAC,CAAC,EAAEL,GAAG,CAACM,QAAQ,CAAC,CAAC,GAAGH,CAAC,EAAE,CAAC,CAAC;QAC/DD,MAAM,CAACK,IAAI,CAACH,IAAI,CAACI,kBAAkB,CAAC,OAAO,EAAE;UAAEC,KAAK,EAAE;QAAQ,CAAC,CAAC,CAAC;MACnE;MAEA,OAAO;QACLE,cAAc,EAAET,MAAM,CAACU,GAAG,CAAC,CAACH,KAAK,EAAEI,KAAK,MAAM;UAC5CJ,KAAK;UACLK,OAAO,EAAE,KAAK,GAAID,KAAK,GAAG,IAAK;UAC/BI,SAAS,EAAE,KAAK,GAAIJ,KAAK,GAAG,IAAK;UACjCK,OAAO,EAAE,KAAK,GAAIL,KAAK,GAAG;QAC5B,CAAC,CAAC,CAAC;QACHM,UAAU,EAAEjB,MAAM,CAACU,GAAG,CAAC,CAACH,KAAK,EAAEI,KAAK,MAAM;UACxCJ,KAAK;UACLK,OAAO,EAAE,KAAK,GAAID,KAAK,GAAG,IAAK;UAC/BI,SAAS,EAAE,KAAK,GAAIJ,KAAK,GAAG,IAAK;UACjCK,OAAO,EAAE,KAAK,GAAIL,KAAK,GAAG;QAC5B,CAAC,CAAC,CAAC;QACHO,YAAY,EAAE,CACZ;UAAEC,IAAI,EAAE,WAAW;UAAEC,KAAK,EAAE,KAAK;UAAEC,KAAK,EAAE;QAAU,CAAC,EACrD;UAAEF,IAAI,EAAE,SAAS;UAAEC,KAAK,EAAE,KAAK;UAAEC,KAAK,EAAE;QAAU,CAAC,EACnD;UAAEF,IAAI,EAAE,SAAS;UAAEC,KAAK,EAAE,KAAK;UAAEC,KAAK,EAAE;QAAU,CAAC;MAEvD,CAAC;IACH;EACF;AACF;AAEA,OAAO,MAAMG,eAAe,GAAG,IAAI3C,eAAe,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}