{"ast":null,"code":"class InstagramService {\n  constructor() {\n    this.config = void 0;\n    this.INSTAGRAM_API_BASE = 'https://graph.instagram.com/v12.0';\n    this.OAUTH_URL = 'https://api.instagram.com/oauth/authorize';\n    // Load saved configuration from localStorage\n    const savedConfig = localStorage.getItem('instagramConfig');\n    if (savedConfig) {\n      this.config = JSON.parse(savedConfig);\n    } else {\n      this.config = {\n        clientId: '',\n        clientSecret: '',\n        redirectUri: `${window.location.origin}/instagram-callback`,\n        accessToken: '',\n        userId: '',\n        username: ''\n      };\n    }\n  }\n  updateConfig(newConfig) {\n    this.config = {\n      ...this.config,\n      ...newConfig\n    };\n    localStorage.setItem('instagramConfig', JSON.stringify(this.config));\n  }\n  getConfig() {\n    return this.config;\n  }\n\n  // Generate OAuth URL for Instagram login\n  getOAuthUrl() {\n    const params = new URLSearchParams({\n      client_id: this.config.clientId,\n      redirect_uri: this.config.redirectUri,\n      scope: 'user_profile,user_media',\n      response_type: 'code',\n      state: this.generateState()\n    });\n    return `${this.OAUTH_URL}?${params.toString()}`;\n  }\n  generateState() {\n    return Math.random().toString(36).substring(2, 15);\n  }\n\n  // Handle OAuth callback and exchange code for access token\n  async handleOAuthCallback(code) {\n    try {\n      console.log('Exchanging authorization code for access token...');\n      const response = await fetch('https://api.instagram.com/oauth/access_token', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/x-www-form-urlencoded'\n        },\n        body: new URLSearchParams({\n          client_id: this.config.clientId,\n          client_secret: this.config.clientSecret,\n          grant_type: 'authorization_code',\n          redirect_uri: this.config.redirectUri,\n          code: code\n        })\n      });\n      if (!response.ok) {\n        const errorText = await response.text();\n        console.error('OAuth exchange failed:', response.status, errorText);\n\n        // Parse error response\n        let errorMessage = 'Failed to exchange code for access token';\n        try {\n          const errorData = JSON.parse(errorText);\n          if (errorData.error) {\n            errorMessage = errorData.error;\n            if (errorData.error_description) {\n              errorMessage += `: ${errorData.error_description}`;\n            }\n          }\n        } catch (e) {\n          // If we can't parse the error, use the raw text\n          errorMessage = errorText;\n        }\n        throw new Error(errorMessage);\n      }\n      const data = await response.json();\n      console.log('OAuth exchange successful, received access token');\n      this.config.accessToken = data.access_token;\n      this.config.userId = data.user_id;\n\n      // Get user info\n      await this.fetchUserInfo();\n      this.updateConfig(this.config);\n      return true;\n    } catch (error) {\n      console.error('OAuth callback error:', error);\n      throw error; // Re-throw to let the component handle it\n    }\n  }\n  async fetchUserInfo() {\n    if (!this.config.accessToken) return;\n    try {\n      const response = await fetch(`${this.INSTAGRAM_API_BASE}/me?fields=id,username&access_token=${this.config.accessToken}`);\n      if (response.ok) {\n        const data = await response.json();\n        this.config.username = data.username;\n      }\n    } catch (error) {\n      console.error('Error fetching user info:', error);\n    }\n  }\n\n  // Check if user is authenticated\n  isAuthenticated() {\n    return !!(this.config.accessToken && this.config.userId);\n  }\n\n  // Get Instagram statistics\n  async getStats() {\n    if (!this.isAuthenticated()) {\n      throw new Error('Instagram not authenticated');\n    }\n\n    // For demo purposes, return realistic mock data\n    // In a real implementation, this would fetch from Instagram API\n    const mockStats = {\n      followers: 12450,\n      following: 890,\n      posts: 156,\n      totalLikes: 89000,\n      totalComments: 3400,\n      engagementRate: 4.2\n    };\n    return mockStats;\n  }\n\n  // Get recent posts\n  async getRecentPosts(limit = 10) {\n    if (!this.isAuthenticated()) {\n      throw new Error('Instagram not authenticated');\n    }\n    try {\n      const response = await fetch(`${this.INSTAGRAM_API_BASE}/me/media?fields=id,caption,media_type,media_url,thumbnail_url,like_count,comments_count,timestamp,permalink&limit=${limit}&access_token=${this.config.accessToken}`);\n      if (!response.ok) {\n        throw new Error('Failed to fetch Instagram posts');\n      }\n      const data = await response.json();\n      const posts = data.data || [];\n      return posts.map(post => ({\n        id: post.id,\n        caption: post.caption || '',\n        mediaType: post.media_type,\n        mediaUrl: post.media_url,\n        thumbnailUrl: post.thumbnail_url,\n        likeCount: post.like_count || 0,\n        commentCount: post.comments_count || 0,\n        timestamp: post.timestamp,\n        permalink: post.permalink\n      }));\n    } catch (error) {\n      console.error('Error fetching Instagram posts:', error);\n      throw error;\n    }\n  }\n\n  // Get analytics with monthly data\n  async getAnalytics() {\n    const [stats, recentPosts] = await Promise.all([this.getStats(), this.getRecentPosts()]);\n\n    // Generate monthly data (mock for now)\n    const months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun'];\n    const monthlyFollowers = months.map((month, index) => ({\n      month,\n      followers: Math.round(stats.followers * (0.8 + index * 0.05))\n    }));\n    const monthlyEngagement = months.map((month, index) => ({\n      month,\n      engagement: Math.round(stats.engagementRate * (0.9 + index * 0.02))\n    }));\n    return {\n      stats,\n      recentPosts,\n      monthlyFollowers,\n      monthlyEngagement\n    };\n  }\n\n  // Logout\n  logout() {\n    this.config.accessToken = '';\n    this.config.userId = '';\n    this.config.username = '';\n    this.updateConfig(this.config);\n  }\n}\nexport const instagramService = new InstagramService();","map":{"version":3,"names":["InstagramService","constructor","config","INSTAGRAM_API_BASE","OAUTH_URL","savedConfig","localStorage","getItem","JSON","parse","clientId","clientSecret","redirectUri","window","location","origin","accessToken","userId","username","updateConfig","newConfig","setItem","stringify","getConfig","getOAuthUrl","params","URLSearchParams","client_id","redirect_uri","scope","response_type","state","generateState","toString","Math","random","substring","handleOAuthCallback","code","console","log","response","fetch","method","headers","body","client_secret","grant_type","ok","errorText","text","error","status","errorMessage","errorData","error_description","e","Error","data","json","access_token","user_id","fetchUserInfo","isAuthenticated","getStats","mockStats","followers","following","posts","totalLikes","totalComments","engagementRate","getRecentPosts","limit","map","post","id","caption","mediaType","media_type","mediaUrl","media_url","thumbnailUrl","thumbnail_url","likeCount","like_count","commentCount","comments_count","timestamp","permalink","getAnalytics","stats","recentPosts","Promise","all","months","monthlyFollowers","month","index","round","monthlyEngagement","engagement","logout","instagramService"],"sources":["/Users/marcodamm/Desktop/Stats_SocialMedia/src/services/instagramService.ts"],"sourcesContent":["export interface InstagramConfig {\n  clientId: string;\n  clientSecret: string;\n  redirectUri: string;\n  accessToken?: string;\n  userId?: string;\n  username?: string;\n}\n\nexport interface InstagramStats {\n  followers: number;\n  following: number;\n  posts: number;\n  totalLikes: number;\n  totalComments: number;\n  engagementRate: number;\n}\n\nexport interface InstagramPost {\n  id: string;\n  caption: string;\n  mediaType: 'IMAGE' | 'VIDEO' | 'CAROUSEL_ALBUM';\n  mediaUrl: string;\n  thumbnailUrl?: string;\n  likeCount: number;\n  commentCount: number;\n  timestamp: string;\n  permalink: string;\n}\n\nexport interface InstagramAnalytics {\n  stats: InstagramStats;\n  recentPosts: InstagramPost[];\n  monthlyFollowers: Array<{ month: string; followers: number }>;\n  monthlyEngagement: Array<{ month: string; engagement: number }>;\n}\n\nclass InstagramService {\n  private config: InstagramConfig;\n  private readonly INSTAGRAM_API_BASE = 'https://graph.instagram.com/v12.0';\n  private readonly OAUTH_URL = 'https://api.instagram.com/oauth/authorize';\n\n  constructor() {\n    // Load saved configuration from localStorage\n    const savedConfig = localStorage.getItem('instagramConfig');\n    if (savedConfig) {\n      this.config = JSON.parse(savedConfig);\n    } else {\n      this.config = {\n        clientId: '',\n        clientSecret: '',\n        redirectUri: `${window.location.origin}/instagram-callback`,\n        accessToken: '',\n        userId: '',\n        username: ''\n      };\n    }\n  }\n\n  updateConfig(newConfig: Partial<InstagramConfig>) {\n    this.config = { ...this.config, ...newConfig };\n    localStorage.setItem('instagramConfig', JSON.stringify(this.config));\n  }\n\n  getConfig(): InstagramConfig {\n    return this.config;\n  }\n\n  // Generate OAuth URL for Instagram login\n  getOAuthUrl(): string {\n    const params = new URLSearchParams({\n      client_id: this.config.clientId,\n      redirect_uri: this.config.redirectUri,\n      scope: 'user_profile,user_media',\n      response_type: 'code',\n      state: this.generateState()\n    });\n    \n    return `${this.OAUTH_URL}?${params.toString()}`;\n  }\n\n  private generateState(): string {\n    return Math.random().toString(36).substring(2, 15);\n  }\n\n  // Handle OAuth callback and exchange code for access token\n  async handleOAuthCallback(code: string): Promise<boolean> {\n    try {\n      console.log('Exchanging authorization code for access token...');\n      \n      const response = await fetch('https://api.instagram.com/oauth/access_token', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/x-www-form-urlencoded',\n        },\n        body: new URLSearchParams({\n          client_id: this.config.clientId,\n          client_secret: this.config.clientSecret,\n          grant_type: 'authorization_code',\n          redirect_uri: this.config.redirectUri,\n          code: code,\n        }),\n      });\n\n      if (!response.ok) {\n        const errorText = await response.text();\n        console.error('OAuth exchange failed:', response.status, errorText);\n        \n        // Parse error response\n        let errorMessage = 'Failed to exchange code for access token';\n        try {\n          const errorData = JSON.parse(errorText);\n          if (errorData.error) {\n            errorMessage = errorData.error;\n            if (errorData.error_description) {\n              errorMessage += `: ${errorData.error_description}`;\n            }\n          }\n        } catch (e) {\n          // If we can't parse the error, use the raw text\n          errorMessage = errorText;\n        }\n        \n        throw new Error(errorMessage);\n      }\n\n      const data = await response.json();\n      console.log('OAuth exchange successful, received access token');\n      \n      this.config.accessToken = data.access_token;\n      this.config.userId = data.user_id;\n      \n      // Get user info\n      await this.fetchUserInfo();\n      \n      this.updateConfig(this.config);\n      return true;\n    } catch (error) {\n      console.error('OAuth callback error:', error);\n      throw error; // Re-throw to let the component handle it\n    }\n  }\n\n  private async fetchUserInfo(): Promise<void> {\n    if (!this.config.accessToken) return;\n\n    try {\n      const response = await fetch(\n        `${this.INSTAGRAM_API_BASE}/me?fields=id,username&access_token=${this.config.accessToken}`\n      );\n      \n      if (response.ok) {\n        const data = await response.json();\n        this.config.username = data.username;\n      }\n    } catch (error) {\n      console.error('Error fetching user info:', error);\n    }\n  }\n\n  // Check if user is authenticated\n  isAuthenticated(): boolean {\n    return !!(this.config.accessToken && this.config.userId);\n  }\n\n  // Get Instagram statistics\n  async getStats(): Promise<InstagramStats> {\n    if (!this.isAuthenticated()) {\n      throw new Error('Instagram not authenticated');\n    }\n\n    // For demo purposes, return realistic mock data\n    // In a real implementation, this would fetch from Instagram API\n    const mockStats: InstagramStats = {\n      followers: 12450,\n      following: 890,\n      posts: 156,\n      totalLikes: 89000,\n      totalComments: 3400,\n      engagementRate: 4.2\n    };\n\n    return mockStats;\n  }\n\n  // Get recent posts\n  async getRecentPosts(limit: number = 10): Promise<InstagramPost[]> {\n    if (!this.isAuthenticated()) {\n      throw new Error('Instagram not authenticated');\n    }\n\n    try {\n      const response = await fetch(\n        `${this.INSTAGRAM_API_BASE}/me/media?fields=id,caption,media_type,media_url,thumbnail_url,like_count,comments_count,timestamp,permalink&limit=${limit}&access_token=${this.config.accessToken}`\n      );\n\n      if (!response.ok) {\n        throw new Error('Failed to fetch Instagram posts');\n      }\n\n      const data = await response.json();\n      const posts = data.data || [];\n\n      return posts.map((post: any) => ({\n        id: post.id,\n        caption: post.caption || '',\n        mediaType: post.media_type,\n        mediaUrl: post.media_url,\n        thumbnailUrl: post.thumbnail_url,\n        likeCount: post.like_count || 0,\n        commentCount: post.comments_count || 0,\n        timestamp: post.timestamp,\n        permalink: post.permalink\n      }));\n    } catch (error) {\n      console.error('Error fetching Instagram posts:', error);\n      throw error;\n    }\n  }\n\n  // Get analytics with monthly data\n  async getAnalytics(): Promise<InstagramAnalytics> {\n    const [stats, recentPosts] = await Promise.all([\n      this.getStats(),\n      this.getRecentPosts()\n    ]);\n\n    // Generate monthly data (mock for now)\n    const months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun'];\n    const monthlyFollowers = months.map((month, index) => ({\n      month,\n      followers: Math.round(stats.followers * (0.8 + (index * 0.05)))\n    }));\n\n    const monthlyEngagement = months.map((month, index) => ({\n      month,\n      engagement: Math.round(stats.engagementRate * (0.9 + (index * 0.02)))\n    }));\n\n    return {\n      stats,\n      recentPosts,\n      monthlyFollowers,\n      monthlyEngagement\n    };\n  }\n\n  // Logout\n  logout(): void {\n    this.config.accessToken = '';\n    this.config.userId = '';\n    this.config.username = '';\n    this.updateConfig(this.config);\n  }\n}\n\nexport const instagramService = new InstagramService(); "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}