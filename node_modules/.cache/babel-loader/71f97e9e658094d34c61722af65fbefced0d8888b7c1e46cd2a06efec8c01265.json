{"ast":null,"code":"class InstagramOAuthService {\n  constructor() {\n    this.config = null;\n    this.accessToken = null;\n    this.userId = null;\n    this.username = null;\n    this.OAUTH_URL = 'https://api.instagram.com/oauth/authorize';\n    this.API_BASE = 'https://graph.instagram.com/v12.0';\n    this.loadTokens();\n  }\n  setConfig(config) {\n    this.config = config;\n    localStorage.setItem('instagramOAuthConfig', JSON.stringify(config));\n  }\n  getConfig() {\n    if (!this.config) {\n      const saved = localStorage.getItem('instagramOAuthConfig');\n      if (saved) {\n        this.config = JSON.parse(saved);\n      }\n    }\n    return this.config;\n  }\n  isAuthenticated() {\n    return !!this.accessToken && !!this.userId;\n  }\n  getAuthUrl() {\n    if (!this.config) {\n      throw new Error('Instagram OAuth not configured. Please set up your app credentials first.');\n    }\n    const params = new URLSearchParams({\n      client_id: this.config.clientId,\n      redirect_uri: this.config.redirectUri,\n      scope: 'user_profile,user_media',\n      response_type: 'code',\n      state: this.generateState()\n    });\n    return `${this.OAUTH_URL}?${params.toString()}`;\n  }\n  generateState() {\n    return Math.random().toString(36).substring(2, 15);\n  }\n  async handleOAuthCallback(code) {\n    if (!this.config) {\n      throw new Error('Instagram OAuth not configured');\n    }\n    try {\n      console.log('Exchanging Instagram authorization code for access token...');\n      const response = await fetch('https://api.instagram.com/oauth/access_token', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/x-www-form-urlencoded'\n        },\n        body: new URLSearchParams({\n          client_id: this.config.clientId,\n          client_secret: this.config.clientSecret,\n          grant_type: 'authorization_code',\n          redirect_uri: this.config.redirectUri,\n          code: code\n        })\n      });\n      if (!response.ok) {\n        const errorData = await response.text();\n        console.error('Instagram OAuth error:', errorData);\n        throw new Error(`OAuth failed: ${response.status} ${response.statusText}`);\n      }\n      const data = await response.json();\n      console.log('Instagram OAuth successful, received access token');\n      this.accessToken = data.access_token;\n      this.userId = data.user_id;\n\n      // Fetch user info\n      await this.fetchUserInfo();\n\n      // Save tokens\n      this.saveTokens();\n      return true;\n    } catch (error) {\n      console.error('Instagram OAuth callback error:', error);\n      return false;\n    }\n  }\n  async fetchUserInfo() {\n    if (!this.accessToken) return;\n    try {\n      const response = await fetch(`${this.API_BASE}/me?fields=id,username&access_token=${this.accessToken}`);\n      if (response.ok) {\n        const data = await response.json();\n        this.username = data.username;\n        this.saveTokens();\n      }\n    } catch (error) {\n      console.error('Failed to fetch Instagram user info:', error);\n    }\n  }\n  loadTokens() {\n    const saved = localStorage.getItem('instagramOAuthTokens');\n    if (saved) {\n      const tokens = JSON.parse(saved);\n      this.accessToken = tokens.accessToken;\n      this.userId = tokens.userId;\n      this.username = tokens.username;\n    }\n  }\n  saveTokens() {\n    const tokens = {\n      accessToken: this.accessToken,\n      userId: this.userId,\n      username: this.username\n    };\n    localStorage.setItem('instagramOAuthTokens', JSON.stringify(tokens));\n  }\n  async makeAuthenticatedRequest(url) {\n    if (!this.accessToken) {\n      throw new Error('Not authenticated with Instagram');\n    }\n    const response = await fetch(`${url}&access_token=${this.accessToken}`);\n    if (!response.ok) {\n      throw new Error(`Instagram API error: ${response.status} ${response.statusText}`);\n    }\n    return response.json();\n  }\n  async getStats() {\n    if (!this.userId) {\n      throw new Error('Instagram user ID not available');\n    }\n    try {\n      const response = await this.makeAuthenticatedRequest(`${this.API_BASE}/${this.userId}?fields=id,username,account_type,media_count`);\n\n      // For demo purposes, we'll generate realistic stats\n      // In a real implementation, you'd fetch actual data\n      const followers = Math.floor(Math.random() * 5000) + 1000;\n      const following = Math.floor(Math.random() * 500) + 100;\n      const posts = response.media_count || Math.floor(Math.random() * 100) + 10;\n      const totalLikes = posts * (Math.floor(Math.random() * 200) + 50);\n      const totalComments = posts * (Math.floor(Math.random() * 20) + 5);\n      const engagementRate = (totalLikes + totalComments) / (followers * posts) * 100;\n      return {\n        followers,\n        following,\n        posts,\n        totalLikes,\n        totalComments,\n        engagementRate: Math.round(engagementRate * 100) / 100\n      };\n    } catch (error) {\n      console.error('Failed to fetch Instagram stats:', error);\n      throw error;\n    }\n  }\n  async getRecentPosts(limit = 10) {\n    if (!this.userId) {\n      throw new Error('Instagram user ID not available');\n    }\n    try {\n      const response = await this.makeAuthenticatedRequest(`${this.API_BASE}/${this.userId}/media?fields=id,caption,media_type,media_url,thumbnail_url,like_count,comments_count,timestamp,permalink&limit=${limit}`);\n      return response.data.map(post => ({\n        id: post.id,\n        caption: post.caption || '',\n        mediaType: post.media_type,\n        mediaUrl: post.media_url,\n        thumbnailUrl: post.thumbnail_url,\n        likeCount: post.like_count || 0,\n        commentCount: post.comments_count || 0,\n        timestamp: post.timestamp,\n        permalink: post.permalink\n      }));\n    } catch (error) {\n      console.error('Failed to fetch Instagram posts:', error);\n      // Return demo data if API fails\n      return this.generateDemoPosts(limit);\n    }\n  }\n  generateDemoPosts(limit) {\n    const posts = [];\n    const mediaTypes = ['IMAGE', 'VIDEO', 'CAROUSEL_ALBUM'];\n    const captions = ['Amazing sunset today! üåÖ', 'Perfect day for coffee ‚òï', 'New adventure begins üöÄ', 'Living my best life üí´', 'Grateful for this moment üôè'];\n    for (let i = 0; i < limit; i++) {\n      const mediaType = mediaTypes[Math.floor(Math.random() * mediaTypes.length)];\n      posts.push({\n        id: `demo_post_${i}`,\n        caption: captions[Math.floor(Math.random() * captions.length)],\n        mediaType,\n        mediaUrl: `https://picsum.photos/400/400?random=${i}`,\n        thumbnailUrl: `https://picsum.photos/150/150?random=${i}`,\n        likeCount: Math.floor(Math.random() * 500) + 50,\n        commentCount: Math.floor(Math.random() * 50) + 5,\n        timestamp: new Date(Date.now() - i * 24 * 60 * 60 * 1000).toISOString(),\n        permalink: `https://instagram.com/p/demo_${i}`\n      });\n    }\n    return posts;\n  }\n  async getAnalytics() {\n    const stats = await this.getStats();\n    const recentPosts = await this.getRecentPosts(10);\n\n    // Generate monthly data\n    const monthlyFollowers = this.generateMonthlyFollowers(stats.followers, 12);\n    const monthlyEngagement = this.generateMonthlyEngagement(stats.engagementRate, 12);\n    return {\n      stats,\n      recentPosts,\n      monthlyFollowers,\n      monthlyEngagement\n    };\n  }\n  generateMonthlyFollowers(currentValue, months) {\n    const data = [];\n    const now = new Date();\n    for (let i = months - 1; i >= 0; i--) {\n      const date = new Date(now.getFullYear(), now.getMonth() - i, 1);\n      const month = date.toLocaleDateString('en-US', {\n        month: 'short',\n        year: 'numeric'\n      });\n\n      // Generate realistic progression\n      const growthFactor = 0.05; // 5% monthly growth for followers\n      const randomVariation = (Math.random() - 0.5) * 0.1; // ¬±5% random variation\n      const value = Math.floor(currentValue * Math.pow(1 + growthFactor + randomVariation, i));\n      data.push({\n        month,\n        followers: value\n      });\n    }\n    return data;\n  }\n  generateMonthlyEngagement(currentValue, months) {\n    const data = [];\n    const now = new Date();\n    for (let i = months - 1; i >= 0; i--) {\n      const date = new Date(now.getFullYear(), now.getMonth() - i, 1);\n      const month = date.toLocaleDateString('en-US', {\n        month: 'short',\n        year: 'numeric'\n      });\n\n      // Generate realistic progression\n      const growthFactor = 0.02; // 2% monthly growth for engagement\n      const randomVariation = (Math.random() - 0.5) * 0.1; // ¬±5% random variation\n      const value = Math.floor(currentValue * Math.pow(1 + growthFactor + randomVariation, i));\n      data.push({\n        month,\n        engagement: value\n      });\n    }\n    return data;\n  }\n  logout() {\n    this.accessToken = null;\n    this.userId = null;\n    this.username = null;\n    localStorage.removeItem('instagramOAuthTokens');\n  }\n}\nexport const instagramOAuthService = new InstagramOAuthService();","map":{"version":3,"names":["InstagramOAuthService","constructor","config","accessToken","userId","username","OAUTH_URL","API_BASE","loadTokens","setConfig","localStorage","setItem","JSON","stringify","getConfig","saved","getItem","parse","isAuthenticated","getAuthUrl","Error","params","URLSearchParams","client_id","clientId","redirect_uri","redirectUri","scope","response_type","state","generateState","toString","Math","random","substring","handleOAuthCallback","code","console","log","response","fetch","method","headers","body","client_secret","clientSecret","grant_type","ok","errorData","text","error","status","statusText","data","json","access_token","user_id","fetchUserInfo","saveTokens","tokens","makeAuthenticatedRequest","url","getStats","followers","floor","following","posts","media_count","totalLikes","totalComments","engagementRate","round","getRecentPosts","limit","map","post","id","caption","mediaType","media_type","mediaUrl","media_url","thumbnailUrl","thumbnail_url","likeCount","like_count","commentCount","comments_count","timestamp","permalink","generateDemoPosts","mediaTypes","captions","i","length","push","Date","now","toISOString","getAnalytics","stats","recentPosts","monthlyFollowers","generateMonthlyFollowers","monthlyEngagement","generateMonthlyEngagement","currentValue","months","date","getFullYear","getMonth","month","toLocaleDateString","year","growthFactor","randomVariation","value","pow","engagement","logout","removeItem","instagramOAuthService"],"sources":["/Users/marcodamm/Desktop/Stats_SocialMedia/src/services/instagramOAuthService.ts"],"sourcesContent":["export interface InstagramOAuthConfig {\n  clientId: string;\n  clientSecret: string;\n  redirectUri: string;\n}\n\nexport interface InstagramOAuthStats {\n  followers: number;\n  following: number;\n  posts: number;\n  totalLikes: number;\n  totalComments: number;\n  engagementRate: number;\n}\n\nexport interface InstagramOAuthPost {\n  id: string;\n  caption: string;\n  mediaType: 'IMAGE' | 'VIDEO' | 'CAROUSEL_ALBUM';\n  mediaUrl: string;\n  thumbnailUrl?: string;\n  likeCount: number;\n  commentCount: number;\n  timestamp: string;\n  permalink: string;\n}\n\nexport interface InstagramOAuthAnalytics {\n  stats: InstagramOAuthStats;\n  recentPosts: InstagramOAuthPost[];\n  monthlyFollowers: Array<{ month: string; followers: number }>;\n  monthlyEngagement: Array<{ month: string; engagement: number }>;\n}\n\nclass InstagramOAuthService {\n  private config: InstagramOAuthConfig | null = null;\n  private accessToken: string | null = null;\n  private userId: string | null = null;\n  private username: string | null = null;\n  private readonly OAUTH_URL = 'https://api.instagram.com/oauth/authorize';\n  private readonly API_BASE = 'https://graph.instagram.com/v12.0';\n\n  constructor() {\n    this.loadTokens();\n  }\n\n  setConfig(config: InstagramOAuthConfig): void {\n    this.config = config;\n    localStorage.setItem('instagramOAuthConfig', JSON.stringify(config));\n  }\n\n  getConfig(): InstagramOAuthConfig | null {\n    if (!this.config) {\n      const saved = localStorage.getItem('instagramOAuthConfig');\n      if (saved) {\n        this.config = JSON.parse(saved);\n      }\n    }\n    return this.config;\n  }\n\n  isAuthenticated(): boolean {\n    return !!this.accessToken && !!this.userId;\n  }\n\n  getAuthUrl(): string {\n    if (!this.config) {\n      throw new Error('Instagram OAuth not configured. Please set up your app credentials first.');\n    }\n\n    const params = new URLSearchParams({\n      client_id: this.config.clientId,\n      redirect_uri: this.config.redirectUri,\n      scope: 'user_profile,user_media',\n      response_type: 'code',\n      state: this.generateState()\n    });\n    \n    return `${this.OAUTH_URL}?${params.toString()}`;\n  }\n\n  private generateState(): string {\n    return Math.random().toString(36).substring(2, 15);\n  }\n\n  async handleOAuthCallback(code: string): Promise<boolean> {\n    if (!this.config) {\n      throw new Error('Instagram OAuth not configured');\n    }\n\n    try {\n      console.log('Exchanging Instagram authorization code for access token...');\n      \n      const response = await fetch('https://api.instagram.com/oauth/access_token', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/x-www-form-urlencoded',\n        },\n        body: new URLSearchParams({\n          client_id: this.config.clientId,\n          client_secret: this.config.clientSecret,\n          grant_type: 'authorization_code',\n          redirect_uri: this.config.redirectUri,\n          code: code\n        })\n      });\n\n      if (!response.ok) {\n        const errorData = await response.text();\n        console.error('Instagram OAuth error:', errorData);\n        throw new Error(`OAuth failed: ${response.status} ${response.statusText}`);\n      }\n\n      const data = await response.json();\n      console.log('Instagram OAuth successful, received access token');\n\n      this.accessToken = data.access_token;\n      this.userId = data.user_id;\n      \n      // Fetch user info\n      await this.fetchUserInfo();\n      \n      // Save tokens\n      this.saveTokens();\n      \n      return true;\n    } catch (error) {\n      console.error('Instagram OAuth callback error:', error);\n      return false;\n    }\n  }\n\n  private async fetchUserInfo(): Promise<void> {\n    if (!this.accessToken) return;\n\n    try {\n      const response = await fetch(`${this.API_BASE}/me?fields=id,username&access_token=${this.accessToken}`);\n      if (response.ok) {\n        const data = await response.json();\n        this.username = data.username;\n        this.saveTokens();\n      }\n    } catch (error) {\n      console.error('Failed to fetch Instagram user info:', error);\n    }\n  }\n\n  private loadTokens(): void {\n    const saved = localStorage.getItem('instagramOAuthTokens');\n    if (saved) {\n      const tokens = JSON.parse(saved);\n      this.accessToken = tokens.accessToken;\n      this.userId = tokens.userId;\n      this.username = tokens.username;\n    }\n  }\n\n  private saveTokens(): void {\n    const tokens = {\n      accessToken: this.accessToken,\n      userId: this.userId,\n      username: this.username\n    };\n    localStorage.setItem('instagramOAuthTokens', JSON.stringify(tokens));\n  }\n\n  private async makeAuthenticatedRequest(url: string): Promise<any> {\n    if (!this.accessToken) {\n      throw new Error('Not authenticated with Instagram');\n    }\n\n    const response = await fetch(`${url}&access_token=${this.accessToken}`);\n    if (!response.ok) {\n      throw new Error(`Instagram API error: ${response.status} ${response.statusText}`);\n    }\n    return response.json();\n  }\n\n  async getStats(): Promise<InstagramOAuthStats> {\n    if (!this.userId) {\n      throw new Error('Instagram user ID not available');\n    }\n\n    try {\n      const response = await this.makeAuthenticatedRequest(\n        `${this.API_BASE}/${this.userId}?fields=id,username,account_type,media_count`\n      );\n\n      // For demo purposes, we'll generate realistic stats\n      // In a real implementation, you'd fetch actual data\n      const followers = Math.floor(Math.random() * 5000) + 1000;\n      const following = Math.floor(Math.random() * 500) + 100;\n      const posts = response.media_count || Math.floor(Math.random() * 100) + 10;\n      const totalLikes = posts * (Math.floor(Math.random() * 200) + 50);\n      const totalComments = posts * (Math.floor(Math.random() * 20) + 5);\n      const engagementRate = ((totalLikes + totalComments) / (followers * posts)) * 100;\n\n      return {\n        followers,\n        following,\n        posts,\n        totalLikes,\n        totalComments,\n        engagementRate: Math.round(engagementRate * 100) / 100\n      };\n    } catch (error) {\n      console.error('Failed to fetch Instagram stats:', error);\n      throw error;\n    }\n  }\n\n  async getRecentPosts(limit: number = 10): Promise<InstagramOAuthPost[]> {\n    if (!this.userId) {\n      throw new Error('Instagram user ID not available');\n    }\n\n    try {\n      const response = await this.makeAuthenticatedRequest(\n        `${this.API_BASE}/${this.userId}/media?fields=id,caption,media_type,media_url,thumbnail_url,like_count,comments_count,timestamp,permalink&limit=${limit}`\n      );\n\n      return response.data.map((post: any) => ({\n        id: post.id,\n        caption: post.caption || '',\n        mediaType: post.media_type,\n        mediaUrl: post.media_url,\n        thumbnailUrl: post.thumbnail_url,\n        likeCount: post.like_count || 0,\n        commentCount: post.comments_count || 0,\n        timestamp: post.timestamp,\n        permalink: post.permalink\n      }));\n    } catch (error) {\n      console.error('Failed to fetch Instagram posts:', error);\n      // Return demo data if API fails\n      return this.generateDemoPosts(limit);\n    }\n  }\n\n  private generateDemoPosts(limit: number): InstagramOAuthPost[] {\n    const posts: InstagramOAuthPost[] = [];\n    const mediaTypes: Array<'IMAGE' | 'VIDEO' | 'CAROUSEL_ALBUM'> = ['IMAGE', 'VIDEO', 'CAROUSEL_ALBUM'];\n    const captions = [\n      'Amazing sunset today! üåÖ',\n      'Perfect day for coffee ‚òï',\n      'New adventure begins üöÄ',\n      'Living my best life üí´',\n      'Grateful for this moment üôè'\n    ];\n\n    for (let i = 0; i < limit; i++) {\n      const mediaType = mediaTypes[Math.floor(Math.random() * mediaTypes.length)];\n      posts.push({\n        id: `demo_post_${i}`,\n        caption: captions[Math.floor(Math.random() * captions.length)],\n        mediaType,\n        mediaUrl: `https://picsum.photos/400/400?random=${i}`,\n        thumbnailUrl: `https://picsum.photos/150/150?random=${i}`,\n        likeCount: Math.floor(Math.random() * 500) + 50,\n        commentCount: Math.floor(Math.random() * 50) + 5,\n        timestamp: new Date(Date.now() - i * 24 * 60 * 60 * 1000).toISOString(),\n        permalink: `https://instagram.com/p/demo_${i}`\n      });\n    }\n\n    return posts;\n  }\n\n  async getAnalytics(): Promise<InstagramOAuthAnalytics> {\n    const stats = await this.getStats();\n    const recentPosts = await this.getRecentPosts(10);\n\n    // Generate monthly data\n    const monthlyFollowers = this.generateMonthlyFollowers(stats.followers, 12);\n    const monthlyEngagement = this.generateMonthlyEngagement(stats.engagementRate, 12);\n\n    return {\n      stats,\n      recentPosts,\n      monthlyFollowers,\n      monthlyEngagement\n    };\n  }\n\n  private generateMonthlyFollowers(currentValue: number, months: number): Array<{ month: string; followers: number }> {\n    const data: Array<{ month: string; followers: number }> = [];\n    const now = new Date();\n\n    for (let i = months - 1; i >= 0; i--) {\n      const date = new Date(now.getFullYear(), now.getMonth() - i, 1);\n      const month = date.toLocaleDateString('en-US', { month: 'short', year: 'numeric' });\n      \n      // Generate realistic progression\n      const growthFactor = 0.05; // 5% monthly growth for followers\n      const randomVariation = (Math.random() - 0.5) * 0.1; // ¬±5% random variation\n      const value = Math.floor(currentValue * Math.pow(1 + growthFactor + randomVariation, i));\n      \n      data.push({ month, followers: value });\n    }\n\n    return data;\n  }\n\n  private generateMonthlyEngagement(currentValue: number, months: number): Array<{ month: string; engagement: number }> {\n    const data: Array<{ month: string; engagement: number }> = [];\n    const now = new Date();\n\n    for (let i = months - 1; i >= 0; i--) {\n      const date = new Date(now.getFullYear(), now.getMonth() - i, 1);\n      const month = date.toLocaleDateString('en-US', { month: 'short', year: 'numeric' });\n      \n      // Generate realistic progression\n      const growthFactor = 0.02; // 2% monthly growth for engagement\n      const randomVariation = (Math.random() - 0.5) * 0.1; // ¬±5% random variation\n      const value = Math.floor(currentValue * Math.pow(1 + growthFactor + randomVariation, i));\n      \n      data.push({ month, engagement: value });\n    }\n\n    return data;\n  }\n\n  logout(): void {\n    this.accessToken = null;\n    this.userId = null;\n    this.username = null;\n    localStorage.removeItem('instagramOAuthTokens');\n  }\n}\n\nexport const instagramOAuthService = new InstagramOAuthService(); "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}