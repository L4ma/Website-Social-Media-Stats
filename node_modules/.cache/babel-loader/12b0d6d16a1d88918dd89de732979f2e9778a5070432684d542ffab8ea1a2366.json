{"ast":null,"code":"import{dataCollectionService}from'../services/dataCollectionService';export const generateTimeFilteredData=function(baseData,filter,currentValue){let dataType=arguments.length>3&&arguments[3]!==undefined?arguments[3]:'subscribers';const now=new Date();let dataPoints=[];// Try to get real historical data first\n// const historicalData = dataCollectionService.getHistoricalData(); // Unused variable removed\nswitch(filter){case'7d':// Try to use real 7-day data\nconst weekData=dataCollectionService.getDataForPeriod(7);if(weekData.length>0){// Use real historical data\ndataPoints=weekData.map(stat=>({date:new Date(stat.date).toLocaleDateString('en-US',{month:'short',day:'numeric'}),value:dataType==='subscribers'?stat.subscriberCount:stat.viewCount,fullDate:stat.date}));}else{// Fallback to generated data\nfor(let i=0;i<=6;i++){const date=new Date(now.getFullYear(),now.getMonth(),now.getDate()-(6-i));dataPoints.push({date:date.toLocaleDateString('en-US',{month:'short',day:'numeric'}),value:Math.round(currentValue*(0.85+i*0.025)),fullDate:date.toISOString().split('T')[0]});}}break;case'30d':// Try to use real 30-day data\nconst monthData=dataCollectionService.getDataForPeriod(30);if(monthData.length>0){// Group by weeks\nconst weeklyData=new Map();monthData.forEach(stat=>{const weekStart=new Date(stat.date);weekStart.setDate(weekStart.getDate()-weekStart.getDay());const weekKey=weekStart.toISOString().split('T')[0];if(!weeklyData.has(weekKey)){weeklyData.set(weekKey,{subscribers:0,views:0,count:0});}weeklyData.get(weekKey).subscribers+=stat.subscriberCount;weeklyData.get(weekKey).views+=stat.viewCount;weeklyData.get(weekKey).count+=1;});dataPoints=Array.from(weeklyData.entries()).map((_ref,index)=>{let[weekKey,data]=_ref;return{date:`Week ${index+1}`,value:Math.round((dataType==='subscribers'?data.subscribers:data.views)/data.count),fullDate:weekKey};});}else{// Fallback to generated data\nfor(let i=0;i<=4;i++){const date=new Date(now.getFullYear(),now.getMonth(),now.getDate()-(4-i)*7);dataPoints.push({date:`Week ${i+1}`,value:Math.round(currentValue*(0.75+i*0.05)),fullDate:date.toISOString().split('T')[0]});}}break;case'3m':// Try to use real 3-month data\nconst threeMonthData=dataCollectionService.getMonthlyData(3);if(threeMonthData.length>0){dataPoints=threeMonthData.map(stat=>({date:stat.month,value:stat.subscribers,fullDate:stat.month}));}else{// Fallback to generated data\nfor(let i=0;i<=2;i++){const date=new Date(now.getFullYear(),now.getMonth()-(2-i),1);dataPoints.push({date:date.toLocaleDateString('en-US',{month:'short'}),value:Math.round(currentValue*(0.8+i*0.1)),fullDate:date.toISOString().split('T')[0]});}}break;case'6m':// Try to use real 6-month data\nconst sixMonthData=dataCollectionService.getMonthlyData(6);if(sixMonthData.length>0){dataPoints=sixMonthData.map(stat=>({date:stat.month,value:stat.subscribers,fullDate:stat.month}));}else{// Fallback to generated data\nfor(let i=0;i<=5;i++){const date=new Date(now.getFullYear(),now.getMonth()-(5-i),1);dataPoints.push({date:date.toLocaleDateString('en-US',{month:'short'}),value:Math.round(currentValue*(0.7+i*0.06)),fullDate:date.toISOString().split('T')[0]});}}break;case'1y':// Try to use real 12-month data\nconst yearData=dataCollectionService.getMonthlyData(12);if(yearData.length>0){// Group by quarters\nconst quarterlyData=new Map();yearData.forEach(stat=>{const month=new Date(stat.month);const quarter=Math.floor(month.getMonth()/3)+1;const quarterKey=`Q${quarter}`;if(!quarterlyData.has(quarterKey)){quarterlyData.set(quarterKey,{subscribers:0,count:0});}quarterlyData.get(quarterKey).subscribers+=stat.subscribers;quarterlyData.get(quarterKey).count+=1;});dataPoints=Array.from(quarterlyData.entries()).map(_ref2=>{let[quarter,data]=_ref2;return{date:quarter,value:Math.round(data.subscribers/data.count),fullDate:quarter};});}else{// Fallback to generated data\nfor(let i=0;i<=3;i++){const date=new Date(now.getFullYear(),now.getMonth()-(3-i)*3,1);dataPoints.push({date:`Q${i+1}`,value:Math.round(currentValue*(0.6+i*0.1)),fullDate:date.toISOString().split('T')[0]});}}break;default:// Default to 6 months if no valid filter\nfor(let i=0;i<=5;i++){const date=new Date(now.getFullYear(),now.getMonth()-(5-i),1);dataPoints.push({date:date.toLocaleDateString('en-US',{month:'short'}),value:Math.round(currentValue*(0.7+i*0.06)),fullDate:date.toISOString().split('T')[0]});}break;}return dataPoints;};export const generateMultiPlatformData=function(filter,youtubeValue){let threadsValue=arguments.length>2&&arguments[2]!==undefined?arguments[2]:48500;let instagramValue=arguments.length>3&&arguments[3]!==undefined?arguments[3]:12450;const now=new Date();let dataPoints=[];switch(filter){case'7d':// Last 7 days - start from 7 days ago and grow to current\nfor(let i=0;i<=6;i++){const date=new Date(now.getFullYear(),now.getMonth(),now.getDate()-(6-i));dataPoints.push({date:date.toLocaleDateString('en-US',{month:'short',day:'numeric'}),threads:Math.round(threadsValue*(0.85+i*0.025)),instagram:Math.round(instagramValue*(0.85+i*0.025)),youtube:Math.round(youtubeValue*(0.85+i*0.025))});}break;case'30d':// Last 30 days (weekly averages) - start from 4 weeks ago and grow to current\nfor(let i=0;i<=4;i++){dataPoints.push({date:`Week ${i+1}`,threads:Math.round(threadsValue*(0.75+i*0.05)),instagram:Math.round(instagramValue*(0.75+i*0.05)),youtube:Math.round(youtubeValue*(0.75+i*0.05))});}break;case'3m':// Last 3 months - start from 3 months ago and grow to current\nfor(let i=0;i<=2;i++){const date=new Date(now.getFullYear(),now.getMonth()-(2-i),1);dataPoints.push({date:date.toLocaleDateString('en-US',{month:'short'}),threads:Math.round(threadsValue*(0.8+i*0.1)),instagram:Math.round(instagramValue*(0.8+i*0.1)),youtube:Math.round(youtubeValue*(0.8+i*0.1))});}break;case'6m':// Last 6 months - start from 6 months ago and grow to current\nfor(let i=0;i<=5;i++){const date=new Date(now.getFullYear(),now.getMonth()-(5-i),1);dataPoints.push({date:date.toLocaleDateString('en-US',{month:'short'}),threads:Math.round(threadsValue*(0.7+i*0.06)),instagram:Math.round(instagramValue*(0.7+i*0.06)),youtube:Math.round(youtubeValue*(0.7+i*0.06))});}break;case'1y':// Last 12 months (quarterly) - start from 1 year ago and grow to current\nfor(let i=0;i<=3;i++){dataPoints.push({date:`Q${i+1}`,threads:Math.round(threadsValue*(0.6+i*0.1)),instagram:Math.round(instagramValue*(0.6+i*0.1)),youtube:Math.round(youtubeValue*(0.6+i*0.1))});}break;default:// Default to 6 months if no valid filter\nfor(let i=0;i<=5;i++){const date=new Date(now.getFullYear(),now.getMonth()-(5-i),1);dataPoints.push({date:date.toLocaleDateString('en-US',{month:'short'}),threads:Math.round(threadsValue*(0.7+i*0.06)),instagram:Math.round(instagramValue*(0.7+i*0.06)),youtube:Math.round(youtubeValue*(0.7+i*0.06))});}break;}return dataPoints;};","map":{"version":3,"names":["dataCollectionService","generateTimeFilteredData","baseData","filter","currentValue","dataType","arguments","length","undefined","now","Date","dataPoints","weekData","getDataForPeriod","map","stat","date","toLocaleDateString","month","day","value","subscriberCount","viewCount","fullDate","i","getFullYear","getMonth","getDate","push","Math","round","toISOString","split","monthData","weeklyData","Map","forEach","weekStart","setDate","getDay","weekKey","has","set","subscribers","views","count","get","Array","from","entries","_ref","index","data","threeMonthData","getMonthlyData","sixMonthData","yearData","quarterlyData","quarter","floor","quarterKey","_ref2","generateMultiPlatformData","youtubeValue","threadsValue","instagramValue","threads","instagram","youtube"],"sources":["/Users/marcodamm/Desktop/Stats_SocialMedia/src/utils/chartDataUtils.ts"],"sourcesContent":["import { TimeFilter } from '../components/ChartFilters';\nimport { dataCollectionService } from '../services/dataCollectionService';\n\nexport interface ChartDataPoint {\n  date: string;\n  value: number;\n  label?: string;\n}\n\nexport interface MultiPlatformDataPoint {\n  date: string;\n  threads: number;\n  instagram: number;\n  youtube: number;\n}\n\nexport const generateTimeFilteredData = (\n  baseData: any[],\n  filter: TimeFilter,\n  currentValue: number,\n  dataType: 'subscribers' | 'views' | 'followers' | 'engagement' = 'subscribers'\n): any[] => {\n  const now = new Date();\n  let dataPoints: any[] = [];\n\n  // Try to get real historical data first\n  // const historicalData = dataCollectionService.getHistoricalData(); // Unused variable removed\n  \n  switch (filter) {\n    case '7d':\n      // Try to use real 7-day data\n      const weekData = dataCollectionService.getDataForPeriod(7);\n      if (weekData.length > 0) {\n        // Use real historical data\n        dataPoints = weekData.map(stat => ({\n          date: new Date(stat.date).toLocaleDateString('en-US', { month: 'short', day: 'numeric' }),\n          value: dataType === 'subscribers' ? stat.subscriberCount : stat.viewCount,\n          fullDate: stat.date,\n        }));\n      } else {\n        // Fallback to generated data\n        for (let i = 0; i <= 6; i++) {\n          const date = new Date(now.getFullYear(), now.getMonth(), now.getDate() - (6 - i));\n          dataPoints.push({\n            date: date.toLocaleDateString('en-US', { month: 'short', day: 'numeric' }),\n            value: Math.round(currentValue * (0.85 + (i * 0.025))),\n            fullDate: date.toISOString().split('T')[0],\n          });\n        }\n      }\n      break;\n\n    case '30d':\n      // Try to use real 30-day data\n      const monthData = dataCollectionService.getDataForPeriod(30);\n      if (monthData.length > 0) {\n        // Group by weeks\n        const weeklyData = new Map<string, { subscribers: number; views: number; count: number }>();\n        monthData.forEach(stat => {\n          const weekStart = new Date(stat.date);\n          weekStart.setDate(weekStart.getDate() - weekStart.getDay());\n          const weekKey = weekStart.toISOString().split('T')[0];\n          \n          if (!weeklyData.has(weekKey)) {\n            weeklyData.set(weekKey, { subscribers: 0, views: 0, count: 0 });\n          }\n          weeklyData.get(weekKey)!.subscribers += stat.subscriberCount;\n          weeklyData.get(weekKey)!.views += stat.viewCount;\n          weeklyData.get(weekKey)!.count += 1;\n        });\n        \n        dataPoints = Array.from(weeklyData.entries()).map(([weekKey, data], index) => ({\n          date: `Week ${index + 1}`,\n          value: Math.round((dataType === 'subscribers' ? data.subscribers : data.views) / data.count),\n          fullDate: weekKey,\n        }));\n      } else {\n        // Fallback to generated data\n        for (let i = 0; i <= 4; i++) {\n          const date = new Date(now.getFullYear(), now.getMonth(), now.getDate() - ((4 - i) * 7));\n          dataPoints.push({\n            date: `Week ${i + 1}`,\n            value: Math.round(currentValue * (0.75 + (i * 0.05))),\n            fullDate: date.toISOString().split('T')[0],\n          });\n        }\n      }\n      break;\n\n    case '3m':\n      // Try to use real 3-month data\n      const threeMonthData = dataCollectionService.getMonthlyData(3);\n      if (threeMonthData.length > 0) {\n        dataPoints = threeMonthData.map(stat => ({\n          date: stat.month,\n          value: stat.subscribers,\n          fullDate: stat.month,\n        }));\n      } else {\n        // Fallback to generated data\n        for (let i = 0; i <= 2; i++) {\n          const date = new Date(now.getFullYear(), now.getMonth() - (2 - i), 1);\n          dataPoints.push({\n            date: date.toLocaleDateString('en-US', { month: 'short' }),\n            value: Math.round(currentValue * (0.8 + (i * 0.1))),\n            fullDate: date.toISOString().split('T')[0],\n          });\n        }\n      }\n      break;\n\n    case '6m':\n      // Try to use real 6-month data\n      const sixMonthData = dataCollectionService.getMonthlyData(6);\n      if (sixMonthData.length > 0) {\n        dataPoints = sixMonthData.map(stat => ({\n          date: stat.month,\n          value: stat.subscribers,\n          fullDate: stat.month,\n        }));\n      } else {\n        // Fallback to generated data\n        for (let i = 0; i <= 5; i++) {\n          const date = new Date(now.getFullYear(), now.getMonth() - (5 - i), 1);\n          dataPoints.push({\n            date: date.toLocaleDateString('en-US', { month: 'short' }),\n            value: Math.round(currentValue * (0.7 + (i * 0.06))),\n            fullDate: date.toISOString().split('T')[0],\n          });\n        }\n      }\n      break;\n\n    case '1y':\n      // Try to use real 12-month data\n      const yearData = dataCollectionService.getMonthlyData(12);\n      if (yearData.length > 0) {\n        // Group by quarters\n        const quarterlyData = new Map<string, { subscribers: number; count: number }>();\n        yearData.forEach(stat => {\n          const month = new Date(stat.month);\n          const quarter = Math.floor(month.getMonth() / 3) + 1;\n          const quarterKey = `Q${quarter}`;\n          \n          if (!quarterlyData.has(quarterKey)) {\n            quarterlyData.set(quarterKey, { subscribers: 0, count: 0 });\n          }\n          quarterlyData.get(quarterKey)!.subscribers += stat.subscribers;\n          quarterlyData.get(quarterKey)!.count += 1;\n        });\n        \n        dataPoints = Array.from(quarterlyData.entries()).map(([quarter, data]) => ({\n          date: quarter,\n          value: Math.round(data.subscribers / data.count),\n          fullDate: quarter,\n        }));\n      } else {\n        // Fallback to generated data\n        for (let i = 0; i <= 3; i++) {\n          const date = new Date(now.getFullYear(), now.getMonth() - ((3 - i) * 3), 1);\n          dataPoints.push({\n            date: `Q${i + 1}`,\n            value: Math.round(currentValue * (0.6 + (i * 0.1))),\n            fullDate: date.toISOString().split('T')[0],\n          });\n        }\n      }\n      break;\n\n    default:\n      // Default to 6 months if no valid filter\n      for (let i = 0; i <= 5; i++) {\n        const date = new Date(now.getFullYear(), now.getMonth() - (5 - i), 1);\n        dataPoints.push({\n          date: date.toLocaleDateString('en-US', { month: 'short' }),\n          value: Math.round(currentValue * (0.7 + (i * 0.06))),\n          fullDate: date.toISOString().split('T')[0],\n        });\n      }\n      break;\n  }\n\n  return dataPoints;\n};\n\nexport const generateMultiPlatformData = (\n  filter: TimeFilter,\n  youtubeValue: number,\n  threadsValue: number = 48500,\n  instagramValue: number = 12450\n): MultiPlatformDataPoint[] => {\n  const now = new Date();\n  let dataPoints: MultiPlatformDataPoint[] = [];\n\n  switch (filter) {\n    case '7d':\n      // Last 7 days - start from 7 days ago and grow to current\n      for (let i = 0; i <= 6; i++) {\n        const date = new Date(now.getFullYear(), now.getMonth(), now.getDate() - (6 - i));\n        dataPoints.push({\n          date: date.toLocaleDateString('en-US', { month: 'short', day: 'numeric' }),\n          threads: Math.round(threadsValue * (0.85 + (i * 0.025))),\n          instagram: Math.round(instagramValue * (0.85 + (i * 0.025))),\n          youtube: Math.round(youtubeValue * (0.85 + (i * 0.025))),\n        });\n      }\n      break;\n\n    case '30d':\n      // Last 30 days (weekly averages) - start from 4 weeks ago and grow to current\n      for (let i = 0; i <= 4; i++) {\n        dataPoints.push({\n          date: `Week ${i + 1}`,\n          threads: Math.round(threadsValue * (0.75 + (i * 0.05))),\n          instagram: Math.round(instagramValue * (0.75 + (i * 0.05))),\n          youtube: Math.round(youtubeValue * (0.75 + (i * 0.05))),\n        });\n      }\n      break;\n\n    case '3m':\n      // Last 3 months - start from 3 months ago and grow to current\n      for (let i = 0; i <= 2; i++) {\n        const date = new Date(now.getFullYear(), now.getMonth() - (2 - i), 1);\n        dataPoints.push({\n          date: date.toLocaleDateString('en-US', { month: 'short' }),\n          threads: Math.round(threadsValue * (0.8 + (i * 0.1))),\n          instagram: Math.round(instagramValue * (0.8 + (i * 0.1))),\n          youtube: Math.round(youtubeValue * (0.8 + (i * 0.1))),\n        });\n      }\n      break;\n\n    case '6m':\n      // Last 6 months - start from 6 months ago and grow to current\n      for (let i = 0; i <= 5; i++) {\n        const date = new Date(now.getFullYear(), now.getMonth() - (5 - i), 1);\n        dataPoints.push({\n          date: date.toLocaleDateString('en-US', { month: 'short' }),\n          threads: Math.round(threadsValue * (0.7 + (i * 0.06))),\n          instagram: Math.round(instagramValue * (0.7 + (i * 0.06))),\n          youtube: Math.round(youtubeValue * (0.7 + (i * 0.06))),\n        });\n      }\n      break;\n\n    case '1y':\n      // Last 12 months (quarterly) - start from 1 year ago and grow to current\n      for (let i = 0; i <= 3; i++) {\n        dataPoints.push({\n          date: `Q${i + 1}`,\n          threads: Math.round(threadsValue * (0.6 + (i * 0.1))),\n          instagram: Math.round(instagramValue * (0.6 + (i * 0.1))),\n          youtube: Math.round(youtubeValue * (0.6 + (i * 0.1))),\n        });\n      }\n      break;\n\n    default:\n      // Default to 6 months if no valid filter\n      for (let i = 0; i <= 5; i++) {\n        const date = new Date(now.getFullYear(), now.getMonth() - (5 - i), 1);\n        dataPoints.push({\n          date: date.toLocaleDateString('en-US', { month: 'short' }),\n          threads: Math.round(threadsValue * (0.7 + (i * 0.06))),\n          instagram: Math.round(instagramValue * (0.7 + (i * 0.06))),\n          youtube: Math.round(youtubeValue * (0.7 + (i * 0.06))),\n        });\n      }\n      break;\n  }\n\n  return dataPoints;\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}