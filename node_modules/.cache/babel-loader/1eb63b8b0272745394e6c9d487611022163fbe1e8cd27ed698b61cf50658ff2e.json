{"ast":null,"code":"class YouTubeOAuthService {\n  constructor() {\n    this.config = null;\n    this.accessToken = null;\n    this.refreshToken = null;\n    this.loadConfig();\n    this.loadTokens();\n  }\n  loadConfig() {\n    const saved = localStorage.getItem('youtubeOAuthConfig');\n    if (saved) {\n      this.config = JSON.parse(saved);\n    }\n  }\n  loadTokens() {\n    this.accessToken = localStorage.getItem('youtubeOAuthAccessToken');\n    this.refreshToken = localStorage.getItem('youtubeOAuthRefreshToken');\n  }\n  saveConfig() {\n    if (this.config) {\n      localStorage.setItem('youtubeOAuthConfig', JSON.stringify(this.config));\n    }\n  }\n  saveTokens() {\n    if (this.accessToken) {\n      localStorage.setItem('youtubeOAuthAccessToken', this.accessToken);\n    }\n    if (this.refreshToken) {\n      localStorage.setItem('youtubeOAuthRefreshToken', this.refreshToken);\n    }\n  }\n  setConfig(config) {\n    this.config = config;\n    this.saveConfig();\n  }\n  getConfig() {\n    return this.config;\n  }\n  isAuthenticated() {\n    return !!this.accessToken;\n  }\n  getAuthUrl() {\n    if (!this.config) {\n      throw new Error('YouTube OAuth configuration not set');\n    }\n    const params = new URLSearchParams({\n      client_id: this.config.clientId,\n      redirect_uri: this.config.redirectUri,\n      response_type: 'code',\n      scope: 'https://www.googleapis.com/auth/youtube.readonly',\n      access_type: 'offline',\n      prompt: 'consent'\n    });\n    return `https://accounts.google.com/o/oauth2/v2/auth?${params.toString()}`;\n  }\n  async handleOAuthCallback(code) {\n    if (!this.config) {\n      throw new Error('YouTube OAuth configuration not set');\n    }\n    try {\n      const response = await fetch('https://oauth2.googleapis.com/token', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/x-www-form-urlencoded'\n        },\n        body: new URLSearchParams({\n          client_id: this.config.clientId,\n          client_secret: this.config.clientSecret,\n          code: code,\n          grant_type: 'authorization_code',\n          redirect_uri: this.config.redirectUri\n        })\n      });\n      if (!response.ok) {\n        const error = await response.text();\n        throw new Error(`OAuth token exchange failed: ${error}`);\n      }\n      const data = await response.json();\n      this.accessToken = data.access_token;\n      this.refreshToken = data.refresh_token;\n      this.saveTokens();\n      return true;\n    } catch (error) {\n      console.error('YouTube OAuth callback error:', error);\n      return false;\n    }\n  }\n  async refreshAccessToken() {\n    if (!this.config || !this.refreshToken) {\n      return false;\n    }\n    try {\n      const response = await fetch('https://oauth2.googleapis.com/token', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/x-www-form-urlencoded'\n        },\n        body: new URLSearchParams({\n          client_id: this.config.clientId,\n          client_secret: this.config.clientSecret,\n          refresh_token: this.refreshToken,\n          grant_type: 'refresh_token'\n        })\n      });\n      if (!response.ok) {\n        throw new Error('Failed to refresh access token');\n      }\n      const data = await response.json();\n      this.accessToken = data.access_token;\n      this.saveTokens();\n      return true;\n    } catch (error) {\n      console.error('YouTube token refresh error:', error);\n      return false;\n    }\n  }\n  async makeAuthenticatedRequest(url) {\n    if (!this.accessToken) {\n      throw new Error('No access token available');\n    }\n    const response = await fetch(url, {\n      headers: {\n        'Authorization': `Bearer ${this.accessToken}`\n      }\n    });\n    if (response.status === 401) {\n      // Token expired, try to refresh\n      const refreshed = await this.refreshAccessToken();\n      if (refreshed) {\n        // Retry the request with new token\n        return this.makeAuthenticatedRequest(url);\n      } else {\n        throw new Error('Authentication failed and token refresh failed');\n      }\n    }\n    if (!response.ok) {\n      throw new Error(`YouTube API request failed: ${response.statusText}`);\n    }\n    return response.json();\n  }\n  async getChannelStats() {\n    const url = 'https://www.googleapis.com/youtube/v3/channels?part=snippet,statistics&mine=true';\n    const data = await this.makeAuthenticatedRequest(url);\n    if (!data.items || data.items.length === 0) {\n      throw new Error('No channel found for authenticated user');\n    }\n    const channel = data.items[0];\n    return {\n      channelId: channel.id,\n      channelTitle: channel.snippet.title,\n      subscriberCount: parseInt(channel.statistics.subscriberCount || '0'),\n      videoCount: parseInt(channel.statistics.videoCount || '0'),\n      viewCount: parseInt(channel.statistics.viewCount || '0'),\n      description: channel.snippet.description,\n      customUrl: channel.snippet.customUrl || '',\n      publishedAt: channel.snippet.publishedAt,\n      thumbnails: channel.snippet.thumbnails\n    };\n  }\n  async getRecentVideos() {\n    const url = 'https://www.googleapis.com/youtube/v3/search?part=snippet&forMine=true&type=video&order=date&maxResults=10';\n    const data = await this.makeAuthenticatedRequest(url);\n    if (!data.items || data.items.length === 0) {\n      return [];\n    }\n\n    // Get video statistics for each video\n    const videoIds = data.items.map(item => item.id.videoId).join(',');\n    const statsUrl = `https://www.googleapis.com/youtube/v3/videos?part=statistics&id=${videoIds}`;\n    const statsData = await this.makeAuthenticatedRequest(statsUrl);\n    return data.items.map((item, index) => {\n      var _statsData$items$inde;\n      const stats = ((_statsData$items$inde = statsData.items[index]) === null || _statsData$items$inde === void 0 ? void 0 : _statsData$items$inde.statistics) || {};\n      return {\n        id: item.id.videoId,\n        title: item.snippet.title,\n        description: item.snippet.description,\n        publishedAt: item.snippet.publishedAt,\n        thumbnails: item.snippet.thumbnails,\n        statistics: {\n          viewCount: parseInt(stats.viewCount || '0'),\n          likeCount: parseInt(stats.likeCount || '0'),\n          commentCount: parseInt(stats.commentCount || '0')\n        }\n      };\n    });\n  }\n  async getAnalytics() {\n    try {\n      const [stats, recentVideos] = await Promise.all([this.getChannelStats(), this.getRecentVideos()]);\n\n      // Generate mock analytics data for now\n      // In a real implementation, you'd fetch historical data from YouTube Analytics API\n      const monthlySubscribers = this.generateMonthlyData(stats.subscriberCount, 12, 'subscribers');\n      const monthlyViews = this.generateMonthlyData(stats.viewCount, 12, 'views');\n      const monthlyEngagement = this.generateMonthlyData(recentVideos.reduce((sum, video) => sum + video.statistics.likeCount + video.statistics.commentCount, 0), 12, 'engagement');\n      return {\n        stats,\n        recentVideos,\n        monthlySubscribers,\n        monthlyViews,\n        monthlyEngagement\n      };\n    } catch (error) {\n      console.error('Error fetching YouTube analytics:', error);\n      throw error;\n    }\n  }\n  generateMonthlyData(currentValue, months, type) {\n    const data = [];\n    const now = new Date();\n    for (let i = months - 1; i >= 0; i--) {\n      const date = new Date(now.getFullYear(), now.getMonth() - i, 1);\n      const month = date.toLocaleDateString('en-US', {\n        month: 'short',\n        year: 'numeric'\n      });\n      // Generate realistic progression data\n      const factor = 0.8 + Math.random() * 0.4; // 0.8 to 1.2\n      const value = Math.floor(currentValue * factor * (i / months + 0.1));\n      data.push({\n        month,\n        [type]: value\n      });\n    }\n    return data;\n  }\n  logout() {\n    this.accessToken = null;\n    this.refreshToken = null;\n    localStorage.removeItem('youtubeOAuthAccessToken');\n    localStorage.removeItem('youtubeOAuthRefreshToken');\n  }\n}\nexport const youtubeOAuthService = new YouTubeOAuthService();","map":{"version":3,"names":["YouTubeOAuthService","constructor","config","accessToken","refreshToken","loadConfig","loadTokens","saved","localStorage","getItem","JSON","parse","saveConfig","setItem","stringify","saveTokens","setConfig","getConfig","isAuthenticated","getAuthUrl","Error","params","URLSearchParams","client_id","clientId","redirect_uri","redirectUri","response_type","scope","access_type","prompt","toString","handleOAuthCallback","code","response","fetch","method","headers","body","client_secret","clientSecret","grant_type","ok","error","text","data","json","access_token","refresh_token","console","refreshAccessToken","makeAuthenticatedRequest","url","status","refreshed","statusText","getChannelStats","items","length","channel","channelId","id","channelTitle","snippet","title","subscriberCount","parseInt","statistics","videoCount","viewCount","description","customUrl","publishedAt","thumbnails","getRecentVideos","videoIds","map","item","videoId","join","statsUrl","statsData","index","_statsData$items$inde","stats","likeCount","commentCount","getAnalytics","recentVideos","Promise","all","monthlySubscribers","generateMonthlyData","monthlyViews","monthlyEngagement","reduce","sum","video","currentValue","months","type","now","Date","i","date","getFullYear","getMonth","month","toLocaleDateString","year","factor","Math","random","value","floor","push","logout","removeItem","youtubeOAuthService"],"sources":["/Users/marcodamm/Desktop/Stats_SocialMedia/src/services/youtubeOAuthService.ts"],"sourcesContent":["export interface YouTubeOAuthConfig {\n  clientId: string;\n  clientSecret: string;\n  redirectUri: string;\n}\n\nexport interface YouTubeOAuthStats {\n  channelId: string;\n  channelTitle: string;\n  subscriberCount: number;\n  videoCount: number;\n  viewCount: number;\n  description: string;\n  customUrl: string;\n  publishedAt: string;\n  thumbnails: {\n    default: string;\n    medium: string;\n    high: string;\n  };\n}\n\nexport interface YouTubeOAuthVideo {\n  id: string;\n  title: string;\n  description: string;\n  publishedAt: string;\n  thumbnails: {\n    default: string;\n    medium: string;\n    high: string;\n  };\n  statistics: {\n    viewCount: number;\n    likeCount: number;\n    commentCount: number;\n  };\n}\n\nexport interface YouTubeOAuthAnalytics {\n  stats: YouTubeOAuthStats;\n  recentVideos: YouTubeOAuthVideo[];\n  monthlySubscribers: { month: string; subscribers: number }[];\n  monthlyViews: { month: string; views: number }[];\n  monthlyEngagement: { month: string; engagement: number }[];\n}\n\nclass YouTubeOAuthService {\n  private config: YouTubeOAuthConfig | null = null;\n  private accessToken: string | null = null;\n  private refreshToken: string | null = null;\n\n  constructor() {\n    this.loadConfig();\n    this.loadTokens();\n  }\n\n  private loadConfig(): void {\n    const saved = localStorage.getItem('youtubeOAuthConfig');\n    if (saved) {\n      this.config = JSON.parse(saved);\n    }\n  }\n\n  private loadTokens(): void {\n    this.accessToken = localStorage.getItem('youtubeOAuthAccessToken');\n    this.refreshToken = localStorage.getItem('youtubeOAuthRefreshToken');\n  }\n\n  private saveConfig(): void {\n    if (this.config) {\n      localStorage.setItem('youtubeOAuthConfig', JSON.stringify(this.config));\n    }\n  }\n\n  private saveTokens(): void {\n    if (this.accessToken) {\n      localStorage.setItem('youtubeOAuthAccessToken', this.accessToken);\n    }\n    if (this.refreshToken) {\n      localStorage.setItem('youtubeOAuthRefreshToken', this.refreshToken);\n    }\n  }\n\n  setConfig(config: YouTubeOAuthConfig): void {\n    this.config = config;\n    this.saveConfig();\n  }\n\n  getConfig(): YouTubeOAuthConfig | null {\n    return this.config;\n  }\n\n  isAuthenticated(): boolean {\n    return !!this.accessToken;\n  }\n\n  getAuthUrl(): string {\n    if (!this.config) {\n      throw new Error('YouTube OAuth configuration not set');\n    }\n\n    const params = new URLSearchParams({\n      client_id: this.config.clientId,\n      redirect_uri: this.config.redirectUri,\n      response_type: 'code',\n      scope: 'https://www.googleapis.com/auth/youtube.readonly',\n      access_type: 'offline',\n      prompt: 'consent'\n    });\n\n    return `https://accounts.google.com/o/oauth2/v2/auth?${params.toString()}`;\n  }\n\n  async handleOAuthCallback(code: string): Promise<boolean> {\n    if (!this.config) {\n      throw new Error('YouTube OAuth configuration not set');\n    }\n\n    try {\n      const response = await fetch('https://oauth2.googleapis.com/token', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/x-www-form-urlencoded',\n        },\n        body: new URLSearchParams({\n          client_id: this.config.clientId,\n          client_secret: this.config.clientSecret,\n          code: code,\n          grant_type: 'authorization_code',\n          redirect_uri: this.config.redirectUri,\n        }),\n      });\n\n      if (!response.ok) {\n        const error = await response.text();\n        throw new Error(`OAuth token exchange failed: ${error}`);\n      }\n\n      const data = await response.json();\n      this.accessToken = data.access_token;\n      this.refreshToken = data.refresh_token;\n      this.saveTokens();\n\n      return true;\n    } catch (error) {\n      console.error('YouTube OAuth callback error:', error);\n      return false;\n    }\n  }\n\n  async refreshAccessToken(): Promise<boolean> {\n    if (!this.config || !this.refreshToken) {\n      return false;\n    }\n\n    try {\n      const response = await fetch('https://oauth2.googleapis.com/token', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/x-www-form-urlencoded',\n        },\n        body: new URLSearchParams({\n          client_id: this.config.clientId,\n          client_secret: this.config.clientSecret,\n          refresh_token: this.refreshToken,\n          grant_type: 'refresh_token',\n        }),\n      });\n\n      if (!response.ok) {\n        throw new Error('Failed to refresh access token');\n      }\n\n      const data = await response.json();\n      this.accessToken = data.access_token;\n      this.saveTokens();\n\n      return true;\n    } catch (error) {\n      console.error('YouTube token refresh error:', error);\n      return false;\n    }\n  }\n\n  private async makeAuthenticatedRequest(url: string): Promise<any> {\n    if (!this.accessToken) {\n      throw new Error('No access token available');\n    }\n\n    const response = await fetch(url, {\n      headers: {\n        'Authorization': `Bearer ${this.accessToken}`,\n      },\n    });\n\n    if (response.status === 401) {\n      // Token expired, try to refresh\n      const refreshed = await this.refreshAccessToken();\n      if (refreshed) {\n        // Retry the request with new token\n        return this.makeAuthenticatedRequest(url);\n      } else {\n        throw new Error('Authentication failed and token refresh failed');\n      }\n    }\n\n    if (!response.ok) {\n      throw new Error(`YouTube API request failed: ${response.statusText}`);\n    }\n\n    return response.json();\n  }\n\n  async getChannelStats(): Promise<YouTubeOAuthStats> {\n    const url = 'https://www.googleapis.com/youtube/v3/channels?part=snippet,statistics&mine=true';\n    const data = await this.makeAuthenticatedRequest(url);\n    \n    if (!data.items || data.items.length === 0) {\n      throw new Error('No channel found for authenticated user');\n    }\n\n    const channel = data.items[0];\n    return {\n      channelId: channel.id,\n      channelTitle: channel.snippet.title,\n      subscriberCount: parseInt(channel.statistics.subscriberCount || '0'),\n      videoCount: parseInt(channel.statistics.videoCount || '0'),\n      viewCount: parseInt(channel.statistics.viewCount || '0'),\n      description: channel.snippet.description,\n      customUrl: channel.snippet.customUrl || '',\n      publishedAt: channel.snippet.publishedAt,\n      thumbnails: channel.snippet.thumbnails\n    };\n  }\n\n  async getRecentVideos(): Promise<YouTubeOAuthVideo[]> {\n    const url = 'https://www.googleapis.com/youtube/v3/search?part=snippet&forMine=true&type=video&order=date&maxResults=10';\n    const data = await this.makeAuthenticatedRequest(url);\n    \n    if (!data.items || data.items.length === 0) {\n      return [];\n    }\n\n    // Get video statistics for each video\n    const videoIds = data.items.map((item: any) => item.id.videoId).join(',');\n    const statsUrl = `https://www.googleapis.com/youtube/v3/videos?part=statistics&id=${videoIds}`;\n    const statsData = await this.makeAuthenticatedRequest(statsUrl);\n\n    return data.items.map((item: any, index: number) => {\n      const stats = statsData.items[index]?.statistics || {};\n      return {\n        id: item.id.videoId,\n        title: item.snippet.title,\n        description: item.snippet.description,\n        publishedAt: item.snippet.publishedAt,\n        thumbnails: item.snippet.thumbnails,\n        statistics: {\n          viewCount: parseInt(stats.viewCount || '0'),\n          likeCount: parseInt(stats.likeCount || '0'),\n          commentCount: parseInt(stats.commentCount || '0')\n        }\n      };\n    });\n  }\n\n  async getAnalytics(): Promise<YouTubeOAuthAnalytics> {\n    try {\n      const [stats, recentVideos] = await Promise.all([\n        this.getChannelStats(),\n        this.getRecentVideos()\n      ]);\n\n      // Generate mock analytics data for now\n      // In a real implementation, you'd fetch historical data from YouTube Analytics API\n      const monthlySubscribers = this.generateMonthlyData(stats.subscriberCount, 12, 'subscribers') as { month: string; subscribers: number }[];\n      const monthlyViews = this.generateMonthlyData(stats.viewCount, 12, 'views') as { month: string; views: number }[];\n      const monthlyEngagement = this.generateMonthlyData(\n        recentVideos.reduce((sum, video) => sum + video.statistics.likeCount + video.statistics.commentCount, 0),\n        12,\n        'engagement'\n      ) as { month: string; engagement: number }[];\n\n      return {\n        stats,\n        recentVideos,\n        monthlySubscribers,\n        monthlyViews,\n        monthlyEngagement\n      };\n    } catch (error) {\n      console.error('Error fetching YouTube analytics:', error);\n      throw error;\n    }\n  }\n\n  private generateMonthlyData(currentValue: number, months: number, type: 'subscribers' | 'views' | 'engagement'): { month: string; [key: string]: any }[] {\n    const data = [];\n    const now = new Date();\n    \n    for (let i = months - 1; i >= 0; i--) {\n      const date = new Date(now.getFullYear(), now.getMonth() - i, 1);\n      const month = date.toLocaleDateString('en-US', { month: 'short', year: 'numeric' });\n      // Generate realistic progression data\n      const factor = 0.8 + (Math.random() * 0.4); // 0.8 to 1.2\n      const value = Math.floor(currentValue * factor * (i / months + 0.1));\n      data.push({ month, [type]: value });\n    }\n    \n    return data;\n  }\n\n  logout(): void {\n    this.accessToken = null;\n    this.refreshToken = null;\n    localStorage.removeItem('youtubeOAuthAccessToken');\n    localStorage.removeItem('youtubeOAuthRefreshToken');\n  }\n}\n\nexport const youtubeOAuthService = new YouTubeOAuthService(); "],"mappings":"AA+CA,MAAMA,mBAAmB,CAAC;EAKxBC,WAAWA,CAAA,EAAG;IAAA,KAJNC,MAAM,GAA8B,IAAI;IAAA,KACxCC,WAAW,GAAkB,IAAI;IAAA,KACjCC,YAAY,GAAkB,IAAI;IAGxC,IAAI,CAACC,UAAU,CAAC,CAAC;IACjB,IAAI,CAACC,UAAU,CAAC,CAAC;EACnB;EAEQD,UAAUA,CAAA,EAAS;IACzB,MAAME,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,oBAAoB,CAAC;IACxD,IAAIF,KAAK,EAAE;MACT,IAAI,CAACL,MAAM,GAAGQ,IAAI,CAACC,KAAK,CAACJ,KAAK,CAAC;IACjC;EACF;EAEQD,UAAUA,CAAA,EAAS;IACzB,IAAI,CAACH,WAAW,GAAGK,YAAY,CAACC,OAAO,CAAC,yBAAyB,CAAC;IAClE,IAAI,CAACL,YAAY,GAAGI,YAAY,CAACC,OAAO,CAAC,0BAA0B,CAAC;EACtE;EAEQG,UAAUA,CAAA,EAAS;IACzB,IAAI,IAAI,CAACV,MAAM,EAAE;MACfM,YAAY,CAACK,OAAO,CAAC,oBAAoB,EAAEH,IAAI,CAACI,SAAS,CAAC,IAAI,CAACZ,MAAM,CAAC,CAAC;IACzE;EACF;EAEQa,UAAUA,CAAA,EAAS;IACzB,IAAI,IAAI,CAACZ,WAAW,EAAE;MACpBK,YAAY,CAACK,OAAO,CAAC,yBAAyB,EAAE,IAAI,CAACV,WAAW,CAAC;IACnE;IACA,IAAI,IAAI,CAACC,YAAY,EAAE;MACrBI,YAAY,CAACK,OAAO,CAAC,0BAA0B,EAAE,IAAI,CAACT,YAAY,CAAC;IACrE;EACF;EAEAY,SAASA,CAACd,MAA0B,EAAQ;IAC1C,IAAI,CAACA,MAAM,GAAGA,MAAM;IACpB,IAAI,CAACU,UAAU,CAAC,CAAC;EACnB;EAEAK,SAASA,CAAA,EAA8B;IACrC,OAAO,IAAI,CAACf,MAAM;EACpB;EAEAgB,eAAeA,CAAA,EAAY;IACzB,OAAO,CAAC,CAAC,IAAI,CAACf,WAAW;EAC3B;EAEAgB,UAAUA,CAAA,EAAW;IACnB,IAAI,CAAC,IAAI,CAACjB,MAAM,EAAE;MAChB,MAAM,IAAIkB,KAAK,CAAC,qCAAqC,CAAC;IACxD;IAEA,MAAMC,MAAM,GAAG,IAAIC,eAAe,CAAC;MACjCC,SAAS,EAAE,IAAI,CAACrB,MAAM,CAACsB,QAAQ;MAC/BC,YAAY,EAAE,IAAI,CAACvB,MAAM,CAACwB,WAAW;MACrCC,aAAa,EAAE,MAAM;MACrBC,KAAK,EAAE,kDAAkD;MACzDC,WAAW,EAAE,SAAS;MACtBC,MAAM,EAAE;IACV,CAAC,CAAC;IAEF,OAAO,gDAAgDT,MAAM,CAACU,QAAQ,CAAC,CAAC,EAAE;EAC5E;EAEA,MAAMC,mBAAmBA,CAACC,IAAY,EAAoB;IACxD,IAAI,CAAC,IAAI,CAAC/B,MAAM,EAAE;MAChB,MAAM,IAAIkB,KAAK,CAAC,qCAAqC,CAAC;IACxD;IAEA,IAAI;MACF,MAAMc,QAAQ,GAAG,MAAMC,KAAK,CAAC,qCAAqC,EAAE;QAClEC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDC,IAAI,EAAE,IAAIhB,eAAe,CAAC;UACxBC,SAAS,EAAE,IAAI,CAACrB,MAAM,CAACsB,QAAQ;UAC/Be,aAAa,EAAE,IAAI,CAACrC,MAAM,CAACsC,YAAY;UACvCP,IAAI,EAAEA,IAAI;UACVQ,UAAU,EAAE,oBAAoB;UAChChB,YAAY,EAAE,IAAI,CAACvB,MAAM,CAACwB;QAC5B,CAAC;MACH,CAAC,CAAC;MAEF,IAAI,CAACQ,QAAQ,CAACQ,EAAE,EAAE;QAChB,MAAMC,KAAK,GAAG,MAAMT,QAAQ,CAACU,IAAI,CAAC,CAAC;QACnC,MAAM,IAAIxB,KAAK,CAAC,gCAAgCuB,KAAK,EAAE,CAAC;MAC1D;MAEA,MAAME,IAAI,GAAG,MAAMX,QAAQ,CAACY,IAAI,CAAC,CAAC;MAClC,IAAI,CAAC3C,WAAW,GAAG0C,IAAI,CAACE,YAAY;MACpC,IAAI,CAAC3C,YAAY,GAAGyC,IAAI,CAACG,aAAa;MACtC,IAAI,CAACjC,UAAU,CAAC,CAAC;MAEjB,OAAO,IAAI;IACb,CAAC,CAAC,OAAO4B,KAAK,EAAE;MACdM,OAAO,CAACN,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAAC;MACrD,OAAO,KAAK;IACd;EACF;EAEA,MAAMO,kBAAkBA,CAAA,EAAqB;IAC3C,IAAI,CAAC,IAAI,CAAChD,MAAM,IAAI,CAAC,IAAI,CAACE,YAAY,EAAE;MACtC,OAAO,KAAK;IACd;IAEA,IAAI;MACF,MAAM8B,QAAQ,GAAG,MAAMC,KAAK,CAAC,qCAAqC,EAAE;QAClEC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDC,IAAI,EAAE,IAAIhB,eAAe,CAAC;UACxBC,SAAS,EAAE,IAAI,CAACrB,MAAM,CAACsB,QAAQ;UAC/Be,aAAa,EAAE,IAAI,CAACrC,MAAM,CAACsC,YAAY;UACvCQ,aAAa,EAAE,IAAI,CAAC5C,YAAY;UAChCqC,UAAU,EAAE;QACd,CAAC;MACH,CAAC,CAAC;MAEF,IAAI,CAACP,QAAQ,CAACQ,EAAE,EAAE;QAChB,MAAM,IAAItB,KAAK,CAAC,gCAAgC,CAAC;MACnD;MAEA,MAAMyB,IAAI,GAAG,MAAMX,QAAQ,CAACY,IAAI,CAAC,CAAC;MAClC,IAAI,CAAC3C,WAAW,GAAG0C,IAAI,CAACE,YAAY;MACpC,IAAI,CAAChC,UAAU,CAAC,CAAC;MAEjB,OAAO,IAAI;IACb,CAAC,CAAC,OAAO4B,KAAK,EAAE;MACdM,OAAO,CAACN,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;MACpD,OAAO,KAAK;IACd;EACF;EAEA,MAAcQ,wBAAwBA,CAACC,GAAW,EAAgB;IAChE,IAAI,CAAC,IAAI,CAACjD,WAAW,EAAE;MACrB,MAAM,IAAIiB,KAAK,CAAC,2BAA2B,CAAC;IAC9C;IAEA,MAAMc,QAAQ,GAAG,MAAMC,KAAK,CAACiB,GAAG,EAAE;MAChCf,OAAO,EAAE;QACP,eAAe,EAAE,UAAU,IAAI,CAAClC,WAAW;MAC7C;IACF,CAAC,CAAC;IAEF,IAAI+B,QAAQ,CAACmB,MAAM,KAAK,GAAG,EAAE;MAC3B;MACA,MAAMC,SAAS,GAAG,MAAM,IAAI,CAACJ,kBAAkB,CAAC,CAAC;MACjD,IAAII,SAAS,EAAE;QACb;QACA,OAAO,IAAI,CAACH,wBAAwB,CAACC,GAAG,CAAC;MAC3C,CAAC,MAAM;QACL,MAAM,IAAIhC,KAAK,CAAC,gDAAgD,CAAC;MACnE;IACF;IAEA,IAAI,CAACc,QAAQ,CAACQ,EAAE,EAAE;MAChB,MAAM,IAAItB,KAAK,CAAC,+BAA+Bc,QAAQ,CAACqB,UAAU,EAAE,CAAC;IACvE;IAEA,OAAOrB,QAAQ,CAACY,IAAI,CAAC,CAAC;EACxB;EAEA,MAAMU,eAAeA,CAAA,EAA+B;IAClD,MAAMJ,GAAG,GAAG,kFAAkF;IAC9F,MAAMP,IAAI,GAAG,MAAM,IAAI,CAACM,wBAAwB,CAACC,GAAG,CAAC;IAErD,IAAI,CAACP,IAAI,CAACY,KAAK,IAAIZ,IAAI,CAACY,KAAK,CAACC,MAAM,KAAK,CAAC,EAAE;MAC1C,MAAM,IAAItC,KAAK,CAAC,yCAAyC,CAAC;IAC5D;IAEA,MAAMuC,OAAO,GAAGd,IAAI,CAACY,KAAK,CAAC,CAAC,CAAC;IAC7B,OAAO;MACLG,SAAS,EAAED,OAAO,CAACE,EAAE;MACrBC,YAAY,EAAEH,OAAO,CAACI,OAAO,CAACC,KAAK;MACnCC,eAAe,EAAEC,QAAQ,CAACP,OAAO,CAACQ,UAAU,CAACF,eAAe,IAAI,GAAG,CAAC;MACpEG,UAAU,EAAEF,QAAQ,CAACP,OAAO,CAACQ,UAAU,CAACC,UAAU,IAAI,GAAG,CAAC;MAC1DC,SAAS,EAAEH,QAAQ,CAACP,OAAO,CAACQ,UAAU,CAACE,SAAS,IAAI,GAAG,CAAC;MACxDC,WAAW,EAAEX,OAAO,CAACI,OAAO,CAACO,WAAW;MACxCC,SAAS,EAAEZ,OAAO,CAACI,OAAO,CAACQ,SAAS,IAAI,EAAE;MAC1CC,WAAW,EAAEb,OAAO,CAACI,OAAO,CAACS,WAAW;MACxCC,UAAU,EAAEd,OAAO,CAACI,OAAO,CAACU;IAC9B,CAAC;EACH;EAEA,MAAMC,eAAeA,CAAA,EAAiC;IACpD,MAAMtB,GAAG,GAAG,4GAA4G;IACxH,MAAMP,IAAI,GAAG,MAAM,IAAI,CAACM,wBAAwB,CAACC,GAAG,CAAC;IAErD,IAAI,CAACP,IAAI,CAACY,KAAK,IAAIZ,IAAI,CAACY,KAAK,CAACC,MAAM,KAAK,CAAC,EAAE;MAC1C,OAAO,EAAE;IACX;;IAEA;IACA,MAAMiB,QAAQ,GAAG9B,IAAI,CAACY,KAAK,CAACmB,GAAG,CAAEC,IAAS,IAAKA,IAAI,CAAChB,EAAE,CAACiB,OAAO,CAAC,CAACC,IAAI,CAAC,GAAG,CAAC;IACzE,MAAMC,QAAQ,GAAG,mEAAmEL,QAAQ,EAAE;IAC9F,MAAMM,SAAS,GAAG,MAAM,IAAI,CAAC9B,wBAAwB,CAAC6B,QAAQ,CAAC;IAE/D,OAAOnC,IAAI,CAACY,KAAK,CAACmB,GAAG,CAAC,CAACC,IAAS,EAAEK,KAAa,KAAK;MAAA,IAAAC,qBAAA;MAClD,MAAMC,KAAK,GAAG,EAAAD,qBAAA,GAAAF,SAAS,CAACxB,KAAK,CAACyB,KAAK,CAAC,cAAAC,qBAAA,uBAAtBA,qBAAA,CAAwBhB,UAAU,KAAI,CAAC,CAAC;MACtD,OAAO;QACLN,EAAE,EAAEgB,IAAI,CAAChB,EAAE,CAACiB,OAAO;QACnBd,KAAK,EAAEa,IAAI,CAACd,OAAO,CAACC,KAAK;QACzBM,WAAW,EAAEO,IAAI,CAACd,OAAO,CAACO,WAAW;QACrCE,WAAW,EAAEK,IAAI,CAACd,OAAO,CAACS,WAAW;QACrCC,UAAU,EAAEI,IAAI,CAACd,OAAO,CAACU,UAAU;QACnCN,UAAU,EAAE;UACVE,SAAS,EAAEH,QAAQ,CAACkB,KAAK,CAACf,SAAS,IAAI,GAAG,CAAC;UAC3CgB,SAAS,EAAEnB,QAAQ,CAACkB,KAAK,CAACC,SAAS,IAAI,GAAG,CAAC;UAC3CC,YAAY,EAAEpB,QAAQ,CAACkB,KAAK,CAACE,YAAY,IAAI,GAAG;QAClD;MACF,CAAC;IACH,CAAC,CAAC;EACJ;EAEA,MAAMC,YAAYA,CAAA,EAAmC;IACnD,IAAI;MACF,MAAM,CAACH,KAAK,EAAEI,YAAY,CAAC,GAAG,MAAMC,OAAO,CAACC,GAAG,CAAC,CAC9C,IAAI,CAAClC,eAAe,CAAC,CAAC,EACtB,IAAI,CAACkB,eAAe,CAAC,CAAC,CACvB,CAAC;;MAEF;MACA;MACA,MAAMiB,kBAAkB,GAAG,IAAI,CAACC,mBAAmB,CAACR,KAAK,CAACnB,eAAe,EAAE,EAAE,EAAE,aAAa,CAA6C;MACzI,MAAM4B,YAAY,GAAG,IAAI,CAACD,mBAAmB,CAACR,KAAK,CAACf,SAAS,EAAE,EAAE,EAAE,OAAO,CAAuC;MACjH,MAAMyB,iBAAiB,GAAG,IAAI,CAACF,mBAAmB,CAChDJ,YAAY,CAACO,MAAM,CAAC,CAACC,GAAG,EAAEC,KAAK,KAAKD,GAAG,GAAGC,KAAK,CAAC9B,UAAU,CAACkB,SAAS,GAAGY,KAAK,CAAC9B,UAAU,CAACmB,YAAY,EAAE,CAAC,CAAC,EACxG,EAAE,EACF,YACF,CAA4C;MAE5C,OAAO;QACLF,KAAK;QACLI,YAAY;QACZG,kBAAkB;QAClBE,YAAY;QACZC;MACF,CAAC;IACH,CAAC,CAAC,OAAOnD,KAAK,EAAE;MACdM,OAAO,CAACN,KAAK,CAAC,mCAAmC,EAAEA,KAAK,CAAC;MACzD,MAAMA,KAAK;IACb;EACF;EAEQiD,mBAAmBA,CAACM,YAAoB,EAAEC,MAAc,EAAEC,IAA4C,EAA2C;IACvJ,MAAMvD,IAAI,GAAG,EAAE;IACf,MAAMwD,GAAG,GAAG,IAAIC,IAAI,CAAC,CAAC;IAEtB,KAAK,IAAIC,CAAC,GAAGJ,MAAM,GAAG,CAAC,EAAEI,CAAC,IAAI,CAAC,EAAEA,CAAC,EAAE,EAAE;MACpC,MAAMC,IAAI,GAAG,IAAIF,IAAI,CAACD,GAAG,CAACI,WAAW,CAAC,CAAC,EAAEJ,GAAG,CAACK,QAAQ,CAAC,CAAC,GAAGH,CAAC,EAAE,CAAC,CAAC;MAC/D,MAAMI,KAAK,GAAGH,IAAI,CAACI,kBAAkB,CAAC,OAAO,EAAE;QAAED,KAAK,EAAE,OAAO;QAAEE,IAAI,EAAE;MAAU,CAAC,CAAC;MACnF;MACA,MAAMC,MAAM,GAAG,GAAG,GAAIC,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,GAAI,CAAC,CAAC;MAC5C,MAAMC,KAAK,GAAGF,IAAI,CAACG,KAAK,CAAChB,YAAY,GAAGY,MAAM,IAAIP,CAAC,GAAGJ,MAAM,GAAG,GAAG,CAAC,CAAC;MACpEtD,IAAI,CAACsE,IAAI,CAAC;QAAER,KAAK;QAAE,CAACP,IAAI,GAAGa;MAAM,CAAC,CAAC;IACrC;IAEA,OAAOpE,IAAI;EACb;EAEAuE,MAAMA,CAAA,EAAS;IACb,IAAI,CAACjH,WAAW,GAAG,IAAI;IACvB,IAAI,CAACC,YAAY,GAAG,IAAI;IACxBI,YAAY,CAAC6G,UAAU,CAAC,yBAAyB,CAAC;IAClD7G,YAAY,CAAC6G,UAAU,CAAC,0BAA0B,CAAC;EACrD;AACF;AAEA,OAAO,MAAMC,mBAAmB,GAAG,IAAItH,mBAAmB,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}