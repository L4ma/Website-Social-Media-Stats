{"ast":null,"code":"import{buildYouTubeUrl,YOUTUBE_ENDPOINTS}from'../config/youtube';class YouTubeService{constructor(){this.config=void 0;this.lastApiCall=0;this.apiCallCount=0;this.MAX_DAILY_CALLS=4;// Maximum 4 calls per day (very conservative)\nthis.MIN_CALL_INTERVAL=21600000;// 6 hours between calls (4 per day max)\nthis.cachedData={lastCached:0};// Load saved configuration from localStorage\nconst savedConfig=localStorage.getItem('youtubeConfig');console.log('Loading YouTube config from localStorage:',savedConfig);if(savedConfig){const parsed=JSON.parse(savedConfig);this.config={channelId:parsed.channelId||'',apiKey:parsed.apiKey||'',channelName:parsed.channelName||'',channelUrl:parsed.channelUrl||''};console.log('Loaded config:',this.config);}else{this.config={channelId:'',apiKey:'',channelName:'',channelUrl:''};console.log('No saved config, using defaults');}// Load API call tracking from localStorage\nthis.loadApiCallTracking();// Load cached data from localStorage\nthis.loadCachedData();}loadApiCallTracking(){const today=new Date().toDateString();const savedTracking=localStorage.getItem('youtubeApiTracking');if(savedTracking){const tracking=JSON.parse(savedTracking);if(tracking.date===today){this.apiCallCount=tracking.count||0;this.lastApiCall=tracking.lastCall||0;}else{// Reset for new day\nthis.apiCallCount=0;this.lastApiCall=0;}}}saveApiCallTracking(){const tracking={date:new Date().toDateString(),count:this.apiCallCount,lastCall:this.lastApiCall};localStorage.setItem('youtubeApiTracking',JSON.stringify(tracking));}loadCachedData(){const savedCachedData=localStorage.getItem('youtubeCachedData');if(savedCachedData){this.cachedData=JSON.parse(savedCachedData);console.log('Loaded cached data:',this.cachedData);}else{console.log('No cached data found in localStorage');}}saveCachedData(){localStorage.setItem('youtubeCachedData',JSON.stringify(this.cachedData));}canMakeApiCall(){const now=Date.now();// Check if we've exceeded daily limit\nif(this.apiCallCount>=this.MAX_DAILY_CALLS){console.log('Daily API call limit reached');return false;}// Check if enough time has passed since last call\nif(now-this.lastApiCall<this.MIN_CALL_INTERVAL){console.log('API call rate limit: waiting for cooldown');return false;}return true;}// Check if we've actually hit the YouTube API quota (403 errors)\nasync checkActualApiQuota(){if(!this.config.apiKey||!this.config.channelId){return true;// No config means no quota check needed\n}// If we have cached data from today, assume API is working\nconst today=new Date().toDateString();const cachedDate=new Date(this.cachedData.lastCached).toDateString();if(this.cachedData.channelStats&&cachedDate===today){console.log('Using cached data from today, assuming API is available');return true;}// Only check actual quota if we haven't made a call recently\nconst timeSinceLastCall=Date.now()-this.lastApiCall;if(timeSinceLastCall<300000){// 5 minutes\nconsole.log('Recent API call made, skipping quota check');return true;}try{const url=buildYouTubeUrl(YOUTUBE_ENDPOINTS.channel,{part:'statistics,snippet',id:this.config.channelId},this.config.apiKey);const response=await fetch(url);console.log('Quota check response status:',response.status);if(response.status===403){console.log('YouTube API quota actually exceeded');return false;// Quota exceeded\n}return true;// API is available\n}catch(error){console.log('Error checking API quota:',error);return false;// Assume quota exceeded on error\n}}recordApiCall(){this.apiCallCount++;this.lastApiCall=Date.now();this.saveApiCallTracking();console.log(`API call recorded. Daily count: ${this.apiCallCount}/${this.MAX_DAILY_CALLS}`);}updateConfig(newConfig){this.config=newConfig;localStorage.setItem('youtubeConfig',JSON.stringify(newConfig));}getConfig(){return this.config;}// Debug method to check localStorage\ndebugCachedData(){const savedCachedData=localStorage.getItem('youtubeCachedData');const savedConfig=localStorage.getItem('youtubeConfig');const savedTracking=localStorage.getItem('youtubeApiTracking');console.log('=== DEBUG CACHED DATA ===');console.log('youtubeCachedData:',savedCachedData);console.log('youtubeConfig:',savedConfig);console.log('youtubeApiTracking:',savedTracking);console.log('Current cachedData object:',this.cachedData);console.log('========================');return{cachedData:savedCachedData?JSON.parse(savedCachedData):null,config:savedConfig?JSON.parse(savedConfig):null,tracking:savedTracking?JSON.parse(savedTracking):null,currentCachedData:this.cachedData};}// Method to manually cache demo data as real data (for testing)\ncacheDemoDataAsReal(){const demoChannelStats={subscriberCount:12400,videoCount:89,viewCount:1800000,channelName:this.config.channelName||'Maggo',channelUrl:this.config.channelUrl||'https://www.youtube.com/@maggo',channelId:this.config.channelId||'UCZggs3Q7sC5QQZGeQYJd5pA'};const demoVideos=[{id:'demo-video-1',title:'Sample Video Title 1',publishedAt:'2024-01-15T10:00:00Z',viewCount:15000,likeCount:1200,commentCount:89,thumbnail:'https://via.placeholder.com/320x180',duration:'PT10M30S'},{id:'demo-video-2',title:'Sample Video Title 2',publishedAt:'2024-01-10T14:30:00Z',viewCount:22000,likeCount:1800,commentCount:156,thumbnail:'https://via.placeholder.com/320x180',duration:'PT15M45S'}];this.cachedData.channelStats=demoChannelStats;this.cachedData.recentVideos=demoVideos;this.cachedData.lastCached=Date.now();this.saveCachedData();console.log('Manually cached demo data as real data:',this.cachedData);return this.cachedData;}async getApiCallStatus(){// Check if we have valid config\nconst hasValidConfig=this.config.apiKey&&this.config.channelId;// If no valid config, show as unlimited since we're using demo data\nif(!hasValidConfig){return{dailyCalls:0,maxCalls:this.MAX_DAILY_CALLS,remainingCalls:this.MAX_DAILY_CALLS,lastCall:this.lastApiCall,canMakeCall:true,usingDemoData:true,reason:'No API configuration',showCallCount:false,actualQuotaExceeded:false};}// Check if we're actually hitting quota limits\nconst isQuotaExceeded=this.apiCallCount>=this.MAX_DAILY_CALLS;const isRateLimited=Date.now()-this.lastApiCall<this.MIN_CALL_INTERVAL;const hasCachedData=this.cachedData.channelStats&&this.cachedData.recentVideos;// Check actual YouTube API quota status\nconst actualQuotaAvailable=await this.checkActualApiQuota();const actualQuotaExceeded=!actualQuotaAvailable;// Calculate time until next available call\nconst timeUntilNextCall=this.lastApiCall+this.MIN_CALL_INTERVAL-Date.now();const minutesUntilNext=Math.ceil(timeUntilNextCall/60000);// Determine the actual status\nlet canMakeCall=true;let showCallCount=true;if(actualQuotaExceeded){canMakeCall=false;showCallCount=false;}else if(isQuotaExceeded){canMakeCall=false;showCallCount=false;}else if(isRateLimited){canMakeCall=false;showCallCount=false;}return{dailyCalls:this.apiCallCount,maxCalls:this.MAX_DAILY_CALLS,remainingCalls:Math.max(0,this.MAX_DAILY_CALLS-this.apiCallCount),lastCall:this.lastApiCall,canMakeCall,usingCachedData:!canMakeCall&&hasCachedData,usingDemoData:!canMakeCall&&!hasCachedData,reason:isQuotaExceeded?'Daily quota exceeded - wait 24 hours (4 calls max)':isRateLimited?`Rate limited - wait ${minutesUntilNext} minutes (6h cooldown)`:'Ready',showCallCount,timeUntilNext:timeUntilNextCall,actualQuotaExceeded};}async fetchFromAPI(url){console.log('Making API call to:',url);const response=await fetch(url);console.log('API response status:',response.status);if(!response.ok){const errorText=await response.text();console.error('API Error response:',errorText);if(response.status===403){throw new Error('API quota exceeded or invalid API key');}else if(response.status===400){throw new Error('Invalid request - check channel ID');}else{throw new Error(`HTTP error! status: ${response.status}`);}}const data=await response.json();console.log('API response data:',data);return data;}async getChannelStats(){console.log('getChannelStats called with config:',this.config);console.log('Current cached data:',this.cachedData);// If no API key or channel ID, return mock data\nif(!this.config.apiKey||!this.config.channelId){console.log('No API key or channel ID, returning mock data');return{subscriberCount:12400,videoCount:89,viewCount:1800000,channelName:this.config.channelName||'Demo Channel',channelUrl:this.config.channelUrl||'https://www.youtube.com/@demo',channelId:this.config.channelId||'demo-channel-id'};}// Check if we have cached data from today first\nconst today=new Date().toDateString();const cachedDate=this.cachedData.lastCached?new Date(this.cachedData.lastCached).toDateString():null;console.log('Today:',today,'Cached date:',cachedDate);if(this.cachedData.channelStats&&cachedDate===today){console.log('Returning cached channel stats from today');return this.cachedData.channelStats;}// Check if we can make API call\nif(!this.canMakeApiCall()){console.log('API call limit reached, checking cached data');// Return cached data if available (even from previous days)\nif(this.cachedData.channelStats){console.log('Returning cached channel stats from previous days');return this.cachedData.channelStats;}// Fall back to mock data if no cache\nconsole.log('No cached data, returning mock data');return{subscriberCount:12400,videoCount:89,viewCount:1800000,channelName:this.config.channelName||'Demo Channel',channelUrl:this.config.channelUrl||'https://www.youtube.com/@demo',channelId:this.config.channelId||'demo-channel-id'};}// Try to make API call and cache the result\ntry{const url=buildYouTubeUrl(YOUTUBE_ENDPOINTS.channel,{part:'statistics,snippet',id:this.config.channelId},this.config.apiKey);const data=await this.fetchFromAPI(url);this.recordApiCall();if(data.items&&data.items.length>0){const channel=data.items[0];const channelStats={subscriberCount:parseInt(channel.statistics.subscriberCount||'0'),videoCount:parseInt(channel.statistics.videoCount||'0'),viewCount:parseInt(channel.statistics.viewCount||'0'),channelName:channel.snippet.title,channelUrl:`https://www.youtube.com/channel/${channel.id}`,channelId:channel.id};// Cache the successful API response\nthis.cachedData.channelStats=channelStats;this.cachedData.lastCached=Date.now();this.saveCachedData();console.log('Successfully cached channel stats:',channelStats);return channelStats;}throw new Error('Channel not found');}catch(error){console.error('Error in getChannelStats:',error);// If we have any cached data, return it even if it's old\nif(this.cachedData.channelStats){console.log('API failed, returning cached data');return this.cachedData.channelStats;}// Return mock data if API fails and no cache exists\nconsole.log('API failed and no cache, returning mock data');return{subscriberCount:12400,videoCount:89,viewCount:1800000,channelName:this.config.channelName||'Demo Channel',channelUrl:this.config.channelUrl||'https://www.youtube.com/@demo',channelId:this.config.channelId||'demo-channel-id'};}}async getRecentVideos(){let limit=arguments.length>0&&arguments[0]!==undefined?arguments[0]:10;// If no API key or channel ID, return mock data\nif(!this.config.apiKey||!this.config.channelId){return[{id:'mock-video-1',title:'Sample Video Title 1',publishedAt:'2024-01-15T10:00:00Z',viewCount:15000,likeCount:1200,commentCount:89,thumbnail:'https://via.placeholder.com/320x180',duration:'PT10M30S'},{id:'mock-video-2',title:'Sample Video Title 2',publishedAt:'2024-01-10T14:30:00Z',viewCount:22000,likeCount:1800,commentCount:156,thumbnail:'https://via.placeholder.com/320x180',duration:'PT15M45S'}];}// Check if we have cached data from today first\nconst today=new Date().toDateString();const cachedDate=new Date(this.cachedData.lastCached).toDateString();if(this.cachedData.recentVideos&&cachedDate===today){console.log('Returning cached videos from today');return this.cachedData.recentVideos;}// Check if we can make API call\nif(!this.canMakeApiCall()){console.log('API call limit reached, checking cached videos');// Return cached data if available (even from previous days)\nif(this.cachedData.recentVideos){console.log('Returning cached videos');return this.cachedData.recentVideos;}// Fall back to mock data if no cache\nconsole.log('No cached videos, returning mock data');return[{id:'mock-video-1',title:'Sample Video Title 1',publishedAt:'2024-01-15T10:00:00Z',viewCount:15000,likeCount:1200,commentCount:89,thumbnail:'https://via.placeholder.com/320x180',duration:'PT10M30S'},{id:'mock-video-2',title:'Sample Video Title 2',publishedAt:'2024-01-10T14:30:00Z',viewCount:22000,likeCount:1800,commentCount:156,thumbnail:'https://via.placeholder.com/320x180',duration:'PT15M45S'}];}try{// Make real API call\nconst url=buildYouTubeUrl(YOUTUBE_ENDPOINTS.videos,{part:'snippet',channelId:this.config.channelId,order:'date',maxResults:limit.toString(),type:'video'},this.config.apiKey);const data=await this.fetchFromAPI(url);this.recordApiCall();if(data.items){const videoIds=data.items.map(item=>item.id.videoId).join(',');// Check if we can make another API call for video stats\nif(!this.canMakeApiCall()){console.log('API call limit reached, returning videos without detailed stats');return data.items.map(item=>({id:item.id.videoId,title:item.snippet.title,publishedAt:item.snippet.publishedAt,viewCount:0,likeCount:0,commentCount:0,thumbnail:item.snippet.thumbnails.medium.url,duration:'PT0S'}));}// Get detailed video statistics\nconst statsUrl=buildYouTubeUrl(YOUTUBE_ENDPOINTS.videoStats,{part:'statistics,contentDetails',id:videoIds},this.config.apiKey);const statsData=await this.fetchFromAPI(statsUrl);this.recordApiCall();const statsMap=new Map();if(statsData.items){statsData.items.forEach(item=>{statsMap.set(item.id,{viewCount:parseInt(item.statistics.viewCount||'0'),likeCount:parseInt(item.statistics.likeCount||'0'),commentCount:parseInt(item.statistics.commentCount||'0'),duration:item.contentDetails.duration});});}const videos=data.items.map(item=>{const stats=statsMap.get(item.id.videoId)||{viewCount:0,likeCount:0,commentCount:0,duration:'PT0S'};return{id:item.id.videoId,title:item.snippet.title,publishedAt:item.snippet.publishedAt,viewCount:stats.viewCount,likeCount:stats.likeCount,commentCount:stats.commentCount,thumbnail:item.snippet.thumbnails.medium.url,duration:stats.duration};});// Cache the successful API response\nthis.cachedData.recentVideos=videos;this.cachedData.lastCached=Date.now();this.saveCachedData();return videos;}return[];}catch(error){console.error('Error in getRecentVideos:',error);// Return mock data if API fails\nreturn[{id:'mock-video-1',title:'Sample Video Title 1',publishedAt:'2024-01-15T10:00:00Z',viewCount:15000,likeCount:1200,commentCount:89,thumbnail:'https://via.placeholder.com/320x180',duration:'PT10M30S'},{id:'mock-video-2',title:'Sample Video Title 2',publishedAt:'2024-01-10T14:30:00Z',viewCount:22000,likeCount:1800,commentCount:156,thumbnail:'https://via.placeholder.com/320x180',duration:'PT15M45S'}];}}async getAnalytics(){const[channelStats,recentVideos]=await Promise.all([this.getChannelStats(),this.getRecentVideos()]);// Generate monthly data based on actual channel stats\nconst currentSubscribers=channelStats.subscriberCount;const currentViews=channelStats.viewCount;// Get current date and generate last 6 months\nconst now=new Date();const months=[];for(let i=5;i>=0;i--){const date=new Date(now.getFullYear(),now.getMonth()-i,1);months.push(date.toLocaleDateString('en-US',{month:'short'}));}// Calculate progression factors for realistic growth\nconst progressionFactors=[0.7,0.8,0.85,0.9,0.95,1.0];// Calculate monthly progression based on current stats\nconst monthlyViews=months.map((month,index)=>({month,views:Math.round(currentViews*progressionFactors[index])}));const monthlySubscribers=months.map((month,index)=>({month,subscribers:Math.round(currentSubscribers*progressionFactors[index])}));return{channelStats,recentVideos,monthlyViews,monthlySubscribers};}}export const youtubeService=new YouTubeService();","map":{"version":3,"names":["buildYouTubeUrl","YOUTUBE_ENDPOINTS","YouTubeService","constructor","config","lastApiCall","apiCallCount","MAX_DAILY_CALLS","MIN_CALL_INTERVAL","cachedData","lastCached","savedConfig","localStorage","getItem","console","log","parsed","JSON","parse","channelId","apiKey","channelName","channelUrl","loadApiCallTracking","loadCachedData","today","Date","toDateString","savedTracking","tracking","date","count","lastCall","saveApiCallTracking","setItem","stringify","savedCachedData","saveCachedData","canMakeApiCall","now","checkActualApiQuota","cachedDate","channelStats","timeSinceLastCall","url","channel","part","id","response","fetch","status","error","recordApiCall","updateConfig","newConfig","getConfig","debugCachedData","currentCachedData","cacheDemoDataAsReal","demoChannelStats","subscriberCount","videoCount","viewCount","demoVideos","title","publishedAt","likeCount","commentCount","thumbnail","duration","recentVideos","getApiCallStatus","hasValidConfig","dailyCalls","maxCalls","remainingCalls","canMakeCall","usingDemoData","reason","showCallCount","actualQuotaExceeded","isQuotaExceeded","isRateLimited","hasCachedData","actualQuotaAvailable","timeUntilNextCall","minutesUntilNext","Math","ceil","max","usingCachedData","timeUntilNext","fetchFromAPI","ok","errorText","text","Error","data","json","getChannelStats","items","length","parseInt","statistics","snippet","getRecentVideos","limit","arguments","undefined","videos","order","maxResults","toString","type","videoIds","map","item","videoId","join","thumbnails","medium","statsUrl","videoStats","statsData","statsMap","Map","forEach","set","contentDetails","stats","get","getAnalytics","Promise","all","currentSubscribers","currentViews","months","i","getFullYear","getMonth","push","toLocaleDateString","month","progressionFactors","monthlyViews","index","views","round","monthlySubscribers","subscribers","youtubeService"],"sources":["/Users/marcodamm/Desktop/Stats_SocialMedia/src/services/youtubeService.ts"],"sourcesContent":["import { buildYouTubeUrl, YOUTUBE_ENDPOINTS, YouTubeConfig } from '../config/youtube';\n\nexport interface YouTubeChannelStats {\n  subscriberCount: number;\n  videoCount: number;\n  viewCount: number;\n  channelName: string;\n  channelUrl: string;\n  channelId: string;\n}\n\nexport interface YouTubeVideo {\n  id: string;\n  title: string;\n  publishedAt: string;\n  viewCount: number;\n  likeCount: number;\n  commentCount: number;\n  thumbnail: string;\n  duration: string;\n}\n\nexport interface YouTubeAnalytics {\n  channelStats: YouTubeChannelStats;\n  recentVideos: YouTubeVideo[];\n  monthlyViews: Array<{ month: string; views: number }>;\n  monthlySubscribers: Array<{ month: string; subscribers: number }>;\n}\n\nclass YouTubeService {\n  private config: YouTubeConfig;\n  private lastApiCall: number = 0;\n  private apiCallCount: number = 0;\n  private readonly MAX_DAILY_CALLS = 4; // Maximum 4 calls per day (very conservative)\n  private readonly MIN_CALL_INTERVAL = 21600000; // 6 hours between calls (4 per day max)\n  private cachedData: {\n    channelStats?: YouTubeChannelStats;\n    recentVideos?: YouTubeVideo[];\n    lastCached: number;\n  } = { lastCached: 0 };\n\n  constructor() {\n    // Load saved configuration from localStorage\n    const savedConfig = localStorage.getItem('youtubeConfig');\n    console.log('Loading YouTube config from localStorage:', savedConfig);\n    if (savedConfig) {\n      const parsed = JSON.parse(savedConfig);\n      this.config = {\n        channelId: parsed.channelId || '',\n        apiKey: parsed.apiKey || '',\n        channelName: parsed.channelName || '',\n        channelUrl: parsed.channelUrl || '',\n      };\n      console.log('Loaded config:', this.config);\n    } else {\n      this.config = {\n        channelId: '',\n        apiKey: '',\n        channelName: '',\n        channelUrl: '',\n      };\n      console.log('No saved config, using defaults');\n    }\n\n    // Load API call tracking from localStorage\n    this.loadApiCallTracking();\n    \n    // Load cached data from localStorage\n    this.loadCachedData();\n  }\n\n  private loadApiCallTracking() {\n    const today = new Date().toDateString();\n    const savedTracking = localStorage.getItem('youtubeApiTracking');\n    \n    if (savedTracking) {\n      const tracking = JSON.parse(savedTracking);\n      if (tracking.date === today) {\n        this.apiCallCount = tracking.count || 0;\n        this.lastApiCall = tracking.lastCall || 0;\n      } else {\n        // Reset for new day\n        this.apiCallCount = 0;\n        this.lastApiCall = 0;\n      }\n    }\n  }\n\n  private saveApiCallTracking() {\n    const tracking = {\n      date: new Date().toDateString(),\n      count: this.apiCallCount,\n      lastCall: this.lastApiCall\n    };\n    localStorage.setItem('youtubeApiTracking', JSON.stringify(tracking));\n  }\n\n  private loadCachedData() {\n    const savedCachedData = localStorage.getItem('youtubeCachedData');\n    if (savedCachedData) {\n      this.cachedData = JSON.parse(savedCachedData);\n      console.log('Loaded cached data:', this.cachedData);\n    } else {\n      console.log('No cached data found in localStorage');\n    }\n  }\n\n  private saveCachedData() {\n    localStorage.setItem('youtubeCachedData', JSON.stringify(this.cachedData));\n  }\n\n  private canMakeApiCall(): boolean {\n    const now = Date.now();\n    \n    // Check if we've exceeded daily limit\n    if (this.apiCallCount >= this.MAX_DAILY_CALLS) {\n      console.log('Daily API call limit reached');\n      return false;\n    }\n    \n    // Check if enough time has passed since last call\n    if (now - this.lastApiCall < this.MIN_CALL_INTERVAL) {\n      console.log('API call rate limit: waiting for cooldown');\n      return false;\n    }\n    \n    return true;\n  }\n\n  // Check if we've actually hit the YouTube API quota (403 errors)\n  private async checkActualApiQuota(): Promise<boolean> {\n    if (!this.config.apiKey || !this.config.channelId) {\n      return true; // No config means no quota check needed\n    }\n\n    // If we have cached data from today, assume API is working\n    const today = new Date().toDateString();\n    const cachedDate = new Date(this.cachedData.lastCached).toDateString();\n    if (this.cachedData.channelStats && cachedDate === today) {\n      console.log('Using cached data from today, assuming API is available');\n      return true;\n    }\n\n    // Only check actual quota if we haven't made a call recently\n    const timeSinceLastCall = Date.now() - this.lastApiCall;\n    if (timeSinceLastCall < 300000) { // 5 minutes\n      console.log('Recent API call made, skipping quota check');\n      return true;\n    }\n\n    try {\n      const url = buildYouTubeUrl(YOUTUBE_ENDPOINTS.channel, {\n        part: 'statistics,snippet',\n        id: this.config.channelId,\n      }, this.config.apiKey);\n\n      const response = await fetch(url);\n      console.log('Quota check response status:', response.status);\n      \n      if (response.status === 403) {\n        console.log('YouTube API quota actually exceeded');\n        return false; // Quota exceeded\n      }\n      \n      return true; // API is available\n    } catch (error) {\n      console.log('Error checking API quota:', error);\n      return false; // Assume quota exceeded on error\n    }\n  }\n\n  private recordApiCall() {\n    this.apiCallCount++;\n    this.lastApiCall = Date.now();\n    this.saveApiCallTracking();\n    console.log(`API call recorded. Daily count: ${this.apiCallCount}/${this.MAX_DAILY_CALLS}`);\n  }\n\n  updateConfig(newConfig: YouTubeConfig) {\n    this.config = newConfig;\n    localStorage.setItem('youtubeConfig', JSON.stringify(newConfig));\n  }\n\n  getConfig(): YouTubeConfig {\n    return this.config;\n  }\n\n  // Debug method to check localStorage\n  debugCachedData() {\n    const savedCachedData = localStorage.getItem('youtubeCachedData');\n    const savedConfig = localStorage.getItem('youtubeConfig');\n    const savedTracking = localStorage.getItem('youtubeApiTracking');\n    \n    console.log('=== DEBUG CACHED DATA ===');\n    console.log('youtubeCachedData:', savedCachedData);\n    console.log('youtubeConfig:', savedConfig);\n    console.log('youtubeApiTracking:', savedTracking);\n    console.log('Current cachedData object:', this.cachedData);\n    console.log('========================');\n    \n    return {\n      cachedData: savedCachedData ? JSON.parse(savedCachedData) : null,\n      config: savedConfig ? JSON.parse(savedConfig) : null,\n      tracking: savedTracking ? JSON.parse(savedTracking) : null,\n      currentCachedData: this.cachedData\n    };\n  }\n\n  // Method to manually cache demo data as real data (for testing)\n  cacheDemoDataAsReal() {\n    const demoChannelStats = {\n      subscriberCount: 12400,\n      videoCount: 89,\n      viewCount: 1800000,\n      channelName: this.config.channelName || 'Maggo',\n      channelUrl: this.config.channelUrl || 'https://www.youtube.com/@maggo',\n      channelId: this.config.channelId || 'UCZggs3Q7sC5QQZGeQYJd5pA',\n    };\n\n    const demoVideos = [\n      {\n        id: 'demo-video-1',\n        title: 'Sample Video Title 1',\n        publishedAt: '2024-01-15T10:00:00Z',\n        viewCount: 15000,\n        likeCount: 1200,\n        commentCount: 89,\n        thumbnail: 'https://via.placeholder.com/320x180',\n        duration: 'PT10M30S',\n      },\n      {\n        id: 'demo-video-2',\n        title: 'Sample Video Title 2',\n        publishedAt: '2024-01-10T14:30:00Z',\n        viewCount: 22000,\n        likeCount: 1800,\n        commentCount: 156,\n        thumbnail: 'https://via.placeholder.com/320x180',\n        duration: 'PT15M45S',\n      },\n    ];\n\n    this.cachedData.channelStats = demoChannelStats;\n    this.cachedData.recentVideos = demoVideos;\n    this.cachedData.lastCached = Date.now();\n    this.saveCachedData();\n    \n    console.log('Manually cached demo data as real data:', this.cachedData);\n    return this.cachedData;\n  }\n\n  async getApiCallStatus() {\n    // Check if we have valid config\n    const hasValidConfig = this.config.apiKey && this.config.channelId;\n    \n    // If no valid config, show as unlimited since we're using demo data\n    if (!hasValidConfig) {\n      return {\n        dailyCalls: 0,\n        maxCalls: this.MAX_DAILY_CALLS,\n        remainingCalls: this.MAX_DAILY_CALLS,\n        lastCall: this.lastApiCall,\n        canMakeCall: true,\n        usingDemoData: true,\n        reason: 'No API configuration',\n        showCallCount: false,\n        actualQuotaExceeded: false\n      };\n    }\n\n    // Check if we're actually hitting quota limits\n    const isQuotaExceeded = this.apiCallCount >= this.MAX_DAILY_CALLS;\n    const isRateLimited = Date.now() - this.lastApiCall < this.MIN_CALL_INTERVAL;\n    const hasCachedData = this.cachedData.channelStats && this.cachedData.recentVideos;\n    \n    // Check actual YouTube API quota status\n    const actualQuotaAvailable = await this.checkActualApiQuota();\n    const actualQuotaExceeded = !actualQuotaAvailable;\n    \n    // Calculate time until next available call\n    const timeUntilNextCall = this.lastApiCall + this.MIN_CALL_INTERVAL - Date.now();\n    const minutesUntilNext = Math.ceil(timeUntilNextCall / 60000);\n    \n    // Determine the actual status\n    let canMakeCall = true;\n    let showCallCount = true;\n    \n          if (actualQuotaExceeded) {\n        canMakeCall = false;\n        showCallCount = false;\n      } else if (isQuotaExceeded) {\n        canMakeCall = false;\n        showCallCount = false;\n      } else if (isRateLimited) {\n        canMakeCall = false;\n        showCallCount = false;\n      }\n\n      return {\n        dailyCalls: this.apiCallCount,\n        maxCalls: this.MAX_DAILY_CALLS,\n        remainingCalls: Math.max(0, this.MAX_DAILY_CALLS - this.apiCallCount),\n        lastCall: this.lastApiCall,\n        canMakeCall,\n        usingCachedData: (!canMakeCall) && hasCachedData,\n        usingDemoData: (!canMakeCall) && !hasCachedData,\n        reason: isQuotaExceeded ? 'Daily quota exceeded - wait 24 hours (4 calls max)' : \n                isRateLimited ? `Rate limited - wait ${minutesUntilNext} minutes (6h cooldown)` : 'Ready',\n        showCallCount,\n        timeUntilNext: timeUntilNextCall,\n        actualQuotaExceeded\n      };\n  }\n\n  private async fetchFromAPI(url: string): Promise<any> {\n    console.log('Making API call to:', url);\n    const response = await fetch(url);\n    console.log('API response status:', response.status);\n    \n    if (!response.ok) {\n      const errorText = await response.text();\n      console.error('API Error response:', errorText);\n      \n      if (response.status === 403) {\n        throw new Error('API quota exceeded or invalid API key');\n      } else if (response.status === 400) {\n        throw new Error('Invalid request - check channel ID');\n      } else {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n    }\n    \n    const data = await response.json();\n    console.log('API response data:', data);\n    return data;\n  }\n\n  async getChannelStats(): Promise<YouTubeChannelStats> {\n    console.log('getChannelStats called with config:', this.config);\n    console.log('Current cached data:', this.cachedData);\n    \n    // If no API key or channel ID, return mock data\n    if (!this.config.apiKey || !this.config.channelId) {\n      console.log('No API key or channel ID, returning mock data');\n      return {\n        subscriberCount: 12400,\n        videoCount: 89,\n        viewCount: 1800000,\n        channelName: this.config.channelName || 'Demo Channel',\n        channelUrl: this.config.channelUrl || 'https://www.youtube.com/@demo',\n        channelId: this.config.channelId || 'demo-channel-id',\n      };\n    }\n\n    // Check if we have cached data from today first\n    const today = new Date().toDateString();\n    const cachedDate = this.cachedData.lastCached ? new Date(this.cachedData.lastCached).toDateString() : null;\n    console.log('Today:', today, 'Cached date:', cachedDate);\n    \n    if (this.cachedData.channelStats && cachedDate === today) {\n      console.log('Returning cached channel stats from today');\n      return this.cachedData.channelStats;\n    }\n\n    // Check if we can make API call\n    if (!this.canMakeApiCall()) {\n      console.log('API call limit reached, checking cached data');\n      \n      // Return cached data if available (even from previous days)\n      if (this.cachedData.channelStats) {\n        console.log('Returning cached channel stats from previous days');\n        return this.cachedData.channelStats;\n      }\n      \n      // Fall back to mock data if no cache\n      console.log('No cached data, returning mock data');\n      return {\n        subscriberCount: 12400,\n        videoCount: 89,\n        viewCount: 1800000,\n        channelName: this.config.channelName || 'Demo Channel',\n        channelUrl: this.config.channelUrl || 'https://www.youtube.com/@demo',\n        channelId: this.config.channelId || 'demo-channel-id',\n      };\n    }\n\n    // Try to make API call and cache the result\n    try {\n      const url = buildYouTubeUrl(YOUTUBE_ENDPOINTS.channel, {\n        part: 'statistics,snippet',\n        id: this.config.channelId,\n      }, this.config.apiKey);\n\n      const data = await this.fetchFromAPI(url);\n      this.recordApiCall();\n      \n      if (data.items && data.items.length > 0) {\n        const channel = data.items[0];\n        const channelStats = {\n          subscriberCount: parseInt(channel.statistics.subscriberCount || '0'),\n          videoCount: parseInt(channel.statistics.videoCount || '0'),\n          viewCount: parseInt(channel.statistics.viewCount || '0'),\n          channelName: channel.snippet.title,\n          channelUrl: `https://www.youtube.com/channel/${channel.id}`,\n          channelId: channel.id,\n        };\n        \n        // Cache the successful API response\n        this.cachedData.channelStats = channelStats;\n        this.cachedData.lastCached = Date.now();\n        this.saveCachedData();\n        console.log('Successfully cached channel stats:', channelStats);\n        \n        return channelStats;\n      }\n\n      throw new Error('Channel not found');\n    } catch (error) {\n      console.error('Error in getChannelStats:', error);\n      \n      // If we have any cached data, return it even if it's old\n      if (this.cachedData.channelStats) {\n        console.log('API failed, returning cached data');\n        return this.cachedData.channelStats;\n      }\n      \n      // Return mock data if API fails and no cache exists\n      console.log('API failed and no cache, returning mock data');\n      return {\n        subscriberCount: 12400,\n        videoCount: 89,\n        viewCount: 1800000,\n        channelName: this.config.channelName || 'Demo Channel',\n        channelUrl: this.config.channelUrl || 'https://www.youtube.com/@demo',\n        channelId: this.config.channelId || 'demo-channel-id',\n      };\n    }\n  }\n\n  async getRecentVideos(limit: number = 10): Promise<YouTubeVideo[]> {\n    // If no API key or channel ID, return mock data\n    if (!this.config.apiKey || !this.config.channelId) {\n      return [\n        {\n          id: 'mock-video-1',\n          title: 'Sample Video Title 1',\n          publishedAt: '2024-01-15T10:00:00Z',\n          viewCount: 15000,\n          likeCount: 1200,\n          commentCount: 89,\n          thumbnail: 'https://via.placeholder.com/320x180',\n          duration: 'PT10M30S',\n        },\n        {\n          id: 'mock-video-2',\n          title: 'Sample Video Title 2',\n          publishedAt: '2024-01-10T14:30:00Z',\n          viewCount: 22000,\n          likeCount: 1800,\n          commentCount: 156,\n          thumbnail: 'https://via.placeholder.com/320x180',\n          duration: 'PT15M45S',\n        },\n      ];\n    }\n\n    // Check if we have cached data from today first\n    const today = new Date().toDateString();\n    const cachedDate = new Date(this.cachedData.lastCached).toDateString();\n    if (this.cachedData.recentVideos && cachedDate === today) {\n      console.log('Returning cached videos from today');\n      return this.cachedData.recentVideos;\n    }\n\n    // Check if we can make API call\n    if (!this.canMakeApiCall()) {\n      console.log('API call limit reached, checking cached videos');\n      \n      // Return cached data if available (even from previous days)\n      if (this.cachedData.recentVideos) {\n        console.log('Returning cached videos');\n        return this.cachedData.recentVideos;\n      }\n      \n      // Fall back to mock data if no cache\n      console.log('No cached videos, returning mock data');\n      return [\n        {\n          id: 'mock-video-1',\n          title: 'Sample Video Title 1',\n          publishedAt: '2024-01-15T10:00:00Z',\n          viewCount: 15000,\n          likeCount: 1200,\n          commentCount: 89,\n          thumbnail: 'https://via.placeholder.com/320x180',\n          duration: 'PT10M30S',\n        },\n        {\n          id: 'mock-video-2',\n          title: 'Sample Video Title 2',\n          publishedAt: '2024-01-10T14:30:00Z',\n          viewCount: 22000,\n          likeCount: 1800,\n          commentCount: 156,\n          thumbnail: 'https://via.placeholder.com/320x180',\n          duration: 'PT15M45S',\n        },\n      ];\n    }\n\n    try {\n      // Make real API call\n      const url = buildYouTubeUrl(YOUTUBE_ENDPOINTS.videos, {\n        part: 'snippet',\n        channelId: this.config.channelId,\n        order: 'date',\n        maxResults: limit.toString(),\n        type: 'video',\n      }, this.config.apiKey);\n\n      const data = await this.fetchFromAPI(url);\n      this.recordApiCall();\n      \n      if (data.items) {\n        const videoIds = data.items.map((item: any) => item.id.videoId).join(',');\n        \n        // Check if we can make another API call for video stats\n        if (!this.canMakeApiCall()) {\n          console.log('API call limit reached, returning videos without detailed stats');\n          return data.items.map((item: any) => ({\n            id: item.id.videoId,\n            title: item.snippet.title,\n            publishedAt: item.snippet.publishedAt,\n            viewCount: 0,\n            likeCount: 0,\n            commentCount: 0,\n            thumbnail: item.snippet.thumbnails.medium.url,\n            duration: 'PT0S',\n          }));\n        }\n        \n        // Get detailed video statistics\n        const statsUrl = buildYouTubeUrl(YOUTUBE_ENDPOINTS.videoStats, {\n          part: 'statistics,contentDetails',\n          id: videoIds,\n        }, this.config.apiKey);\n\n        const statsData = await this.fetchFromAPI(statsUrl);\n        this.recordApiCall();\n        const statsMap = new Map();\n        \n        if (statsData.items) {\n          statsData.items.forEach((item: any) => {\n            statsMap.set(item.id, {\n              viewCount: parseInt(item.statistics.viewCount || '0'),\n              likeCount: parseInt(item.statistics.likeCount || '0'),\n              commentCount: parseInt(item.statistics.commentCount || '0'),\n              duration: item.contentDetails.duration,\n            });\n          });\n        }\n\n        const videos = data.items.map((item: any) => {\n          const stats = statsMap.get(item.id.videoId) || {\n            viewCount: 0,\n            likeCount: 0,\n            commentCount: 0,\n            duration: 'PT0S',\n          };\n\n          return {\n            id: item.id.videoId,\n            title: item.snippet.title,\n            publishedAt: item.snippet.publishedAt,\n            viewCount: stats.viewCount,\n            likeCount: stats.likeCount,\n            commentCount: stats.commentCount,\n            thumbnail: item.snippet.thumbnails.medium.url,\n            duration: stats.duration,\n          };\n        });\n        \n        // Cache the successful API response\n        this.cachedData.recentVideos = videos;\n        this.cachedData.lastCached = Date.now();\n        this.saveCachedData();\n        \n        return videos;\n      }\n\n      return [];\n    } catch (error) {\n      console.error('Error in getRecentVideos:', error);\n      \n      // Return mock data if API fails\n      return [\n        {\n          id: 'mock-video-1',\n          title: 'Sample Video Title 1',\n          publishedAt: '2024-01-15T10:00:00Z',\n          viewCount: 15000,\n          likeCount: 1200,\n          commentCount: 89,\n          thumbnail: 'https://via.placeholder.com/320x180',\n          duration: 'PT10M30S',\n        },\n        {\n          id: 'mock-video-2',\n          title: 'Sample Video Title 2',\n          publishedAt: '2024-01-10T14:30:00Z',\n          viewCount: 22000,\n          likeCount: 1800,\n          commentCount: 156,\n          thumbnail: 'https://via.placeholder.com/320x180',\n          duration: 'PT15M45S',\n        },\n      ];\n    }\n  }\n\n  async getAnalytics(): Promise<YouTubeAnalytics> {\n    const [channelStats, recentVideos] = await Promise.all([\n      this.getChannelStats(),\n      this.getRecentVideos(),\n    ]);\n\n    // Generate monthly data based on actual channel stats\n    const currentSubscribers = channelStats.subscriberCount;\n    const currentViews = channelStats.viewCount;\n    \n    // Get current date and generate last 6 months\n    const now = new Date();\n    const months = [];\n    for (let i = 5; i >= 0; i--) {\n      const date = new Date(now.getFullYear(), now.getMonth() - i, 1);\n      months.push(date.toLocaleDateString('en-US', { month: 'short' }));\n    }\n    \n    // Calculate progression factors for realistic growth\n    const progressionFactors = [0.7, 0.8, 0.85, 0.9, 0.95, 1.0];\n    \n    // Calculate monthly progression based on current stats\n    const monthlyViews = months.map((month, index) => ({\n      month,\n      views: Math.round(currentViews * progressionFactors[index])\n    }));\n\n    const monthlySubscribers = months.map((month, index) => ({\n      month,\n      subscribers: Math.round(currentSubscribers * progressionFactors[index])\n    }));\n\n    return {\n      channelStats,\n      recentVideos,\n      monthlyViews,\n      monthlySubscribers,\n    };\n  }\n}\n\nexport const youtubeService = new YouTubeService(); "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}