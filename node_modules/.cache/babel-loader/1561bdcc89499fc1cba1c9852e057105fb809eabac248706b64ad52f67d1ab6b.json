{"ast":null,"code":"import { youtubeService } from './youtubeService';\nclass DataCollectionService {\n  constructor() {\n    this.STORAGE_KEY = 'youtube_historical_data';\n    this.DAILY_COLLECTION_KEY = 'youtube_daily_collection';\n  }\n  // Check if we should collect data today\n  shouldCollectToday() {\n    const lastCollection = localStorage.getItem(this.DAILY_COLLECTION_KEY);\n    if (!lastCollection) return true;\n    const lastDate = new Date(lastCollection);\n    const today = new Date();\n\n    // Check if it's a different day\n    return lastDate.getDate() !== today.getDate() || lastDate.getMonth() !== today.getMonth() || lastDate.getFullYear() !== today.getFullYear();\n  }\n\n  // Collect and save today's data\n  async collectDailyData() {\n    try {\n      const channelStats = await youtubeService.getChannelStats();\n      const todayStats = {\n        date: new Date().toISOString().split('T')[0],\n        // YYYY-MM-DD format\n        subscriberCount: channelStats.subscriberCount,\n        viewCount: channelStats.viewCount,\n        videoCount: channelStats.videoCount,\n        channelName: channelStats.channelName\n      };\n\n      // Get existing historical data\n      const historicalData = this.getHistoricalData();\n\n      // Add today's data if it doesn't exist\n      const existingIndex = historicalData.dailyStats.findIndex(stat => stat.date === todayStats.date);\n      if (existingIndex === -1) {\n        historicalData.dailyStats.push(todayStats);\n        historicalData.lastUpdated = new Date().toISOString();\n\n        // Save updated data\n        localStorage.setItem(this.STORAGE_KEY, JSON.stringify(historicalData));\n        localStorage.setItem(this.DAILY_COLLECTION_KEY, new Date().toISOString());\n        console.log('Daily data collected:', todayStats);\n      }\n    } catch (error) {\n      console.error('Error collecting daily data:', error);\n    }\n  }\n\n  // Get historical data from localStorage\n  getHistoricalData() {\n    const stored = localStorage.getItem(this.STORAGE_KEY);\n    if (stored) {\n      return JSON.parse(stored);\n    }\n    return {\n      dailyStats: [],\n      lastUpdated: new Date().toISOString()\n    };\n  }\n\n  // Get data for specific time periods\n  getDataForPeriod(days) {\n    const historicalData = this.getHistoricalData();\n    const today = new Date();\n    const cutoffDate = new Date(today.getTime() - days * 24 * 60 * 60 * 1000);\n    return historicalData.dailyStats.filter(stat => {\n      const statDate = new Date(stat.date);\n      return statDate >= cutoffDate;\n    }).sort((a, b) => new Date(a.date).getTime() - new Date(b.date).getTime());\n  }\n\n  // Get monthly aggregated data\n  getMonthlyData(months) {\n    const historicalData = this.getHistoricalData();\n    const today = new Date();\n    const cutoffDate = new Date(today.getFullYear(), today.getMonth() - months, 1);\n    const monthlyData = new Map();\n    historicalData.dailyStats.forEach(stat => {\n      const statDate = new Date(stat.date);\n      if (statDate >= cutoffDate) {\n        const monthKey = statDate.toLocaleDateString('en-US', {\n          year: 'numeric',\n          month: 'short'\n        });\n        if (!monthlyData.has(monthKey)) {\n          monthlyData.set(monthKey, {\n            subscribers: 0,\n            views: 0,\n            count: 0\n          });\n        }\n        const monthData = monthlyData.get(monthKey);\n        monthData.subscribers += stat.subscriberCount;\n        monthData.views += stat.viewCount;\n        monthData.count += 1;\n      }\n    });\n\n    // Calculate averages for each month\n    return Array.from(monthlyData.entries()).map(([month, data]) => ({\n      month,\n      subscribers: Math.round(data.subscribers / data.count),\n      views: Math.round(data.views / data.count)\n    })).sort((a, b) => new Date(a.month).getTime() - new Date(b.month).getTime());\n  }\n\n  // Initialize daily collection if needed\n  async initializeDailyCollection() {\n    if (this.shouldCollectToday()) {\n      await this.collectDailyData();\n    }\n  }\n\n  // Clear historical data (for testing)\n  clearHistoricalData() {\n    localStorage.removeItem(this.STORAGE_KEY);\n    localStorage.removeItem(this.DAILY_COLLECTION_KEY);\n  }\n}\nexport const dataCollectionService = new DataCollectionService();","map":{"version":3,"names":["youtubeService","DataCollectionService","constructor","STORAGE_KEY","DAILY_COLLECTION_KEY","shouldCollectToday","lastCollection","localStorage","getItem","lastDate","Date","today","getDate","getMonth","getFullYear","collectDailyData","channelStats","getChannelStats","todayStats","date","toISOString","split","subscriberCount","viewCount","videoCount","channelName","historicalData","getHistoricalData","existingIndex","dailyStats","findIndex","stat","push","lastUpdated","setItem","JSON","stringify","console","log","error","stored","parse","getDataForPeriod","days","cutoffDate","getTime","filter","statDate","sort","a","b","getMonthlyData","months","monthlyData","Map","forEach","monthKey","toLocaleDateString","year","month","has","set","subscribers","views","count","monthData","get","Array","from","entries","map","data","Math","round","initializeDailyCollection","clearHistoricalData","removeItem","dataCollectionService"],"sources":["/Users/marcodamm/Desktop/Stats_SocialMedia/src/services/dataCollectionService.ts"],"sourcesContent":["import { youtubeService } from './youtubeService';\n\nexport interface DailyStats {\n  date: string;\n  subscriberCount: number;\n  viewCount: number;\n  videoCount: number;\n  channelName: string;\n}\n\nexport interface HistoricalData {\n  dailyStats: DailyStats[];\n  lastUpdated: string;\n}\n\nclass DataCollectionService {\n  private readonly STORAGE_KEY = 'youtube_historical_data';\n  private readonly DAILY_COLLECTION_KEY = 'youtube_daily_collection';\n\n  // Check if we should collect data today\n  shouldCollectToday(): boolean {\n    const lastCollection = localStorage.getItem(this.DAILY_COLLECTION_KEY);\n    if (!lastCollection) return true;\n\n    const lastDate = new Date(lastCollection);\n    const today = new Date();\n    \n    // Check if it's a different day\n    return lastDate.getDate() !== today.getDate() || \n           lastDate.getMonth() !== today.getMonth() || \n           lastDate.getFullYear() !== today.getFullYear();\n  }\n\n  // Collect and save today's data\n  async collectDailyData(): Promise<void> {\n    try {\n      const channelStats = await youtubeService.getChannelStats();\n      \n      const todayStats: DailyStats = {\n        date: new Date().toISOString().split('T')[0], // YYYY-MM-DD format\n        subscriberCount: channelStats.subscriberCount,\n        viewCount: channelStats.viewCount,\n        videoCount: channelStats.videoCount,\n        channelName: channelStats.channelName,\n      };\n\n      // Get existing historical data\n      const historicalData = this.getHistoricalData();\n      \n      // Add today's data if it doesn't exist\n      const existingIndex = historicalData.dailyStats.findIndex(\n        stat => stat.date === todayStats.date\n      );\n      \n      if (existingIndex === -1) {\n        historicalData.dailyStats.push(todayStats);\n        historicalData.lastUpdated = new Date().toISOString();\n        \n        // Save updated data\n        localStorage.setItem(this.STORAGE_KEY, JSON.stringify(historicalData));\n        localStorage.setItem(this.DAILY_COLLECTION_KEY, new Date().toISOString());\n        \n        console.log('Daily data collected:', todayStats);\n      }\n    } catch (error) {\n      console.error('Error collecting daily data:', error);\n    }\n  }\n\n  // Get historical data from localStorage\n  getHistoricalData(): HistoricalData {\n    const stored = localStorage.getItem(this.STORAGE_KEY);\n    if (stored) {\n      return JSON.parse(stored);\n    }\n    \n    return {\n      dailyStats: [],\n      lastUpdated: new Date().toISOString(),\n    };\n  }\n\n  // Get data for specific time periods\n  getDataForPeriod(days: number): DailyStats[] {\n    const historicalData = this.getHistoricalData();\n    const today = new Date();\n    const cutoffDate = new Date(today.getTime() - (days * 24 * 60 * 60 * 1000));\n    \n    return historicalData.dailyStats.filter(stat => {\n      const statDate = new Date(stat.date);\n      return statDate >= cutoffDate;\n    }).sort((a, b) => new Date(a.date).getTime() - new Date(b.date).getTime());\n  }\n\n  // Get monthly aggregated data\n  getMonthlyData(months: number): Array<{ month: string; subscribers: number; views: number }> {\n    const historicalData = this.getHistoricalData();\n    const today = new Date();\n    const cutoffDate = new Date(today.getFullYear(), today.getMonth() - months, 1);\n    \n    const monthlyData = new Map<string, { subscribers: number; views: number; count: number }>();\n    \n    historicalData.dailyStats.forEach(stat => {\n      const statDate = new Date(stat.date);\n      if (statDate >= cutoffDate) {\n        const monthKey = statDate.toLocaleDateString('en-US', { year: 'numeric', month: 'short' });\n        \n        if (!monthlyData.has(monthKey)) {\n          monthlyData.set(monthKey, { subscribers: 0, views: 0, count: 0 });\n        }\n        \n        const monthData = monthlyData.get(monthKey)!;\n        monthData.subscribers += stat.subscriberCount;\n        monthData.views += stat.viewCount;\n        monthData.count += 1;\n      }\n    });\n    \n    // Calculate averages for each month\n    return Array.from(monthlyData.entries()).map(([month, data]) => ({\n      month,\n      subscribers: Math.round(data.subscribers / data.count),\n      views: Math.round(data.views / data.count),\n    })).sort((a, b) => new Date(a.month).getTime() - new Date(b.month).getTime());\n  }\n\n  // Initialize daily collection if needed\n  async initializeDailyCollection(): Promise<void> {\n    if (this.shouldCollectToday()) {\n      await this.collectDailyData();\n    }\n  }\n\n  // Clear historical data (for testing)\n  clearHistoricalData(): void {\n    localStorage.removeItem(this.STORAGE_KEY);\n    localStorage.removeItem(this.DAILY_COLLECTION_KEY);\n  }\n}\n\nexport const dataCollectionService = new DataCollectionService(); "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}