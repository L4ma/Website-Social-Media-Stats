{"ast":null,"code":"class ThreadsService {\n  constructor() {\n    this.config = null;\n    // Load saved config from localStorage\n    const savedConfig = localStorage.getItem('threadsConfig');\n    if (savedConfig) {\n      this.config = JSON.parse(savedConfig);\n    }\n  }\n  updateConfig(newConfig) {\n    this.config = newConfig;\n    localStorage.setItem('threadsConfig', JSON.stringify(newConfig));\n  }\n  getConfig() {\n    return this.config;\n  }\n\n  // Simulate API call to get Threads stats\n  async getStats() {\n    var _this$config;\n    if (!((_this$config = this.config) !== null && _this$config !== void 0 && _this$config.username)) {\n      // Return mock data for demo purposes\n      return {\n        followers: 48500,\n        following: 1200,\n        posts: 156,\n        likes: 125000,\n        replies: 8900,\n        reposts: 3400,\n        username: 'demo_user',\n        displayName: 'Demo User',\n        bio: 'Digital creator sharing thoughts on tech and life',\n        profileImage: 'https://via.placeholder.com/150'\n      };\n    }\n\n    // In the future, this would make a real API call\n    // For now, simulate realistic data based on username\n    const baseFollowers = 48500;\n    const usernameHash = this.config.username.split('').reduce((a, b) => {\n      a = (a << 5) - a + b.charCodeAt(0);\n      return a & a;\n    }, 0);\n    return {\n      followers: baseFollowers + usernameHash % 10000,\n      following: 1200 + usernameHash % 500,\n      posts: 156 + usernameHash % 50,\n      likes: 125000 + usernameHash % 25000,\n      replies: 8900 + usernameHash % 2000,\n      reposts: 3400 + usernameHash % 1000,\n      username: this.config.username,\n      displayName: this.config.username.charAt(0).toUpperCase() + this.config.username.slice(1),\n      bio: 'Digital creator sharing thoughts on tech and life',\n      profileImage: 'https://via.placeholder.com/150'\n    };\n  }\n\n  // Simulate getting recent posts\n  async getRecentPosts(limit = 10) {\n    const mockPosts = [{\n      id: '1',\n      text: 'Just launched my new project! ðŸš€ Excited to share what I\\'ve been working on. #tech #launch',\n      likes: 1240,\n      replies: 89,\n      reposts: 156,\n      timestamp: new Date(Date.now() - 2 * 60 * 60 * 1000).toISOString(),\n      isRepost: false\n    }, {\n      id: '2',\n      text: 'The future of social media is here. Threads is changing how we connect online. What do you think?',\n      likes: 890,\n      replies: 67,\n      reposts: 234,\n      timestamp: new Date(Date.now() - 6 * 60 * 60 * 1000).toISOString(),\n      isRepost: false\n    }, {\n      id: '3',\n      text: 'Reposted by @tech_insider',\n      likes: 567,\n      replies: 23,\n      reposts: 89,\n      timestamp: new Date(Date.now() - 12 * 60 * 60 * 1000).toISOString(),\n      isRepost: true,\n      originalPost: {\n        author: '@tech_insider',\n        text: 'Breaking: New AI developments that will change everything we know about technology.'\n      }\n    }, {\n      id: '4',\n      text: 'Building in public is the best way to grow. Sharing my journey, wins, and lessons learned.',\n      likes: 2100,\n      replies: 145,\n      reposts: 312,\n      timestamp: new Date(Date.now() - 24 * 60 * 60 * 1000).toISOString(),\n      isRepost: false\n    }, {\n      id: '5',\n      text: 'Threads vs Twitter - the battle for microblogging supremacy continues. Thoughts?',\n      likes: 1567,\n      replies: 234,\n      reposts: 445,\n      timestamp: new Date(Date.now() - 36 * 60 * 60 * 1000).toISOString(),\n      isRepost: false\n    }];\n    return mockPosts.slice(0, limit);\n  }\n\n  // Generate daily stats for the last 30 days\n  async getDailyStats(days = 30) {\n    const stats = await this.getStats();\n    const dailyStats = [];\n    for (let i = days - 1; i >= 0; i--) {\n      const date = new Date();\n      date.setDate(date.getDate() - i);\n\n      // Simulate realistic daily progression\n      const dayFactor = i / days;\n      const followers = Math.round(stats.followers * (0.85 + dayFactor * 0.15));\n      const engagement = Math.round((stats.likes + stats.replies + stats.reposts) * (0.8 + dayFactor * 0.2) / 30);\n      dailyStats.push({\n        date: date.toISOString().split('T')[0],\n        followers,\n        engagement\n      });\n    }\n    return dailyStats;\n  }\n\n  // Generate weekly stats for the last 12 weeks\n  async getWeeklyStats(weeks = 12) {\n    const stats = await this.getStats();\n    const weeklyStats = [];\n    for (let i = weeks - 1; i >= 0; i--) {\n      const date = new Date();\n      date.setDate(date.getDate() - i * 7);\n\n      // Simulate realistic weekly progression\n      const weekFactor = i / weeks;\n      const followers = Math.round(stats.followers * (0.8 + weekFactor * 0.2));\n      const engagement = Math.round((stats.likes + stats.replies + stats.reposts) * (0.75 + weekFactor * 0.25) / 12);\n      weeklyStats.push({\n        week: `Week ${weeks - i}`,\n        followers,\n        engagement\n      });\n    }\n    return weeklyStats;\n  }\n\n  // Get comprehensive analytics\n  async getAnalytics() {\n    const [stats, recentPosts, dailyStats, weeklyStats] = await Promise.all([this.getStats(), this.getRecentPosts(), this.getDailyStats(), this.getWeeklyStats()]);\n    return {\n      stats,\n      recentPosts,\n      dailyStats,\n      weeklyStats\n    };\n  }\n\n  // Check if Threads is connected\n  isConnected() {\n    var _this$config2;\n    return !!((_this$config2 = this.config) !== null && _this$config2 !== void 0 && _this$config2.username);\n  }\n\n  // Simulate data collection for historical tracking\n  async collectDailyData() {\n    if (!this.isConnected()) return;\n    const stats = await this.getStats();\n    const today = new Date().toISOString().split('T')[0];\n\n    // Store daily data in localStorage (similar to YouTube service)\n    const existingData = localStorage.getItem('threads_historical_data');\n    const historicalData = existingData ? JSON.parse(existingData) : {\n      dailyStats: []\n    };\n\n    // Check if today's data already exists\n    const todayExists = historicalData.dailyStats.some(stat => stat.date === today);\n    if (!todayExists) {\n      historicalData.dailyStats.push({\n        date: today,\n        followers: stats.followers,\n        engagement: stats.likes + stats.replies + stats.reposts\n      });\n      localStorage.setItem('threads_historical_data', JSON.stringify(historicalData));\n      localStorage.setItem('threads_daily_collection', new Date().toISOString());\n    }\n  }\n}\nexport const threadsService = new ThreadsService();","map":{"version":3,"names":["ThreadsService","constructor","config","savedConfig","localStorage","getItem","JSON","parse","updateConfig","newConfig","setItem","stringify","getConfig","getStats","_this$config","username","followers","following","posts","likes","replies","reposts","displayName","bio","profileImage","baseFollowers","usernameHash","split","reduce","a","b","charCodeAt","charAt","toUpperCase","slice","getRecentPosts","limit","mockPosts","id","text","timestamp","Date","now","toISOString","isRepost","originalPost","author","getDailyStats","days","stats","dailyStats","i","date","setDate","getDate","dayFactor","Math","round","engagement","push","getWeeklyStats","weeks","weeklyStats","weekFactor","week","getAnalytics","recentPosts","Promise","all","isConnected","_this$config2","collectDailyData","today","existingData","historicalData","todayExists","some","stat","threadsService"],"sources":["/Users/marcodamm/Desktop/Stats_SocialMedia/src/services/threadsService.ts"],"sourcesContent":["export interface ThreadsConfig {\n  username: string;\n  userId?: string;\n  accessToken?: string;\n}\n\nexport interface ThreadsStats {\n  followers: number;\n  following: number;\n  posts: number;\n  likes: number;\n  replies: number;\n  reposts: number;\n  username: string;\n  displayName: string;\n  bio: string;\n  profileImage: string;\n}\n\nexport interface ThreadsPost {\n  id: string;\n  text: string;\n  likes: number;\n  replies: number;\n  reposts: number;\n  timestamp: string;\n  isRepost: boolean;\n  originalPost?: {\n    author: string;\n    text: string;\n  };\n}\n\nexport interface ThreadsAnalytics {\n  stats: ThreadsStats;\n  recentPosts: ThreadsPost[];\n  dailyStats: Array<{ date: string; followers: number; engagement: number }>;\n  weeklyStats: Array<{ week: string; followers: number; engagement: number }>;\n}\n\nclass ThreadsService {\n  private config: ThreadsConfig | null = null;\n\n  constructor() {\n    // Load saved config from localStorage\n    const savedConfig = localStorage.getItem('threadsConfig');\n    if (savedConfig) {\n      this.config = JSON.parse(savedConfig);\n    }\n  }\n\n  updateConfig(newConfig: ThreadsConfig) {\n    this.config = newConfig;\n    localStorage.setItem('threadsConfig', JSON.stringify(newConfig));\n  }\n\n  getConfig(): ThreadsConfig | null {\n    return this.config;\n  }\n\n  // Simulate API call to get Threads stats\n  async getStats(): Promise<ThreadsStats> {\n    if (!this.config?.username) {\n      // Return mock data for demo purposes\n      return {\n        followers: 48500,\n        following: 1200,\n        posts: 156,\n        likes: 125000,\n        replies: 8900,\n        reposts: 3400,\n        username: 'demo_user',\n        displayName: 'Demo User',\n        bio: 'Digital creator sharing thoughts on tech and life',\n        profileImage: 'https://via.placeholder.com/150',\n      };\n    }\n\n    // In the future, this would make a real API call\n    // For now, simulate realistic data based on username\n    const baseFollowers = 48500;\n    const usernameHash = this.config.username.split('').reduce((a, b) => {\n      a = ((a << 5) - a) + b.charCodeAt(0);\n      return a & a;\n    }, 0);\n    \n    return {\n      followers: baseFollowers + (usernameHash % 10000),\n      following: 1200 + (usernameHash % 500),\n      posts: 156 + (usernameHash % 50),\n      likes: 125000 + (usernameHash % 25000),\n      replies: 8900 + (usernameHash % 2000),\n      reposts: 3400 + (usernameHash % 1000),\n      username: this.config.username,\n      displayName: this.config.username.charAt(0).toUpperCase() + this.config.username.slice(1),\n      bio: 'Digital creator sharing thoughts on tech and life',\n      profileImage: 'https://via.placeholder.com/150',\n    };\n  }\n\n  // Simulate getting recent posts\n  async getRecentPosts(limit: number = 10): Promise<ThreadsPost[]> {\n    const mockPosts: ThreadsPost[] = [\n      {\n        id: '1',\n        text: 'Just launched my new project! ðŸš€ Excited to share what I\\'ve been working on. #tech #launch',\n        likes: 1240,\n        replies: 89,\n        reposts: 156,\n        timestamp: new Date(Date.now() - 2 * 60 * 60 * 1000).toISOString(),\n        isRepost: false,\n      },\n      {\n        id: '2',\n        text: 'The future of social media is here. Threads is changing how we connect online. What do you think?',\n        likes: 890,\n        replies: 67,\n        reposts: 234,\n        timestamp: new Date(Date.now() - 6 * 60 * 60 * 1000).toISOString(),\n        isRepost: false,\n      },\n      {\n        id: '3',\n        text: 'Reposted by @tech_insider',\n        likes: 567,\n        replies: 23,\n        reposts: 89,\n        timestamp: new Date(Date.now() - 12 * 60 * 60 * 1000).toISOString(),\n        isRepost: true,\n        originalPost: {\n          author: '@tech_insider',\n          text: 'Breaking: New AI developments that will change everything we know about technology.',\n        },\n      },\n      {\n        id: '4',\n        text: 'Building in public is the best way to grow. Sharing my journey, wins, and lessons learned.',\n        likes: 2100,\n        replies: 145,\n        reposts: 312,\n        timestamp: new Date(Date.now() - 24 * 60 * 60 * 1000).toISOString(),\n        isRepost: false,\n      },\n      {\n        id: '5',\n        text: 'Threads vs Twitter - the battle for microblogging supremacy continues. Thoughts?',\n        likes: 1567,\n        replies: 234,\n        reposts: 445,\n        timestamp: new Date(Date.now() - 36 * 60 * 60 * 1000).toISOString(),\n        isRepost: false,\n      },\n    ];\n\n    return mockPosts.slice(0, limit);\n  }\n\n  // Generate daily stats for the last 30 days\n  async getDailyStats(days: number = 30): Promise<Array<{ date: string; followers: number; engagement: number }>> {\n    const stats = await this.getStats();\n    const dailyStats = [];\n    \n    for (let i = days - 1; i >= 0; i--) {\n      const date = new Date();\n      date.setDate(date.getDate() - i);\n      \n      // Simulate realistic daily progression\n      const dayFactor = i / days;\n      const followers = Math.round(stats.followers * (0.85 + (dayFactor * 0.15)));\n      const engagement = Math.round((stats.likes + stats.replies + stats.reposts) * (0.8 + (dayFactor * 0.2)) / 30);\n      \n      dailyStats.push({\n        date: date.toISOString().split('T')[0],\n        followers,\n        engagement,\n      });\n    }\n    \n    return dailyStats;\n  }\n\n  // Generate weekly stats for the last 12 weeks\n  async getWeeklyStats(weeks: number = 12): Promise<Array<{ week: string; followers: number; engagement: number }>> {\n    const stats = await this.getStats();\n    const weeklyStats = [];\n    \n    for (let i = weeks - 1; i >= 0; i--) {\n      const date = new Date();\n      date.setDate(date.getDate() - (i * 7));\n      \n      // Simulate realistic weekly progression\n      const weekFactor = i / weeks;\n      const followers = Math.round(stats.followers * (0.8 + (weekFactor * 0.2)));\n      const engagement = Math.round((stats.likes + stats.replies + stats.reposts) * (0.75 + (weekFactor * 0.25)) / 12);\n      \n      weeklyStats.push({\n        week: `Week ${weeks - i}`,\n        followers,\n        engagement,\n      });\n    }\n    \n    return weeklyStats;\n  }\n\n  // Get comprehensive analytics\n  async getAnalytics(): Promise<ThreadsAnalytics> {\n    const [stats, recentPosts, dailyStats, weeklyStats] = await Promise.all([\n      this.getStats(),\n      this.getRecentPosts(),\n      this.getDailyStats(),\n      this.getWeeklyStats(),\n    ]);\n\n    return {\n      stats,\n      recentPosts,\n      dailyStats,\n      weeklyStats,\n    };\n  }\n\n  // Check if Threads is connected\n  isConnected(): boolean {\n    return !!this.config?.username;\n  }\n\n  // Simulate data collection for historical tracking\n  async collectDailyData(): Promise<void> {\n    if (!this.isConnected()) return;\n\n    const stats = await this.getStats();\n    const today = new Date().toISOString().split('T')[0];\n    \n    // Store daily data in localStorage (similar to YouTube service)\n    const existingData = localStorage.getItem('threads_historical_data');\n    const historicalData = existingData ? JSON.parse(existingData) : { dailyStats: [] };\n    \n    // Check if today's data already exists\n    const todayExists = historicalData.dailyStats.some((stat: any) => stat.date === today);\n    \n    if (!todayExists) {\n      historicalData.dailyStats.push({\n        date: today,\n        followers: stats.followers,\n        engagement: stats.likes + stats.replies + stats.reposts,\n      });\n      \n      localStorage.setItem('threads_historical_data', JSON.stringify(historicalData));\n      localStorage.setItem('threads_daily_collection', new Date().toISOString());\n    }\n  }\n}\n\nexport const threadsService = new ThreadsService(); "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}