{"ast":null,"code":"import { youtubeService } from './youtubeService';\nclass OverviewService {\n  async getOverviewData() {\n    try {\n      // Get YouTube analytics\n      const youtubeAnalytics = await youtubeService.getAnalytics();\n\n      // Calculate YouTube engagement (using likes + comments as engagement)\n      const youtubeEngagement = youtubeAnalytics.recentVideos.reduce((total, video) => {\n        return total + video.likeCount + video.commentCount;\n      }, 0) / youtubeAnalytics.recentVideos.length;\n\n      // Generate realistic data based on YouTube stats\n      const currentSubscribers = youtubeAnalytics.channelStats.subscriberCount;\n      const currentViews = youtubeAnalytics.channelStats.viewCount;\n\n      // Engagement data with real YouTube data\n      const engagementData = [{\n        month: 'Jan',\n        threads: 12000,\n        instagram: 35000,\n        youtube: Math.round(youtubeEngagement * 0.8)\n      }, {\n        month: 'Feb',\n        threads: 13500,\n        instagram: 37000,\n        youtube: Math.round(youtubeEngagement * 0.85)\n      }, {\n        month: 'Mar',\n        threads: 14200,\n        instagram: 39000,\n        youtube: Math.round(youtubeEngagement * 0.9)\n      }, {\n        month: 'Apr',\n        threads: 15600,\n        instagram: 42300,\n        youtube: Math.round(youtubeEngagement * 0.95)\n      }, {\n        month: 'May',\n        threads: 16800,\n        instagram: 45100,\n        youtube: Math.round(youtubeEngagement * 0.98)\n      }, {\n        month: 'Jun',\n        threads: 18200,\n        instagram: 48500,\n        youtube: Math.round(youtubeEngagement)\n      }];\n\n      // Growth data with real YouTube data\n      const growthData = [{\n        month: 'Jan',\n        threads: 42000,\n        instagram: 62000,\n        youtube: Math.round(currentSubscribers * 0.7)\n      }, {\n        month: 'Feb',\n        threads: 43500,\n        instagram: 63500,\n        youtube: Math.round(currentSubscribers * 0.8)\n      }, {\n        month: 'Mar',\n        threads: 44800,\n        instagram: 65200,\n        youtube: Math.round(currentSubscribers * 0.85)\n      }, {\n        month: 'Apr',\n        threads: 45200,\n        instagram: 67800,\n        youtube: Math.round(currentSubscribers * 0.9)\n      }, {\n        month: 'May',\n        threads: 46800,\n        instagram: 69500,\n        youtube: Math.round(currentSubscribers * 0.95)\n      }, {\n        month: 'Jun',\n        threads: 48500,\n        instagram: 71200,\n        youtube: currentSubscribers\n      }];\n\n      // Audience data with real YouTube data\n      const audienceData = [{\n        name: 'Instagram',\n        value: 71200,\n        color: '#E4405F'\n      }, {\n        name: 'Threads',\n        value: 48500,\n        color: '#000000'\n      }, {\n        name: 'YouTube',\n        value: currentSubscribers,\n        color: '#FF0000'\n      }];\n      return {\n        engagementData,\n        growthData,\n        audienceData\n      };\n    } catch (error) {\n      console.error('Error loading overview data:', error);\n\n      // Fallback to mock data if YouTube service fails\n      return {\n        engagementData: [{\n          month: 'Jan',\n          threads: 12000,\n          instagram: 35000,\n          youtube: 45000\n        }, {\n          month: 'Feb',\n          threads: 13500,\n          instagram: 37000,\n          youtube: 52000\n        }, {\n          month: 'Mar',\n          threads: 14200,\n          instagram: 39000,\n          youtube: 58000\n        }, {\n          month: 'Apr',\n          threads: 15600,\n          instagram: 42300,\n          youtube: 65000\n        }, {\n          month: 'May',\n          threads: 16800,\n          instagram: 45100,\n          youtube: 72000\n        }, {\n          month: 'Jun',\n          threads: 18200,\n          instagram: 48500,\n          youtube: 81000\n        }],\n        growthData: [{\n          month: 'Jan',\n          threads: 42000,\n          instagram: 62000,\n          youtube: 10000\n        }, {\n          month: 'Feb',\n          threads: 43500,\n          instagram: 63500,\n          youtube: 10800\n        }, {\n          month: 'Mar',\n          threads: 44800,\n          instagram: 65200,\n          youtube: 11500\n        }, {\n          month: 'Apr',\n          threads: 45200,\n          instagram: 67800,\n          youtube: 12400\n        }, {\n          month: 'May',\n          threads: 46800,\n          instagram: 69500,\n          youtube: 13200\n        }, {\n          month: 'Jun',\n          threads: 48500,\n          instagram: 71200,\n          youtube: 14100\n        }],\n        audienceData: [{\n          name: 'Instagram',\n          value: 71200,\n          color: '#E4405F'\n        }, {\n          name: 'Threads',\n          value: 48500,\n          color: '#000000'\n        }, {\n          name: 'YouTube',\n          value: 14100,\n          color: '#FF0000'\n        }]\n      };\n    }\n  }\n}\nexport const overviewService = new OverviewService();","map":{"version":3,"names":["youtubeService","OverviewService","getOverviewData","youtubeAnalytics","getAnalytics","youtubeEngagement","recentVideos","reduce","total","video","likeCount","commentCount","length","currentSubscribers","channelStats","subscriberCount","currentViews","viewCount","engagementData","month","threads","instagram","youtube","Math","round","growthData","audienceData","name","value","color","error","console","overviewService"],"sources":["/Users/marcodamm/Desktop/Stats_SocialMedia/src/services/overviewService.ts"],"sourcesContent":["import { youtubeService } from './youtubeService';\n\nexport interface OverviewData {\n  engagementData: Array<{ month: string; threads: number; instagram: number; youtube: number }>;\n  growthData: Array<{ month: string; threads: number; instagram: number; youtube: number }>;\n  audienceData: Array<{ name: string; value: number; color: string }>;\n}\n\nclass OverviewService {\n  async getOverviewData(): Promise<OverviewData> {\n    try {\n      // Get YouTube analytics\n      const youtubeAnalytics = await youtubeService.getAnalytics();\n      \n      // Calculate YouTube engagement (using likes + comments as engagement)\n      const youtubeEngagement = youtubeAnalytics.recentVideos.reduce((total, video) => {\n        return total + video.likeCount + video.commentCount;\n      }, 0) / youtubeAnalytics.recentVideos.length;\n\n      // Generate realistic data based on YouTube stats\n      const currentSubscribers = youtubeAnalytics.channelStats.subscriberCount;\n      const currentViews = youtubeAnalytics.channelStats.viewCount;\n      \n      // Engagement data with real YouTube data\n      const engagementData = [\n        { month: 'Jan', threads: 12000, instagram: 35000, youtube: Math.round(youtubeEngagement * 0.8) },\n        { month: 'Feb', threads: 13500, instagram: 37000, youtube: Math.round(youtubeEngagement * 0.85) },\n        { month: 'Mar', threads: 14200, instagram: 39000, youtube: Math.round(youtubeEngagement * 0.9) },\n        { month: 'Apr', threads: 15600, instagram: 42300, youtube: Math.round(youtubeEngagement * 0.95) },\n        { month: 'May', threads: 16800, instagram: 45100, youtube: Math.round(youtubeEngagement * 0.98) },\n        { month: 'Jun', threads: 18200, instagram: 48500, youtube: Math.round(youtubeEngagement) },\n      ];\n\n      // Growth data with real YouTube data\n      const growthData = [\n        { month: 'Jan', threads: 42000, instagram: 62000, youtube: Math.round(currentSubscribers * 0.7) },\n        { month: 'Feb', threads: 43500, instagram: 63500, youtube: Math.round(currentSubscribers * 0.8) },\n        { month: 'Mar', threads: 44800, instagram: 65200, youtube: Math.round(currentSubscribers * 0.85) },\n        { month: 'Apr', threads: 45200, instagram: 67800, youtube: Math.round(currentSubscribers * 0.9) },\n        { month: 'May', threads: 46800, instagram: 69500, youtube: Math.round(currentSubscribers * 0.95) },\n        { month: 'Jun', threads: 48500, instagram: 71200, youtube: currentSubscribers },\n      ];\n\n      // Audience data with real YouTube data\n      const audienceData = [\n        { name: 'Instagram', value: 71200, color: '#E4405F' },\n        { name: 'Threads', value: 48500, color: '#000000' },\n        { name: 'YouTube', value: currentSubscribers, color: '#FF0000' },\n      ];\n\n      return {\n        engagementData,\n        growthData,\n        audienceData,\n      };\n    } catch (error) {\n      console.error('Error loading overview data:', error);\n      \n      // Fallback to mock data if YouTube service fails\n      return {\n        engagementData: [\n          { month: 'Jan', threads: 12000, instagram: 35000, youtube: 45000 },\n          { month: 'Feb', threads: 13500, instagram: 37000, youtube: 52000 },\n          { month: 'Mar', threads: 14200, instagram: 39000, youtube: 58000 },\n          { month: 'Apr', threads: 15600, instagram: 42300, youtube: 65000 },\n          { month: 'May', threads: 16800, instagram: 45100, youtube: 72000 },\n          { month: 'Jun', threads: 18200, instagram: 48500, youtube: 81000 },\n        ],\n        growthData: [\n          { month: 'Jan', threads: 42000, instagram: 62000, youtube: 10000 },\n          { month: 'Feb', threads: 43500, instagram: 63500, youtube: 10800 },\n          { month: 'Mar', threads: 44800, instagram: 65200, youtube: 11500 },\n          { month: 'Apr', threads: 45200, instagram: 67800, youtube: 12400 },\n          { month: 'May', threads: 46800, instagram: 69500, youtube: 13200 },\n          { month: 'Jun', threads: 48500, instagram: 71200, youtube: 14100 },\n        ],\n        audienceData: [\n          { name: 'Instagram', value: 71200, color: '#E4405F' },\n          { name: 'Threads', value: 48500, color: '#000000' },\n          { name: 'YouTube', value: 14100, color: '#FF0000' },\n        ],\n      };\n    }\n  }\n}\n\nexport const overviewService = new OverviewService(); "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}