{"ast":null,"code":"import { youtubeConfig, buildYouTubeUrl, YOUTUBE_ENDPOINTS } from '../config/youtube';\nclass YouTubeService {\n  async fetchFromAPI(url) {\n    try {\n      const response = await fetch(url);\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      return await response.json();\n    } catch (error) {\n      console.error('YouTube API Error:', error);\n      throw error;\n    }\n  }\n  async getChannelStats() {\n    if (!youtubeConfig.channelId || !youtubeConfig.apiKey) {\n      // Return mock data if no API key is configured\n      return {\n        subscriberCount: 12400,\n        videoCount: 89,\n        viewCount: 1800000,\n        channelName: youtubeConfig.channelName,\n        channelUrl: youtubeConfig.channelUrl,\n        channelId: youtubeConfig.channelId || 'mock-channel-id'\n      };\n    }\n    const url = buildYouTubeUrl(YOUTUBE_ENDPOINTS.channel, {\n      part: 'statistics,snippet',\n      id: youtubeConfig.channelId\n    });\n    const data = await this.fetchFromAPI(url);\n    if (data.items && data.items.length > 0) {\n      const channel = data.items[0];\n      return {\n        subscriberCount: parseInt(channel.statistics.subscriberCount || '0'),\n        videoCount: parseInt(channel.statistics.videoCount || '0'),\n        viewCount: parseInt(channel.statistics.viewCount || '0'),\n        channelName: channel.snippet.title,\n        channelUrl: `https://www.youtube.com/channel/${channel.id}`,\n        channelId: channel.id\n      };\n    }\n    throw new Error('Channel not found');\n  }\n  async getRecentVideos(limit = 10) {\n    if (!youtubeConfig.channelId || !youtubeConfig.apiKey) {\n      // Return mock data\n      return [{\n        id: 'mock-video-1',\n        title: 'Sample Video Title 1',\n        publishedAt: '2024-01-15T10:00:00Z',\n        viewCount: 15000,\n        likeCount: 1200,\n        commentCount: 89,\n        thumbnail: 'https://via.placeholder.com/320x180',\n        duration: 'PT10M30S'\n      }, {\n        id: 'mock-video-2',\n        title: 'Sample Video Title 2',\n        publishedAt: '2024-01-10T14:30:00Z',\n        viewCount: 22000,\n        likeCount: 1800,\n        commentCount: 156,\n        thumbnail: 'https://via.placeholder.com/320x180',\n        duration: 'PT15M45S'\n      }];\n    }\n    const url = buildYouTubeUrl(YOUTUBE_ENDPOINTS.videos, {\n      part: 'snippet',\n      channelId: youtubeConfig.channelId,\n      order: 'date',\n      maxResults: limit.toString(),\n      type: 'video'\n    });\n    const data = await this.fetchFromAPI(url);\n    if (data.items) {\n      const videoIds = data.items.map(item => item.id.videoId).join(',');\n\n      // Get detailed video statistics\n      const statsUrl = buildYouTubeUrl(YOUTUBE_ENDPOINTS.videoStats, {\n        part: 'statistics,contentDetails',\n        id: videoIds\n      });\n      const statsData = await this.fetchFromAPI(statsUrl);\n      const statsMap = new Map();\n      if (statsData.items) {\n        statsData.items.forEach(item => {\n          statsMap.set(item.id, {\n            viewCount: parseInt(item.statistics.viewCount || '0'),\n            likeCount: parseInt(item.statistics.likeCount || '0'),\n            commentCount: parseInt(item.statistics.commentCount || '0'),\n            duration: item.contentDetails.duration\n          });\n        });\n      }\n      return data.items.map(item => {\n        const stats = statsMap.get(item.id.videoId) || {\n          viewCount: 0,\n          likeCount: 0,\n          commentCount: 0,\n          duration: 'PT0S'\n        };\n        return {\n          id: item.id.videoId,\n          title: item.snippet.title,\n          publishedAt: item.snippet.publishedAt,\n          viewCount: stats.viewCount,\n          likeCount: stats.likeCount,\n          commentCount: stats.commentCount,\n          thumbnail: item.snippet.thumbnails.medium.url,\n          duration: stats.duration\n        };\n      });\n    }\n    return [];\n  }\n  async getAnalytics() {\n    const [channelStats, recentVideos] = await Promise.all([this.getChannelStats(), this.getRecentVideos()]);\n\n    // Generate mock monthly data (in a real implementation, you'd fetch this from analytics API)\n    const monthlyViews = [{\n      month: 'Jan',\n      views: 150000\n    }, {\n      month: 'Feb',\n      views: 160000\n    }, {\n      month: 'Mar',\n      views: 170000\n    }, {\n      month: 'Apr',\n      views: 180000\n    }, {\n      month: 'May',\n      views: 190000\n    }, {\n      month: 'Jun',\n      views: 200000\n    }];\n    const monthlySubscribers = [{\n      month: 'Jan',\n      subscribers: 10000\n    }, {\n      month: 'Feb',\n      subscribers: 10800\n    }, {\n      month: 'Mar',\n      subscribers: 11500\n    }, {\n      month: 'Apr',\n      subscribers: 12400\n    }, {\n      month: 'May',\n      subscribers: 13200\n    }, {\n      month: 'Jun',\n      subscribers: 14100\n    }];\n    return {\n      channelStats,\n      recentVideos,\n      monthlyViews,\n      monthlySubscribers\n    };\n  }\n}\nexport const youtubeService = new YouTubeService();","map":{"version":3,"names":["youtubeConfig","buildYouTubeUrl","YOUTUBE_ENDPOINTS","YouTubeService","fetchFromAPI","url","response","fetch","ok","Error","status","json","error","console","getChannelStats","channelId","apiKey","subscriberCount","videoCount","viewCount","channelName","channelUrl","channel","part","id","data","items","length","parseInt","statistics","snippet","title","getRecentVideos","limit","publishedAt","likeCount","commentCount","thumbnail","duration","videos","order","maxResults","toString","type","videoIds","map","item","videoId","join","statsUrl","videoStats","statsData","statsMap","Map","forEach","set","contentDetails","stats","get","thumbnails","medium","getAnalytics","channelStats","recentVideos","Promise","all","monthlyViews","month","views","monthlySubscribers","subscribers","youtubeService"],"sources":["/Users/marcodamm/Desktop/Stats_SocialMedia/src/services/youtubeService.ts"],"sourcesContent":["import { youtubeConfig, buildYouTubeUrl, YOUTUBE_ENDPOINTS, YouTubeConfig } from '../config/youtube';\n\nexport interface YouTubeChannelStats {\n  subscriberCount: number;\n  videoCount: number;\n  viewCount: number;\n  channelName: string;\n  channelUrl: string;\n  channelId: string;\n}\n\nexport interface YouTubeVideo {\n  id: string;\n  title: string;\n  publishedAt: string;\n  viewCount: number;\n  likeCount: number;\n  commentCount: number;\n  thumbnail: string;\n  duration: string;\n}\n\nexport interface YouTubeAnalytics {\n  channelStats: YouTubeChannelStats;\n  recentVideos: YouTubeVideo[];\n  monthlyViews: Array<{ month: string; views: number }>;\n  monthlySubscribers: Array<{ month: string; subscribers: number }>;\n}\n\nclass YouTubeService {\n  private async fetchFromAPI(url: string): Promise<any> {\n    try {\n      const response = await fetch(url);\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      return await response.json();\n    } catch (error) {\n      console.error('YouTube API Error:', error);\n      throw error;\n    }\n  }\n\n  async getChannelStats(): Promise<YouTubeChannelStats> {\n    if (!youtubeConfig.channelId || !youtubeConfig.apiKey) {\n      // Return mock data if no API key is configured\n      return {\n        subscriberCount: 12400,\n        videoCount: 89,\n        viewCount: 1800000,\n        channelName: youtubeConfig.channelName,\n        channelUrl: youtubeConfig.channelUrl,\n        channelId: youtubeConfig.channelId || 'mock-channel-id',\n      };\n    }\n\n    const url = buildYouTubeUrl(YOUTUBE_ENDPOINTS.channel, {\n      part: 'statistics,snippet',\n      id: youtubeConfig.channelId,\n    });\n\n    const data = await this.fetchFromAPI(url);\n    \n    if (data.items && data.items.length > 0) {\n      const channel = data.items[0];\n      return {\n        subscriberCount: parseInt(channel.statistics.subscriberCount || '0'),\n        videoCount: parseInt(channel.statistics.videoCount || '0'),\n        viewCount: parseInt(channel.statistics.viewCount || '0'),\n        channelName: channel.snippet.title,\n        channelUrl: `https://www.youtube.com/channel/${channel.id}`,\n        channelId: channel.id,\n      };\n    }\n\n    throw new Error('Channel not found');\n  }\n\n  async getRecentVideos(limit: number = 10): Promise<YouTubeVideo[]> {\n    if (!youtubeConfig.channelId || !youtubeConfig.apiKey) {\n      // Return mock data\n      return [\n        {\n          id: 'mock-video-1',\n          title: 'Sample Video Title 1',\n          publishedAt: '2024-01-15T10:00:00Z',\n          viewCount: 15000,\n          likeCount: 1200,\n          commentCount: 89,\n          thumbnail: 'https://via.placeholder.com/320x180',\n          duration: 'PT10M30S',\n        },\n        {\n          id: 'mock-video-2',\n          title: 'Sample Video Title 2',\n          publishedAt: '2024-01-10T14:30:00Z',\n          viewCount: 22000,\n          likeCount: 1800,\n          commentCount: 156,\n          thumbnail: 'https://via.placeholder.com/320x180',\n          duration: 'PT15M45S',\n        },\n      ];\n    }\n\n    const url = buildYouTubeUrl(YOUTUBE_ENDPOINTS.videos, {\n      part: 'snippet',\n      channelId: youtubeConfig.channelId,\n      order: 'date',\n      maxResults: limit.toString(),\n      type: 'video',\n    });\n\n    const data = await this.fetchFromAPI(url);\n    \n    if (data.items) {\n      const videoIds = data.items.map((item: any) => item.id.videoId).join(',');\n      \n      // Get detailed video statistics\n      const statsUrl = buildYouTubeUrl(YOUTUBE_ENDPOINTS.videoStats, {\n        part: 'statistics,contentDetails',\n        id: videoIds,\n      });\n\n      const statsData = await this.fetchFromAPI(statsUrl);\n      const statsMap = new Map();\n      \n      if (statsData.items) {\n        statsData.items.forEach((item: any) => {\n          statsMap.set(item.id, {\n            viewCount: parseInt(item.statistics.viewCount || '0'),\n            likeCount: parseInt(item.statistics.likeCount || '0'),\n            commentCount: parseInt(item.statistics.commentCount || '0'),\n            duration: item.contentDetails.duration,\n          });\n        });\n      }\n\n      return data.items.map((item: any) => {\n        const stats = statsMap.get(item.id.videoId) || {\n          viewCount: 0,\n          likeCount: 0,\n          commentCount: 0,\n          duration: 'PT0S',\n        };\n\n        return {\n          id: item.id.videoId,\n          title: item.snippet.title,\n          publishedAt: item.snippet.publishedAt,\n          viewCount: stats.viewCount,\n          likeCount: stats.likeCount,\n          commentCount: stats.commentCount,\n          thumbnail: item.snippet.thumbnails.medium.url,\n          duration: stats.duration,\n        };\n      });\n    }\n\n    return [];\n  }\n\n  async getAnalytics(): Promise<YouTubeAnalytics> {\n    const [channelStats, recentVideos] = await Promise.all([\n      this.getChannelStats(),\n      this.getRecentVideos(),\n    ]);\n\n    // Generate mock monthly data (in a real implementation, you'd fetch this from analytics API)\n    const monthlyViews = [\n      { month: 'Jan', views: 150000 },\n      { month: 'Feb', views: 160000 },\n      { month: 'Mar', views: 170000 },\n      { month: 'Apr', views: 180000 },\n      { month: 'May', views: 190000 },\n      { month: 'Jun', views: 200000 },\n    ];\n\n    const monthlySubscribers = [\n      { month: 'Jan', subscribers: 10000 },\n      { month: 'Feb', subscribers: 10800 },\n      { month: 'Mar', subscribers: 11500 },\n      { month: 'Apr', subscribers: 12400 },\n      { month: 'May', subscribers: 13200 },\n      { month: 'Jun', subscribers: 14100 },\n    ];\n\n    return {\n      channelStats,\n      recentVideos,\n      monthlyViews,\n      monthlySubscribers,\n    };\n  }\n}\n\nexport const youtubeService = new YouTubeService(); "],"mappings":"AAAA,SAASA,aAAa,EAAEC,eAAe,EAAEC,iBAAiB,QAAuB,mBAAmB;AA6BpG,MAAMC,cAAc,CAAC;EACnB,MAAcC,YAAYA,CAACC,GAAW,EAAgB;IACpD,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACF,GAAG,CAAC;MACjC,IAAI,CAACC,QAAQ,CAACE,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,uBAAuBH,QAAQ,CAACI,MAAM,EAAE,CAAC;MAC3D;MACA,OAAO,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;IAC9B,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,oBAAoB,EAAEA,KAAK,CAAC;MAC1C,MAAMA,KAAK;IACb;EACF;EAEA,MAAME,eAAeA,CAAA,EAAiC;IACpD,IAAI,CAACd,aAAa,CAACe,SAAS,IAAI,CAACf,aAAa,CAACgB,MAAM,EAAE;MACrD;MACA,OAAO;QACLC,eAAe,EAAE,KAAK;QACtBC,UAAU,EAAE,EAAE;QACdC,SAAS,EAAE,OAAO;QAClBC,WAAW,EAAEpB,aAAa,CAACoB,WAAW;QACtCC,UAAU,EAAErB,aAAa,CAACqB,UAAU;QACpCN,SAAS,EAAEf,aAAa,CAACe,SAAS,IAAI;MACxC,CAAC;IACH;IAEA,MAAMV,GAAG,GAAGJ,eAAe,CAACC,iBAAiB,CAACoB,OAAO,EAAE;MACrDC,IAAI,EAAE,oBAAoB;MAC1BC,EAAE,EAAExB,aAAa,CAACe;IACpB,CAAC,CAAC;IAEF,MAAMU,IAAI,GAAG,MAAM,IAAI,CAACrB,YAAY,CAACC,GAAG,CAAC;IAEzC,IAAIoB,IAAI,CAACC,KAAK,IAAID,IAAI,CAACC,KAAK,CAACC,MAAM,GAAG,CAAC,EAAE;MACvC,MAAML,OAAO,GAAGG,IAAI,CAACC,KAAK,CAAC,CAAC,CAAC;MAC7B,OAAO;QACLT,eAAe,EAAEW,QAAQ,CAACN,OAAO,CAACO,UAAU,CAACZ,eAAe,IAAI,GAAG,CAAC;QACpEC,UAAU,EAAEU,QAAQ,CAACN,OAAO,CAACO,UAAU,CAACX,UAAU,IAAI,GAAG,CAAC;QAC1DC,SAAS,EAAES,QAAQ,CAACN,OAAO,CAACO,UAAU,CAACV,SAAS,IAAI,GAAG,CAAC;QACxDC,WAAW,EAAEE,OAAO,CAACQ,OAAO,CAACC,KAAK;QAClCV,UAAU,EAAE,mCAAmCC,OAAO,CAACE,EAAE,EAAE;QAC3DT,SAAS,EAAEO,OAAO,CAACE;MACrB,CAAC;IACH;IAEA,MAAM,IAAIf,KAAK,CAAC,mBAAmB,CAAC;EACtC;EAEA,MAAMuB,eAAeA,CAACC,KAAa,GAAG,EAAE,EAA2B;IACjE,IAAI,CAACjC,aAAa,CAACe,SAAS,IAAI,CAACf,aAAa,CAACgB,MAAM,EAAE;MACrD;MACA,OAAO,CACL;QACEQ,EAAE,EAAE,cAAc;QAClBO,KAAK,EAAE,sBAAsB;QAC7BG,WAAW,EAAE,sBAAsB;QACnCf,SAAS,EAAE,KAAK;QAChBgB,SAAS,EAAE,IAAI;QACfC,YAAY,EAAE,EAAE;QAChBC,SAAS,EAAE,qCAAqC;QAChDC,QAAQ,EAAE;MACZ,CAAC,EACD;QACEd,EAAE,EAAE,cAAc;QAClBO,KAAK,EAAE,sBAAsB;QAC7BG,WAAW,EAAE,sBAAsB;QACnCf,SAAS,EAAE,KAAK;QAChBgB,SAAS,EAAE,IAAI;QACfC,YAAY,EAAE,GAAG;QACjBC,SAAS,EAAE,qCAAqC;QAChDC,QAAQ,EAAE;MACZ,CAAC,CACF;IACH;IAEA,MAAMjC,GAAG,GAAGJ,eAAe,CAACC,iBAAiB,CAACqC,MAAM,EAAE;MACpDhB,IAAI,EAAE,SAAS;MACfR,SAAS,EAAEf,aAAa,CAACe,SAAS;MAClCyB,KAAK,EAAE,MAAM;MACbC,UAAU,EAAER,KAAK,CAACS,QAAQ,CAAC,CAAC;MAC5BC,IAAI,EAAE;IACR,CAAC,CAAC;IAEF,MAAMlB,IAAI,GAAG,MAAM,IAAI,CAACrB,YAAY,CAACC,GAAG,CAAC;IAEzC,IAAIoB,IAAI,CAACC,KAAK,EAAE;MACd,MAAMkB,QAAQ,GAAGnB,IAAI,CAACC,KAAK,CAACmB,GAAG,CAAEC,IAAS,IAAKA,IAAI,CAACtB,EAAE,CAACuB,OAAO,CAAC,CAACC,IAAI,CAAC,GAAG,CAAC;;MAEzE;MACA,MAAMC,QAAQ,GAAGhD,eAAe,CAACC,iBAAiB,CAACgD,UAAU,EAAE;QAC7D3B,IAAI,EAAE,2BAA2B;QACjCC,EAAE,EAAEoB;MACN,CAAC,CAAC;MAEF,MAAMO,SAAS,GAAG,MAAM,IAAI,CAAC/C,YAAY,CAAC6C,QAAQ,CAAC;MACnD,MAAMG,QAAQ,GAAG,IAAIC,GAAG,CAAC,CAAC;MAE1B,IAAIF,SAAS,CAACzB,KAAK,EAAE;QACnByB,SAAS,CAACzB,KAAK,CAAC4B,OAAO,CAAER,IAAS,IAAK;UACrCM,QAAQ,CAACG,GAAG,CAACT,IAAI,CAACtB,EAAE,EAAE;YACpBL,SAAS,EAAES,QAAQ,CAACkB,IAAI,CAACjB,UAAU,CAACV,SAAS,IAAI,GAAG,CAAC;YACrDgB,SAAS,EAAEP,QAAQ,CAACkB,IAAI,CAACjB,UAAU,CAACM,SAAS,IAAI,GAAG,CAAC;YACrDC,YAAY,EAAER,QAAQ,CAACkB,IAAI,CAACjB,UAAU,CAACO,YAAY,IAAI,GAAG,CAAC;YAC3DE,QAAQ,EAAEQ,IAAI,CAACU,cAAc,CAAClB;UAChC,CAAC,CAAC;QACJ,CAAC,CAAC;MACJ;MAEA,OAAOb,IAAI,CAACC,KAAK,CAACmB,GAAG,CAAEC,IAAS,IAAK;QACnC,MAAMW,KAAK,GAAGL,QAAQ,CAACM,GAAG,CAACZ,IAAI,CAACtB,EAAE,CAACuB,OAAO,CAAC,IAAI;UAC7C5B,SAAS,EAAE,CAAC;UACZgB,SAAS,EAAE,CAAC;UACZC,YAAY,EAAE,CAAC;UACfE,QAAQ,EAAE;QACZ,CAAC;QAED,OAAO;UACLd,EAAE,EAAEsB,IAAI,CAACtB,EAAE,CAACuB,OAAO;UACnBhB,KAAK,EAAEe,IAAI,CAAChB,OAAO,CAACC,KAAK;UACzBG,WAAW,EAAEY,IAAI,CAAChB,OAAO,CAACI,WAAW;UACrCf,SAAS,EAAEsC,KAAK,CAACtC,SAAS;UAC1BgB,SAAS,EAAEsB,KAAK,CAACtB,SAAS;UAC1BC,YAAY,EAAEqB,KAAK,CAACrB,YAAY;UAChCC,SAAS,EAAES,IAAI,CAAChB,OAAO,CAAC6B,UAAU,CAACC,MAAM,CAACvD,GAAG;UAC7CiC,QAAQ,EAAEmB,KAAK,CAACnB;QAClB,CAAC;MACH,CAAC,CAAC;IACJ;IAEA,OAAO,EAAE;EACX;EAEA,MAAMuB,YAAYA,CAAA,EAA8B;IAC9C,MAAM,CAACC,YAAY,EAAEC,YAAY,CAAC,GAAG,MAAMC,OAAO,CAACC,GAAG,CAAC,CACrD,IAAI,CAACnD,eAAe,CAAC,CAAC,EACtB,IAAI,CAACkB,eAAe,CAAC,CAAC,CACvB,CAAC;;IAEF;IACA,MAAMkC,YAAY,GAAG,CACnB;MAAEC,KAAK,EAAE,KAAK;MAAEC,KAAK,EAAE;IAAO,CAAC,EAC/B;MAAED,KAAK,EAAE,KAAK;MAAEC,KAAK,EAAE;IAAO,CAAC,EAC/B;MAAED,KAAK,EAAE,KAAK;MAAEC,KAAK,EAAE;IAAO,CAAC,EAC/B;MAAED,KAAK,EAAE,KAAK;MAAEC,KAAK,EAAE;IAAO,CAAC,EAC/B;MAAED,KAAK,EAAE,KAAK;MAAEC,KAAK,EAAE;IAAO,CAAC,EAC/B;MAAED,KAAK,EAAE,KAAK;MAAEC,KAAK,EAAE;IAAO,CAAC,CAChC;IAED,MAAMC,kBAAkB,GAAG,CACzB;MAAEF,KAAK,EAAE,KAAK;MAAEG,WAAW,EAAE;IAAM,CAAC,EACpC;MAAEH,KAAK,EAAE,KAAK;MAAEG,WAAW,EAAE;IAAM,CAAC,EACpC;MAAEH,KAAK,EAAE,KAAK;MAAEG,WAAW,EAAE;IAAM,CAAC,EACpC;MAAEH,KAAK,EAAE,KAAK;MAAEG,WAAW,EAAE;IAAM,CAAC,EACpC;MAAEH,KAAK,EAAE,KAAK;MAAEG,WAAW,EAAE;IAAM,CAAC,EACpC;MAAEH,KAAK,EAAE,KAAK;MAAEG,WAAW,EAAE;IAAM,CAAC,CACrC;IAED,OAAO;MACLR,YAAY;MACZC,YAAY;MACZG,YAAY;MACZG;IACF,CAAC;EACH;AACF;AAEA,OAAO,MAAME,cAAc,GAAG,IAAIpE,cAAc,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}