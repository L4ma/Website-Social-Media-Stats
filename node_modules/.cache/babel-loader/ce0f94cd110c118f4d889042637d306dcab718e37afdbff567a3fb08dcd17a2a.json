{"ast":null,"code":"import{youtubeService}from'./youtubeService';class OverviewService{async getOverviewData(){try{// Get YouTube analytics\nconst youtubeAnalytics=await youtubeService.getAnalytics();// Calculate YouTube engagement (using likes + comments as engagement)\nconst youtubeEngagement=youtubeAnalytics.recentVideos.reduce((total,video)=>{return total+video.likeCount+video.commentCount;},0)/youtubeAnalytics.recentVideos.length;// Generate realistic data based on YouTube stats\nconst currentSubscribers=youtubeAnalytics.channelStats.subscriberCount;// Get current date and generate last 6 months\nconst now=new Date();const months=[];for(let i=5;i>=0;i--){const date=new Date(now.getFullYear(),now.getMonth()-i,1);months.push(date.toLocaleDateString('en-US',{month:'short'}));}// Calculate progression factors for realistic growth\nconst progressionFactors=[0.7,0.8,0.85,0.9,0.95,1.0];// Engagement data with real YouTube data and actual months\nconst engagementData=months.map((month,index)=>({month,threads:Math.round(12000+index*1200),instagram:Math.round(35000+index*3000),youtube:Math.round(youtubeEngagement*progressionFactors[index])}));// Growth data with real YouTube data and actual months\nconst growthData=months.map((month,index)=>({month,threads:Math.round(42000+index*1300),instagram:Math.round(62000+index*1800),youtube:Math.round(currentSubscribers*progressionFactors[index])}));// Audience data with real YouTube data\nconst audienceData=[{name:'Instagram',value:71200,color:'#E4405F'},{name:'Threads',value:48500,color:'#000000'},{name:'YouTube',value:currentSubscribers,color:'#FF0000'}];return{engagementData,growthData,audienceData};}catch(error){console.error('Error loading overview data:',error);// Fallback to mock data if YouTube service fails\nconst now=new Date();const months=[];for(let i=5;i>=0;i--){const date=new Date(now.getFullYear(),now.getMonth()-i,1);months.push(date.toLocaleDateString('en-US',{month:'short'}));}return{engagementData:months.map((month,index)=>({month,threads:12000+index*1200,instagram:35000+index*3000,youtube:45000+index*6000})),growthData:months.map((month,index)=>({month,threads:42000+index*1300,instagram:62000+index*1800,youtube:10000+index*800})),audienceData:[{name:'Instagram',value:71200,color:'#E4405F'},{name:'Threads',value:48500,color:'#000000'},{name:'YouTube',value:14100,color:'#FF0000'}]};}}}export const overviewService=new OverviewService();","map":{"version":3,"names":["youtubeService","OverviewService","getOverviewData","youtubeAnalytics","getAnalytics","youtubeEngagement","recentVideos","reduce","total","video","likeCount","commentCount","length","currentSubscribers","channelStats","subscriberCount","now","Date","months","i","date","getFullYear","getMonth","push","toLocaleDateString","month","progressionFactors","engagementData","map","index","threads","Math","round","instagram","youtube","growthData","audienceData","name","value","color","error","console","overviewService"],"sources":["/Users/marcodamm/Desktop/Stats_SocialMedia/src/services/overviewService.ts"],"sourcesContent":["import { youtubeService } from './youtubeService';\n\nexport interface OverviewData {\n  engagementData: Array<{ month: string; threads: number; instagram: number; youtube: number }>;\n  growthData: Array<{ month: string; threads: number; instagram: number; youtube: number }>;\n  audienceData: Array<{ name: string; value: number; color: string }>;\n}\n\nclass OverviewService {\n  async getOverviewData(): Promise<OverviewData> {\n    try {\n      // Get YouTube analytics\n      const youtubeAnalytics = await youtubeService.getAnalytics();\n      \n      // Calculate YouTube engagement (using likes + comments as engagement)\n      const youtubeEngagement = youtubeAnalytics.recentVideos.reduce((total, video) => {\n        return total + video.likeCount + video.commentCount;\n      }, 0) / youtubeAnalytics.recentVideos.length;\n\n      // Generate realistic data based on YouTube stats\n      const currentSubscribers = youtubeAnalytics.channelStats.subscriberCount;\n      \n      // Get current date and generate last 6 months\n      const now = new Date();\n      const months = [];\n      for (let i = 5; i >= 0; i--) {\n        const date = new Date(now.getFullYear(), now.getMonth() - i, 1);\n        months.push(date.toLocaleDateString('en-US', { month: 'short' }));\n      }\n      \n      // Calculate progression factors for realistic growth\n      const progressionFactors = [0.7, 0.8, 0.85, 0.9, 0.95, 1.0];\n      \n      // Engagement data with real YouTube data and actual months\n      const engagementData = months.map((month, index) => ({\n        month,\n        threads: Math.round(12000 + (index * 1200)),\n        instagram: Math.round(35000 + (index * 3000)),\n        youtube: Math.round(youtubeEngagement * progressionFactors[index])\n      }));\n\n      // Growth data with real YouTube data and actual months\n      const growthData = months.map((month, index) => ({\n        month,\n        threads: Math.round(42000 + (index * 1300)),\n        instagram: Math.round(62000 + (index * 1800)),\n        youtube: Math.round(currentSubscribers * progressionFactors[index])\n      }));\n\n      // Audience data with real YouTube data\n      const audienceData = [\n        { name: 'Instagram', value: 71200, color: '#E4405F' },\n        { name: 'Threads', value: 48500, color: '#000000' },\n        { name: 'YouTube', value: currentSubscribers, color: '#FF0000' },\n      ];\n\n      return {\n        engagementData,\n        growthData,\n        audienceData,\n      };\n    } catch (error) {\n      console.error('Error loading overview data:', error);\n      \n      // Fallback to mock data if YouTube service fails\n      const now = new Date();\n      const months = [];\n      for (let i = 5; i >= 0; i--) {\n        const date = new Date(now.getFullYear(), now.getMonth() - i, 1);\n        months.push(date.toLocaleDateString('en-US', { month: 'short' }));\n      }\n      \n      return {\n        engagementData: months.map((month, index) => ({\n          month,\n          threads: 12000 + (index * 1200),\n          instagram: 35000 + (index * 3000),\n          youtube: 45000 + (index * 6000),\n        })),\n        growthData: months.map((month, index) => ({\n          month,\n          threads: 42000 + (index * 1300),\n          instagram: 62000 + (index * 1800),\n          youtube: 10000 + (index * 800),\n        })),\n        audienceData: [\n          { name: 'Instagram', value: 71200, color: '#E4405F' },\n          { name: 'Threads', value: 48500, color: '#000000' },\n          { name: 'YouTube', value: 14100, color: '#FF0000' },\n        ],\n      };\n    }\n  }\n}\n\nexport const overviewService = new OverviewService(); "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}