{"ast":null,"code":"class InstagramService {\n  constructor() {\n    this.config = null;\n    this.CLIENT_ID = 'your_instagram_app_id';\n    // You'll need to create an Instagram app\n    this.REDIRECT_URI = 'http://localhost:3000/instagram-callback';\n    this.INSTAGRAM_API_BASE = 'https://graph.instagram.com/v12.0';\n    // Load saved config from localStorage\n    const savedConfig = localStorage.getItem('instagramConfig');\n    if (savedConfig) {\n      this.config = JSON.parse(savedConfig);\n    }\n  }\n\n  // OAuth flow methods\n  initiateOAuth() {\n    const authUrl = `https://api.instagram.com/oauth/authorize?client_id=${this.CLIENT_ID}&redirect_uri=${encodeURIComponent(this.REDIRECT_URI)}&scope=user_profile,user_media&response_type=code`;\n    window.location.href = authUrl;\n  }\n  async handleOAuthCallback(code) {\n    try {\n      // In a real implementation, you'd exchange the code for an access token\n      // This would typically be done on your backend server\n      const response = await fetch('/api/instagram/exchange-code', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          code\n        })\n      });\n      if (!response.ok) {\n        throw new Error('Failed to exchange code for token');\n      }\n      const tokenData = await response.json();\n      this.config = {\n        accessToken: tokenData.access_token,\n        userId: tokenData.user_id,\n        expiresAt: Date.now() + tokenData.expires_in * 1000\n      };\n      localStorage.setItem('instagramConfig', JSON.stringify(this.config));\n      return true;\n    } catch (error) {\n      console.error('OAuth callback error:', error);\n      return false;\n    }\n  }\n\n  // API methods\n  async makeApiCall(endpoint) {\n    var _this$config;\n    if (!((_this$config = this.config) !== null && _this$config !== void 0 && _this$config.accessToken)) {\n      throw new Error('No access token available');\n    }\n    const url = `${this.INSTAGRAM_API_BASE}${endpoint}?access_token=${this.config.accessToken}`;\n    const response = await fetch(url);\n    if (!response.ok) {\n      throw new Error(`Instagram API error: ${response.status}`);\n    }\n    return response.json();\n  }\n  async getUserProfile() {\n    const data = await this.makeApiCall('/me?fields=id,username,account_type,media_count,follows_count,followers_count,profile_picture_url,biography,website');\n    return data;\n  }\n  async getRecentMedia(limit = 10) {\n    const data = await this.makeApiCall(`/me/media?fields=id,caption,media_type,media_url,thumbnail_url,permalink,timestamp,like_count,comments_count,owner&limit=${limit}`);\n    return data.data;\n  }\n  async getMediaInsights(mediaId) {\n    const data = await this.makeApiCall(`/${mediaId}/insights?metric=impressions,reach,profile_views,follower_count`);\n    return data.data;\n  }\n\n  // Simulated data for demo purposes\n  async getSimulatedData() {\n    const user = {\n      id: 'demo_user_id',\n      username: 'demo_instagram_user',\n      account_type: 'PERSONAL',\n      media_count: 156,\n      follows_count: 890,\n      followers_count: 67800,\n      profile_picture_url: 'https://via.placeholder.com/150',\n      biography: 'Digital creator sharing life, tech, and creativity',\n      website: 'https://example.com'\n    };\n    const recentMedia = [{\n      id: '1',\n      caption: 'Beautiful sunset at the beach today! ðŸŒ… #sunset #beach #photography',\n      media_type: 'IMAGE',\n      media_url: 'https://via.placeholder.com/600x600',\n      permalink: 'https://instagram.com/p/demo1',\n      timestamp: new Date(Date.now() - 2 * 60 * 60 * 1000).toISOString(),\n      like_count: 1240,\n      comments_count: 89,\n      owner: {\n        id: user.id,\n        username: user.username\n      }\n    }, {\n      id: '2',\n      caption: 'New project launch! Excited to share what I\\'ve been working on ðŸš€ #launch #tech #project',\n      media_type: 'CAROUSEL_ALBUM',\n      media_url: 'https://via.placeholder.com/600x600',\n      permalink: 'https://instagram.com/p/demo2',\n      timestamp: new Date(Date.now() - 6 * 60 * 60 * 1000).toISOString(),\n      like_count: 890,\n      comments_count: 67,\n      owner: {\n        id: user.id,\n        username: user.username\n      }\n    }, {\n      id: '3',\n      caption: 'Behind the scenes of my latest video ðŸ“¹ #bts #content #creator',\n      media_type: 'VIDEO',\n      media_url: 'https://via.placeholder.com/600x600',\n      thumbnail_url: 'https://via.placeholder.com/600x600',\n      permalink: 'https://instagram.com/p/demo3',\n      timestamp: new Date(Date.now() - 12 * 60 * 60 * 1000).toISOString(),\n      like_count: 1567,\n      comments_count: 234,\n      owner: {\n        id: user.id,\n        username: user.username\n      }\n    }];\n\n    // Generate daily stats for the last 30 days\n    const dailyStats = [];\n    for (let i = 29; i >= 0; i--) {\n      const date = new Date();\n      date.setDate(date.getDate() - i);\n      const dayFactor = i / 30;\n      const followers = Math.round(user.followers_count * (0.85 + dayFactor * 0.15));\n      const engagement = Math.round((1240 + 890 + 1567) * (0.8 + dayFactor * 0.2) / 30);\n      dailyStats.push({\n        date: date.toISOString().split('T')[0],\n        followers,\n        engagement\n      });\n    }\n\n    // Generate weekly stats for the last 12 weeks\n    const weeklyStats = [];\n    for (let i = 11; i >= 0; i--) {\n      const weekFactor = i / 12;\n      const followers = Math.round(user.followers_count * (0.8 + weekFactor * 0.2));\n      const engagement = Math.round((1240 + 890 + 1567) * (0.75 + weekFactor * 0.25) / 12);\n      weeklyStats.push({\n        week: `Week ${12 - i}`,\n        followers,\n        engagement\n      });\n    }\n    return {\n      user,\n      recentMedia,\n      dailyStats,\n      weeklyStats\n    };\n  }\n  async getAnalytics() {\n    if (this.isConnected()) {\n      try {\n        const [user, recentMedia] = await Promise.all([this.getUserProfile(), this.getRecentMedia()]);\n\n        // For now, return simulated daily/weekly stats\n        // In a real implementation, you'd fetch historical data from Instagram's API\n        const {\n          dailyStats,\n          weeklyStats\n        } = await this.getSimulatedData();\n        return {\n          user,\n          recentMedia,\n          dailyStats,\n          weeklyStats\n        };\n      } catch (error) {\n        console.error('Error fetching Instagram data:', error);\n        // Fallback to simulated data\n        return this.getSimulatedData();\n      }\n    } else {\n      // Return simulated data when not connected\n      return this.getSimulatedData();\n    }\n  }\n  updateConfig(newConfig) {\n    this.config = newConfig;\n    localStorage.setItem('instagramConfig', JSON.stringify(newConfig));\n  }\n  getConfig() {\n    return this.config;\n  }\n  isConnected() {\n    var _this$config2;\n    return !!((_this$config2 = this.config) !== null && _this$config2 !== void 0 && _this$config2.accessToken) && (this.config.expiresAt || 0) > Date.now();\n  }\n  disconnect() {\n    this.config = null;\n    localStorage.removeItem('instagramConfig');\n  }\n\n  // Data collection for historical tracking\n  async collectDailyData() {\n    if (!this.isConnected()) return;\n    try {\n      const user = await this.getUserProfile();\n      const today = new Date().toISOString().split('T')[0];\n      const existingData = localStorage.getItem('instagram_historical_data');\n      const historicalData = existingData ? JSON.parse(existingData) : {\n        dailyStats: []\n      };\n      const todayExists = historicalData.dailyStats.some(stat => stat.date === today);\n      if (!todayExists) {\n        historicalData.dailyStats.push({\n          date: today,\n          followers: user.followers_count,\n          engagement: 0 // Would need to calculate from recent posts\n        });\n        localStorage.setItem('instagram_historical_data', JSON.stringify(historicalData));\n        localStorage.setItem('instagram_daily_collection', new Date().toISOString());\n      }\n    } catch (error) {\n      console.error('Error collecting Instagram data:', error);\n    }\n  }\n}\nexport const instagramService = new InstagramService();","map":{"version":3,"names":["InstagramService","constructor","config","CLIENT_ID","REDIRECT_URI","INSTAGRAM_API_BASE","savedConfig","localStorage","getItem","JSON","parse","initiateOAuth","authUrl","encodeURIComponent","window","location","href","handleOAuthCallback","code","response","fetch","method","headers","body","stringify","ok","Error","tokenData","json","accessToken","access_token","userId","user_id","expiresAt","Date","now","expires_in","setItem","error","console","makeApiCall","endpoint","_this$config","url","status","getUserProfile","data","getRecentMedia","limit","getMediaInsights","mediaId","getSimulatedData","user","id","username","account_type","media_count","follows_count","followers_count","profile_picture_url","biography","website","recentMedia","caption","media_type","media_url","permalink","timestamp","toISOString","like_count","comments_count","owner","thumbnail_url","dailyStats","i","date","setDate","getDate","dayFactor","followers","Math","round","engagement","push","split","weeklyStats","weekFactor","week","getAnalytics","isConnected","Promise","all","updateConfig","newConfig","getConfig","_this$config2","disconnect","removeItem","collectDailyData","today","existingData","historicalData","todayExists","some","stat","instagramService"],"sources":["/Users/marcodamm/Desktop/Stats_SocialMedia/src/services/instagramService.ts"],"sourcesContent":["export interface InstagramConfig {\n  accessToken?: string;\n  userId?: string;\n  username?: string;\n  expiresAt?: number;\n}\n\nexport interface InstagramUser {\n  id: string;\n  username: string;\n  account_type: string;\n  media_count: number;\n  follows_count: number;\n  followers_count: number;\n  profile_picture_url: string;\n  biography: string;\n  website: string;\n}\n\nexport interface InstagramMedia {\n  id: string;\n  caption: string;\n  media_type: 'IMAGE' | 'VIDEO' | 'CAROUSEL_ALBUM';\n  media_url: string;\n  thumbnail_url?: string;\n  permalink: string;\n  timestamp: string;\n  like_count: number;\n  comments_count: number;\n  owner: {\n    id: string;\n    username: string;\n  };\n}\n\nexport interface InstagramAnalytics {\n  user: InstagramUser;\n  recentMedia: InstagramMedia[];\n  dailyStats: Array<{ date: string; followers: number; engagement: number }>;\n  weeklyStats: Array<{ week: string; followers: number; engagement: number }>;\n}\n\nclass InstagramService {\n  private config: InstagramConfig | null = null;\n  private readonly CLIENT_ID = 'your_instagram_app_id'; // You'll need to create an Instagram app\n  private readonly REDIRECT_URI = 'http://localhost:3000/instagram-callback';\n  private readonly INSTAGRAM_API_BASE = 'https://graph.instagram.com/v12.0';\n\n  constructor() {\n    // Load saved config from localStorage\n    const savedConfig = localStorage.getItem('instagramConfig');\n    if (savedConfig) {\n      this.config = JSON.parse(savedConfig);\n    }\n  }\n\n  // OAuth flow methods\n  initiateOAuth(): void {\n    const authUrl = `https://api.instagram.com/oauth/authorize?client_id=${this.CLIENT_ID}&redirect_uri=${encodeURIComponent(this.REDIRECT_URI)}&scope=user_profile,user_media&response_type=code`;\n    window.location.href = authUrl;\n  }\n\n  async handleOAuthCallback(code: string): Promise<boolean> {\n    try {\n      // In a real implementation, you'd exchange the code for an access token\n      // This would typically be done on your backend server\n      const response = await fetch('/api/instagram/exchange-code', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ code }),\n      });\n\n      if (!response.ok) {\n        throw new Error('Failed to exchange code for token');\n      }\n\n      const tokenData = await response.json();\n      \n      this.config = {\n        accessToken: tokenData.access_token,\n        userId: tokenData.user_id,\n        expiresAt: Date.now() + (tokenData.expires_in * 1000),\n      };\n\n      localStorage.setItem('instagramConfig', JSON.stringify(this.config));\n      return true;\n    } catch (error) {\n      console.error('OAuth callback error:', error);\n      return false;\n    }\n  }\n\n  // API methods\n  private async makeApiCall(endpoint: string): Promise<any> {\n    if (!this.config?.accessToken) {\n      throw new Error('No access token available');\n    }\n\n    const url = `${this.INSTAGRAM_API_BASE}${endpoint}?access_token=${this.config.accessToken}`;\n    const response = await fetch(url);\n    \n    if (!response.ok) {\n      throw new Error(`Instagram API error: ${response.status}`);\n    }\n\n    return response.json();\n  }\n\n  async getUserProfile(): Promise<InstagramUser> {\n    const data = await this.makeApiCall('/me?fields=id,username,account_type,media_count,follows_count,followers_count,profile_picture_url,biography,website');\n    return data;\n  }\n\n  async getRecentMedia(limit: number = 10): Promise<InstagramMedia[]> {\n    const data = await this.makeApiCall(`/me/media?fields=id,caption,media_type,media_url,thumbnail_url,permalink,timestamp,like_count,comments_count,owner&limit=${limit}`);\n    return data.data;\n  }\n\n  async getMediaInsights(mediaId: string): Promise<any> {\n    const data = await this.makeApiCall(`/${mediaId}/insights?metric=impressions,reach,profile_views,follower_count`);\n    return data.data;\n  }\n\n  // Simulated data for demo purposes\n  async getSimulatedData(): Promise<InstagramAnalytics> {\n    const user: InstagramUser = {\n      id: 'demo_user_id',\n      username: 'demo_instagram_user',\n      account_type: 'PERSONAL',\n      media_count: 156,\n      follows_count: 890,\n      followers_count: 67800,\n      profile_picture_url: 'https://via.placeholder.com/150',\n      biography: 'Digital creator sharing life, tech, and creativity',\n      website: 'https://example.com',\n    };\n\n    const recentMedia: InstagramMedia[] = [\n      {\n        id: '1',\n        caption: 'Beautiful sunset at the beach today! ðŸŒ… #sunset #beach #photography',\n        media_type: 'IMAGE',\n        media_url: 'https://via.placeholder.com/600x600',\n        permalink: 'https://instagram.com/p/demo1',\n        timestamp: new Date(Date.now() - 2 * 60 * 60 * 1000).toISOString(),\n        like_count: 1240,\n        comments_count: 89,\n        owner: { id: user.id, username: user.username },\n      },\n      {\n        id: '2',\n        caption: 'New project launch! Excited to share what I\\'ve been working on ðŸš€ #launch #tech #project',\n        media_type: 'CAROUSEL_ALBUM',\n        media_url: 'https://via.placeholder.com/600x600',\n        permalink: 'https://instagram.com/p/demo2',\n        timestamp: new Date(Date.now() - 6 * 60 * 60 * 1000).toISOString(),\n        like_count: 890,\n        comments_count: 67,\n        owner: { id: user.id, username: user.username },\n      },\n      {\n        id: '3',\n        caption: 'Behind the scenes of my latest video ðŸ“¹ #bts #content #creator',\n        media_type: 'VIDEO',\n        media_url: 'https://via.placeholder.com/600x600',\n        thumbnail_url: 'https://via.placeholder.com/600x600',\n        permalink: 'https://instagram.com/p/demo3',\n        timestamp: new Date(Date.now() - 12 * 60 * 60 * 1000).toISOString(),\n        like_count: 1567,\n        comments_count: 234,\n        owner: { id: user.id, username: user.username },\n      },\n    ];\n\n    // Generate daily stats for the last 30 days\n    const dailyStats = [];\n    for (let i = 29; i >= 0; i--) {\n      const date = new Date();\n      date.setDate(date.getDate() - i);\n      \n      const dayFactor = i / 30;\n      const followers = Math.round(user.followers_count * (0.85 + (dayFactor * 0.15)));\n      const engagement = Math.round((1240 + 890 + 1567) * (0.8 + (dayFactor * 0.2)) / 30);\n      \n      dailyStats.push({\n        date: date.toISOString().split('T')[0],\n        followers,\n        engagement,\n      });\n    }\n\n    // Generate weekly stats for the last 12 weeks\n    const weeklyStats = [];\n    for (let i = 11; i >= 0; i--) {\n      const weekFactor = i / 12;\n      const followers = Math.round(user.followers_count * (0.8 + (weekFactor * 0.2)));\n      const engagement = Math.round((1240 + 890 + 1567) * (0.75 + (weekFactor * 0.25)) / 12);\n      \n      weeklyStats.push({\n        week: `Week ${12 - i}`,\n        followers,\n        engagement,\n      });\n    }\n\n    return {\n      user,\n      recentMedia,\n      dailyStats,\n      weeklyStats,\n    };\n  }\n\n  async getAnalytics(): Promise<InstagramAnalytics> {\n    if (this.isConnected()) {\n      try {\n        const [user, recentMedia] = await Promise.all([\n          this.getUserProfile(),\n          this.getRecentMedia(),\n        ]);\n\n        // For now, return simulated daily/weekly stats\n        // In a real implementation, you'd fetch historical data from Instagram's API\n        const { dailyStats, weeklyStats } = await this.getSimulatedData();\n\n        return {\n          user,\n          recentMedia,\n          dailyStats,\n          weeklyStats,\n        };\n      } catch (error) {\n        console.error('Error fetching Instagram data:', error);\n        // Fallback to simulated data\n        return this.getSimulatedData();\n      }\n    } else {\n      // Return simulated data when not connected\n      return this.getSimulatedData();\n    }\n  }\n\n  updateConfig(newConfig: InstagramConfig) {\n    this.config = newConfig;\n    localStorage.setItem('instagramConfig', JSON.stringify(newConfig));\n  }\n\n  getConfig(): InstagramConfig | null {\n    return this.config;\n  }\n\n  isConnected(): boolean {\n    return !!this.config?.accessToken && (this.config.expiresAt || 0) > Date.now();\n  }\n\n  disconnect(): void {\n    this.config = null;\n    localStorage.removeItem('instagramConfig');\n  }\n\n  // Data collection for historical tracking\n  async collectDailyData(): Promise<void> {\n    if (!this.isConnected()) return;\n\n    try {\n      const user = await this.getUserProfile();\n      const today = new Date().toISOString().split('T')[0];\n      \n      const existingData = localStorage.getItem('instagram_historical_data');\n      const historicalData = existingData ? JSON.parse(existingData) : { dailyStats: [] };\n      \n      const todayExists = historicalData.dailyStats.some((stat: any) => stat.date === today);\n      \n      if (!todayExists) {\n        historicalData.dailyStats.push({\n          date: today,\n          followers: user.followers_count,\n          engagement: 0, // Would need to calculate from recent posts\n        });\n        \n        localStorage.setItem('instagram_historical_data', JSON.stringify(historicalData));\n        localStorage.setItem('instagram_daily_collection', new Date().toISOString());\n      }\n    } catch (error) {\n      console.error('Error collecting Instagram data:', error);\n    }\n  }\n}\n\nexport const instagramService = new InstagramService(); "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}