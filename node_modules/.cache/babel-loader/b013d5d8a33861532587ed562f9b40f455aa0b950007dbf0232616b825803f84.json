{"ast":null,"code":"import { buildYouTubeUrl, YOUTUBE_ENDPOINTS } from '../config/youtube';\nclass YouTubeService {\n  constructor() {\n    this.config = void 0;\n    this.lastApiCall = 0;\n    this.apiCallCount = 0;\n    this.MAX_DAILY_CALLS = 48;\n    // 2 calls per hour max (24 * 2)\n    this.MIN_CALL_INTERVAL = 1800000;\n    // 30 minutes between calls (2 per hour)\n    this.cachedData = {\n      lastCached: 0\n    };\n    // Load saved configuration from localStorage\n    const savedConfig = localStorage.getItem('youtubeConfig');\n    console.log('Loading YouTube config from localStorage:', savedConfig);\n    if (savedConfig) {\n      const parsed = JSON.parse(savedConfig);\n      this.config = {\n        channelId: parsed.channelId || '',\n        apiKey: parsed.apiKey || '',\n        channelName: parsed.channelName || '',\n        channelUrl: parsed.channelUrl || ''\n      };\n      console.log('Loaded config:', this.config);\n    } else {\n      this.config = {\n        channelId: '',\n        apiKey: '',\n        channelName: '',\n        channelUrl: ''\n      };\n      console.log('No saved config, using defaults');\n    }\n\n    // Load API call tracking from localStorage\n    this.loadApiCallTracking();\n\n    // Load cached data from localStorage\n    this.loadCachedData();\n  }\n  loadApiCallTracking() {\n    const today = new Date().toDateString();\n    const savedTracking = localStorage.getItem('youtubeApiTracking');\n    if (savedTracking) {\n      const tracking = JSON.parse(savedTracking);\n      if (tracking.date === today) {\n        this.apiCallCount = tracking.count || 0;\n        this.lastApiCall = tracking.lastCall || 0;\n      } else {\n        // Reset for new day\n        this.apiCallCount = 0;\n        this.lastApiCall = 0;\n      }\n    }\n  }\n  saveApiCallTracking() {\n    const tracking = {\n      date: new Date().toDateString(),\n      count: this.apiCallCount,\n      lastCall: this.lastApiCall\n    };\n    localStorage.setItem('youtubeApiTracking', JSON.stringify(tracking));\n  }\n  loadCachedData() {\n    const savedCachedData = localStorage.getItem('youtubeCachedData');\n    if (savedCachedData) {\n      this.cachedData = JSON.parse(savedCachedData);\n    }\n  }\n  saveCachedData() {\n    localStorage.setItem('youtubeCachedData', JSON.stringify(this.cachedData));\n  }\n  canMakeApiCall() {\n    const now = Date.now();\n\n    // Check if we've exceeded daily limit\n    if (this.apiCallCount >= this.MAX_DAILY_CALLS) {\n      console.log('Daily API call limit reached');\n      return false;\n    }\n\n    // Check if enough time has passed since last call\n    if (now - this.lastApiCall < this.MIN_CALL_INTERVAL) {\n      console.log('API call rate limit: waiting for cooldown');\n      return false;\n    }\n    return true;\n  }\n  recordApiCall() {\n    this.apiCallCount++;\n    this.lastApiCall = Date.now();\n    this.saveApiCallTracking();\n    console.log(`API call recorded. Daily count: ${this.apiCallCount}/${this.MAX_DAILY_CALLS}`);\n  }\n  updateConfig(newConfig) {\n    this.config = newConfig;\n    localStorage.setItem('youtubeConfig', JSON.stringify(newConfig));\n  }\n  getConfig() {\n    return this.config;\n  }\n  getApiCallStatus() {\n    // Check if we have valid config\n    const hasValidConfig = this.config.apiKey && this.config.channelId;\n\n    // If no valid config, show as unlimited since we're using demo data\n    if (!hasValidConfig) {\n      return {\n        dailyCalls: 0,\n        maxCalls: this.MAX_DAILY_CALLS,\n        remainingCalls: this.MAX_DAILY_CALLS,\n        lastCall: this.lastApiCall,\n        canMakeCall: true,\n        usingDemoData: true,\n        reason: 'No API configuration'\n      };\n    }\n\n    // Check if we're actually hitting quota limits\n    const isQuotaExceeded = this.apiCallCount >= this.MAX_DAILY_CALLS;\n    const isRateLimited = Date.now() - this.lastApiCall < this.MIN_CALL_INTERVAL;\n    const hasCachedData = this.cachedData.channelStats && this.cachedData.recentVideos;\n    return {\n      dailyCalls: this.apiCallCount,\n      maxCalls: this.MAX_DAILY_CALLS,\n      remainingCalls: Math.max(0, this.MAX_DAILY_CALLS - this.apiCallCount),\n      lastCall: this.lastApiCall,\n      canMakeCall: !isQuotaExceeded && !isRateLimited,\n      usingCachedData: (isQuotaExceeded || isRateLimited) && hasCachedData,\n      usingDemoData: (isQuotaExceeded || isRateLimited) && !hasCachedData,\n      reason: isQuotaExceeded ? 'Daily quota exceeded - wait 24 hours' : isRateLimited ? 'Rate limited - wait 30 minutes' : 'Ready'\n    };\n  }\n  async fetchFromAPI(url) {\n    console.log('Making API call to:', url);\n    const response = await fetch(url);\n    console.log('API response status:', response.status);\n    if (!response.ok) {\n      const errorText = await response.text();\n      console.error('API Error response:', errorText);\n      if (response.status === 403) {\n        throw new Error('API quota exceeded or invalid API key');\n      } else if (response.status === 400) {\n        throw new Error('Invalid request - check channel ID');\n      } else {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n    }\n    const data = await response.json();\n    console.log('API response data:', data);\n    return data;\n  }\n  async getChannelStats() {\n    console.log('getChannelStats called with config:', this.config);\n\n    // If no API key or channel ID, return mock data\n    if (!this.config.apiKey || !this.config.channelId) {\n      console.log('No API key or channel ID, returning mock data');\n      return {\n        subscriberCount: 12400,\n        videoCount: 89,\n        viewCount: 1800000,\n        channelName: this.config.channelName || 'Demo Channel',\n        channelUrl: this.config.channelUrl || 'https://www.youtube.com/@demo',\n        channelId: this.config.channelId || 'demo-channel-id'\n      };\n    }\n\n    // Check if we can make API call\n    if (!this.canMakeApiCall()) {\n      console.log('API call limit reached, checking cached data');\n\n      // Return cached data if available\n      if (this.cachedData.channelStats) {\n        console.log('Returning cached channel stats');\n        return this.cachedData.channelStats;\n      }\n\n      // Fall back to mock data if no cache\n      console.log('No cached data, returning mock data');\n      return {\n        subscriberCount: 12400,\n        videoCount: 89,\n        viewCount: 1800000,\n        channelName: this.config.channelName || 'Demo Channel',\n        channelUrl: this.config.channelUrl || 'https://www.youtube.com/@demo',\n        channelId: this.config.channelId || 'demo-channel-id'\n      };\n    }\n    try {\n      // Make real API call\n      const url = buildYouTubeUrl(YOUTUBE_ENDPOINTS.channel, {\n        part: 'statistics,snippet',\n        id: this.config.channelId\n      }, this.config.apiKey);\n      const data = await this.fetchFromAPI(url);\n      this.recordApiCall();\n      if (data.items && data.items.length > 0) {\n        const channel = data.items[0];\n        const channelStats = {\n          subscriberCount: parseInt(channel.statistics.subscriberCount || '0'),\n          videoCount: parseInt(channel.statistics.videoCount || '0'),\n          viewCount: parseInt(channel.statistics.viewCount || '0'),\n          channelName: channel.snippet.title,\n          channelUrl: `https://www.youtube.com/channel/${channel.id}`,\n          channelId: channel.id\n        };\n\n        // Cache the successful API response\n        this.cachedData.channelStats = channelStats;\n        this.cachedData.lastCached = Date.now();\n        this.saveCachedData();\n        return channelStats;\n      }\n      throw new Error('Channel not found');\n    } catch (error) {\n      console.error('Error in getChannelStats:', error);\n\n      // Return mock data if API fails (quota exceeded, invalid key, etc.)\n      return {\n        subscriberCount: 12400,\n        videoCount: 89,\n        viewCount: 1800000,\n        channelName: this.config.channelName || 'Demo Channel',\n        channelUrl: this.config.channelUrl || 'https://www.youtube.com/@demo',\n        channelId: this.config.channelId || 'demo-channel-id'\n      };\n    }\n  }\n  async getRecentVideos(limit = 10) {\n    // If no API key or channel ID, return mock data\n    if (!this.config.apiKey || !this.config.channelId) {\n      return [{\n        id: 'mock-video-1',\n        title: 'Sample Video Title 1',\n        publishedAt: '2024-01-15T10:00:00Z',\n        viewCount: 15000,\n        likeCount: 1200,\n        commentCount: 89,\n        thumbnail: 'https://via.placeholder.com/320x180',\n        duration: 'PT10M30S'\n      }, {\n        id: 'mock-video-2',\n        title: 'Sample Video Title 2',\n        publishedAt: '2024-01-10T14:30:00Z',\n        viewCount: 22000,\n        likeCount: 1800,\n        commentCount: 156,\n        thumbnail: 'https://via.placeholder.com/320x180',\n        duration: 'PT15M45S'\n      }];\n    }\n\n    // Check if we can make API call\n    if (!this.canMakeApiCall()) {\n      console.log('API call limit reached, returning mock videos');\n      return [{\n        id: 'mock-video-1',\n        title: 'Sample Video Title 1',\n        publishedAt: '2024-01-15T10:00:00Z',\n        viewCount: 15000,\n        likeCount: 1200,\n        commentCount: 89,\n        thumbnail: 'https://via.placeholder.com/320x180',\n        duration: 'PT10M30S'\n      }, {\n        id: 'mock-video-2',\n        title: 'Sample Video Title 2',\n        publishedAt: '2024-01-10T14:30:00Z',\n        viewCount: 22000,\n        likeCount: 1800,\n        commentCount: 156,\n        thumbnail: 'https://via.placeholder.com/320x180',\n        duration: 'PT15M45S'\n      }];\n    }\n    try {\n      // Make real API call\n      const url = buildYouTubeUrl(YOUTUBE_ENDPOINTS.videos, {\n        part: 'snippet',\n        channelId: this.config.channelId,\n        order: 'date',\n        maxResults: limit.toString(),\n        type: 'video'\n      }, this.config.apiKey);\n      const data = await this.fetchFromAPI(url);\n      this.recordApiCall();\n      if (data.items) {\n        const videoIds = data.items.map(item => item.id.videoId).join(',');\n\n        // Check if we can make another API call for video stats\n        if (!this.canMakeApiCall()) {\n          console.log('API call limit reached, returning videos without detailed stats');\n          return data.items.map(item => ({\n            id: item.id.videoId,\n            title: item.snippet.title,\n            publishedAt: item.snippet.publishedAt,\n            viewCount: 0,\n            likeCount: 0,\n            commentCount: 0,\n            thumbnail: item.snippet.thumbnails.medium.url,\n            duration: 'PT0S'\n          }));\n        }\n\n        // Get detailed video statistics\n        const statsUrl = buildYouTubeUrl(YOUTUBE_ENDPOINTS.videoStats, {\n          part: 'statistics,contentDetails',\n          id: videoIds\n        }, this.config.apiKey);\n        const statsData = await this.fetchFromAPI(statsUrl);\n        this.recordApiCall();\n        const statsMap = new Map();\n        if (statsData.items) {\n          statsData.items.forEach(item => {\n            statsMap.set(item.id, {\n              viewCount: parseInt(item.statistics.viewCount || '0'),\n              likeCount: parseInt(item.statistics.likeCount || '0'),\n              commentCount: parseInt(item.statistics.commentCount || '0'),\n              duration: item.contentDetails.duration\n            });\n          });\n        }\n        return data.items.map(item => {\n          const stats = statsMap.get(item.id.videoId) || {\n            viewCount: 0,\n            likeCount: 0,\n            commentCount: 0,\n            duration: 'PT0S'\n          };\n          return {\n            id: item.id.videoId,\n            title: item.snippet.title,\n            publishedAt: item.snippet.publishedAt,\n            viewCount: stats.viewCount,\n            likeCount: stats.likeCount,\n            commentCount: stats.commentCount,\n            thumbnail: item.snippet.thumbnails.medium.url,\n            duration: stats.duration\n          };\n        });\n      }\n      return [];\n    } catch (error) {\n      console.error('Error in getRecentVideos:', error);\n\n      // Return mock data if API fails\n      return [{\n        id: 'mock-video-1',\n        title: 'Sample Video Title 1',\n        publishedAt: '2024-01-15T10:00:00Z',\n        viewCount: 15000,\n        likeCount: 1200,\n        commentCount: 89,\n        thumbnail: 'https://via.placeholder.com/320x180',\n        duration: 'PT10M30S'\n      }, {\n        id: 'mock-video-2',\n        title: 'Sample Video Title 2',\n        publishedAt: '2024-01-10T14:30:00Z',\n        viewCount: 22000,\n        likeCount: 1800,\n        commentCount: 156,\n        thumbnail: 'https://via.placeholder.com/320x180',\n        duration: 'PT15M45S'\n      }];\n    }\n  }\n  async getAnalytics() {\n    const [channelStats, recentVideos] = await Promise.all([this.getChannelStats(), this.getRecentVideos()]);\n\n    // Generate monthly data based on actual channel stats\n    const currentSubscribers = channelStats.subscriberCount;\n    const currentViews = channelStats.viewCount;\n\n    // Get current date and generate last 6 months\n    const now = new Date();\n    const months = [];\n    for (let i = 5; i >= 0; i--) {\n      const date = new Date(now.getFullYear(), now.getMonth() - i, 1);\n      months.push(date.toLocaleDateString('en-US', {\n        month: 'short'\n      }));\n    }\n\n    // Calculate progression factors for realistic growth\n    const progressionFactors = [0.7, 0.8, 0.85, 0.9, 0.95, 1.0];\n\n    // Calculate monthly progression based on current stats\n    const monthlyViews = months.map((month, index) => ({\n      month,\n      views: Math.round(currentViews * progressionFactors[index])\n    }));\n    const monthlySubscribers = months.map((month, index) => ({\n      month,\n      subscribers: Math.round(currentSubscribers * progressionFactors[index])\n    }));\n    return {\n      channelStats,\n      recentVideos,\n      monthlyViews,\n      monthlySubscribers\n    };\n  }\n}\nexport const youtubeService = new YouTubeService();","map":{"version":3,"names":["buildYouTubeUrl","YOUTUBE_ENDPOINTS","YouTubeService","constructor","config","lastApiCall","apiCallCount","MAX_DAILY_CALLS","MIN_CALL_INTERVAL","cachedData","lastCached","savedConfig","localStorage","getItem","console","log","parsed","JSON","parse","channelId","apiKey","channelName","channelUrl","loadApiCallTracking","loadCachedData","today","Date","toDateString","savedTracking","tracking","date","count","lastCall","saveApiCallTracking","setItem","stringify","savedCachedData","saveCachedData","canMakeApiCall","now","recordApiCall","updateConfig","newConfig","getConfig","getApiCallStatus","hasValidConfig","dailyCalls","maxCalls","remainingCalls","canMakeCall","usingDemoData","reason","isQuotaExceeded","isRateLimited","hasCachedData","channelStats","recentVideos","Math","max","usingCachedData","fetchFromAPI","url","response","fetch","status","ok","errorText","text","error","Error","data","json","getChannelStats","subscriberCount","videoCount","viewCount","channel","part","id","items","length","parseInt","statistics","snippet","title","getRecentVideos","limit","publishedAt","likeCount","commentCount","thumbnail","duration","videos","order","maxResults","toString","type","videoIds","map","item","videoId","join","thumbnails","medium","statsUrl","videoStats","statsData","statsMap","Map","forEach","set","contentDetails","stats","get","getAnalytics","Promise","all","currentSubscribers","currentViews","months","i","getFullYear","getMonth","push","toLocaleDateString","month","progressionFactors","monthlyViews","index","views","round","monthlySubscribers","subscribers","youtubeService"],"sources":["/Users/marcodamm/Desktop/Stats_SocialMedia/src/services/youtubeService.ts"],"sourcesContent":["import { buildYouTubeUrl, YOUTUBE_ENDPOINTS, YouTubeConfig } from '../config/youtube';\n\nexport interface YouTubeChannelStats {\n  subscriberCount: number;\n  videoCount: number;\n  viewCount: number;\n  channelName: string;\n  channelUrl: string;\n  channelId: string;\n}\n\nexport interface YouTubeVideo {\n  id: string;\n  title: string;\n  publishedAt: string;\n  viewCount: number;\n  likeCount: number;\n  commentCount: number;\n  thumbnail: string;\n  duration: string;\n}\n\nexport interface YouTubeAnalytics {\n  channelStats: YouTubeChannelStats;\n  recentVideos: YouTubeVideo[];\n  monthlyViews: Array<{ month: string; views: number }>;\n  monthlySubscribers: Array<{ month: string; subscribers: number }>;\n}\n\nclass YouTubeService {\n  private config: YouTubeConfig;\n  private lastApiCall: number = 0;\n  private apiCallCount: number = 0;\n  private readonly MAX_DAILY_CALLS = 48; // 2 calls per hour max (24 * 2)\n  private readonly MIN_CALL_INTERVAL = 1800000; // 30 minutes between calls (2 per hour)\n  private cachedData: {\n    channelStats?: YouTubeChannelStats;\n    recentVideos?: YouTubeVideo[];\n    lastCached: number;\n  } = { lastCached: 0 };\n\n  constructor() {\n    // Load saved configuration from localStorage\n    const savedConfig = localStorage.getItem('youtubeConfig');\n    console.log('Loading YouTube config from localStorage:', savedConfig);\n    if (savedConfig) {\n      const parsed = JSON.parse(savedConfig);\n      this.config = {\n        channelId: parsed.channelId || '',\n        apiKey: parsed.apiKey || '',\n        channelName: parsed.channelName || '',\n        channelUrl: parsed.channelUrl || '',\n      };\n      console.log('Loaded config:', this.config);\n    } else {\n      this.config = {\n        channelId: '',\n        apiKey: '',\n        channelName: '',\n        channelUrl: '',\n      };\n      console.log('No saved config, using defaults');\n    }\n\n    // Load API call tracking from localStorage\n    this.loadApiCallTracking();\n    \n    // Load cached data from localStorage\n    this.loadCachedData();\n  }\n\n  private loadApiCallTracking() {\n    const today = new Date().toDateString();\n    const savedTracking = localStorage.getItem('youtubeApiTracking');\n    \n    if (savedTracking) {\n      const tracking = JSON.parse(savedTracking);\n      if (tracking.date === today) {\n        this.apiCallCount = tracking.count || 0;\n        this.lastApiCall = tracking.lastCall || 0;\n      } else {\n        // Reset for new day\n        this.apiCallCount = 0;\n        this.lastApiCall = 0;\n      }\n    }\n  }\n\n  private saveApiCallTracking() {\n    const tracking = {\n      date: new Date().toDateString(),\n      count: this.apiCallCount,\n      lastCall: this.lastApiCall\n    };\n    localStorage.setItem('youtubeApiTracking', JSON.stringify(tracking));\n  }\n\n  private loadCachedData() {\n    const savedCachedData = localStorage.getItem('youtubeCachedData');\n    if (savedCachedData) {\n      this.cachedData = JSON.parse(savedCachedData);\n    }\n  }\n\n  private saveCachedData() {\n    localStorage.setItem('youtubeCachedData', JSON.stringify(this.cachedData));\n  }\n\n  private canMakeApiCall(): boolean {\n    const now = Date.now();\n    \n    // Check if we've exceeded daily limit\n    if (this.apiCallCount >= this.MAX_DAILY_CALLS) {\n      console.log('Daily API call limit reached');\n      return false;\n    }\n    \n    // Check if enough time has passed since last call\n    if (now - this.lastApiCall < this.MIN_CALL_INTERVAL) {\n      console.log('API call rate limit: waiting for cooldown');\n      return false;\n    }\n    \n    return true;\n  }\n\n  private recordApiCall() {\n    this.apiCallCount++;\n    this.lastApiCall = Date.now();\n    this.saveApiCallTracking();\n    console.log(`API call recorded. Daily count: ${this.apiCallCount}/${this.MAX_DAILY_CALLS}`);\n  }\n\n  updateConfig(newConfig: YouTubeConfig) {\n    this.config = newConfig;\n    localStorage.setItem('youtubeConfig', JSON.stringify(newConfig));\n  }\n\n  getConfig(): YouTubeConfig {\n    return this.config;\n  }\n\n  getApiCallStatus() {\n    // Check if we have valid config\n    const hasValidConfig = this.config.apiKey && this.config.channelId;\n    \n    // If no valid config, show as unlimited since we're using demo data\n    if (!hasValidConfig) {\n      return {\n        dailyCalls: 0,\n        maxCalls: this.MAX_DAILY_CALLS,\n        remainingCalls: this.MAX_DAILY_CALLS,\n        lastCall: this.lastApiCall,\n        canMakeCall: true,\n        usingDemoData: true,\n        reason: 'No API configuration'\n      };\n    }\n\n    // Check if we're actually hitting quota limits\n    const isQuotaExceeded = this.apiCallCount >= this.MAX_DAILY_CALLS;\n    const isRateLimited = Date.now() - this.lastApiCall < this.MIN_CALL_INTERVAL;\n    const hasCachedData = this.cachedData.channelStats && this.cachedData.recentVideos;\n    \n    return {\n      dailyCalls: this.apiCallCount,\n      maxCalls: this.MAX_DAILY_CALLS,\n      remainingCalls: Math.max(0, this.MAX_DAILY_CALLS - this.apiCallCount),\n      lastCall: this.lastApiCall,\n      canMakeCall: !isQuotaExceeded && !isRateLimited,\n      usingCachedData: (isQuotaExceeded || isRateLimited) && hasCachedData,\n      usingDemoData: (isQuotaExceeded || isRateLimited) && !hasCachedData,\n      reason: isQuotaExceeded ? 'Daily quota exceeded - wait 24 hours' : \n              isRateLimited ? 'Rate limited - wait 30 minutes' : 'Ready'\n    };\n  }\n\n  private async fetchFromAPI(url: string): Promise<any> {\n    console.log('Making API call to:', url);\n    const response = await fetch(url);\n    console.log('API response status:', response.status);\n    \n    if (!response.ok) {\n      const errorText = await response.text();\n      console.error('API Error response:', errorText);\n      \n      if (response.status === 403) {\n        throw new Error('API quota exceeded or invalid API key');\n      } else if (response.status === 400) {\n        throw new Error('Invalid request - check channel ID');\n      } else {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n    }\n    \n    const data = await response.json();\n    console.log('API response data:', data);\n    return data;\n  }\n\n  async getChannelStats(): Promise<YouTubeChannelStats> {\n    console.log('getChannelStats called with config:', this.config);\n    \n    // If no API key or channel ID, return mock data\n    if (!this.config.apiKey || !this.config.channelId) {\n      console.log('No API key or channel ID, returning mock data');\n      return {\n        subscriberCount: 12400,\n        videoCount: 89,\n        viewCount: 1800000,\n        channelName: this.config.channelName || 'Demo Channel',\n        channelUrl: this.config.channelUrl || 'https://www.youtube.com/@demo',\n        channelId: this.config.channelId || 'demo-channel-id',\n      };\n    }\n\n    // Check if we can make API call\n    if (!this.canMakeApiCall()) {\n      console.log('API call limit reached, checking cached data');\n      \n      // Return cached data if available\n      if (this.cachedData.channelStats) {\n        console.log('Returning cached channel stats');\n        return this.cachedData.channelStats;\n      }\n      \n      // Fall back to mock data if no cache\n      console.log('No cached data, returning mock data');\n      return {\n        subscriberCount: 12400,\n        videoCount: 89,\n        viewCount: 1800000,\n        channelName: this.config.channelName || 'Demo Channel',\n        channelUrl: this.config.channelUrl || 'https://www.youtube.com/@demo',\n        channelId: this.config.channelId || 'demo-channel-id',\n      };\n    }\n\n    try {\n      // Make real API call\n      const url = buildYouTubeUrl(YOUTUBE_ENDPOINTS.channel, {\n        part: 'statistics,snippet',\n        id: this.config.channelId,\n      }, this.config.apiKey);\n\n      const data = await this.fetchFromAPI(url);\n      this.recordApiCall();\n      \n      if (data.items && data.items.length > 0) {\n        const channel = data.items[0];\n        const channelStats = {\n          subscriberCount: parseInt(channel.statistics.subscriberCount || '0'),\n          videoCount: parseInt(channel.statistics.videoCount || '0'),\n          viewCount: parseInt(channel.statistics.viewCount || '0'),\n          channelName: channel.snippet.title,\n          channelUrl: `https://www.youtube.com/channel/${channel.id}`,\n          channelId: channel.id,\n        };\n        \n        // Cache the successful API response\n        this.cachedData.channelStats = channelStats;\n        this.cachedData.lastCached = Date.now();\n        this.saveCachedData();\n        \n        return channelStats;\n      }\n\n      throw new Error('Channel not found');\n    } catch (error) {\n      console.error('Error in getChannelStats:', error);\n      \n      // Return mock data if API fails (quota exceeded, invalid key, etc.)\n      return {\n        subscriberCount: 12400,\n        videoCount: 89,\n        viewCount: 1800000,\n        channelName: this.config.channelName || 'Demo Channel',\n        channelUrl: this.config.channelUrl || 'https://www.youtube.com/@demo',\n        channelId: this.config.channelId || 'demo-channel-id',\n      };\n    }\n  }\n\n  async getRecentVideos(limit: number = 10): Promise<YouTubeVideo[]> {\n    // If no API key or channel ID, return mock data\n    if (!this.config.apiKey || !this.config.channelId) {\n      return [\n        {\n          id: 'mock-video-1',\n          title: 'Sample Video Title 1',\n          publishedAt: '2024-01-15T10:00:00Z',\n          viewCount: 15000,\n          likeCount: 1200,\n          commentCount: 89,\n          thumbnail: 'https://via.placeholder.com/320x180',\n          duration: 'PT10M30S',\n        },\n        {\n          id: 'mock-video-2',\n          title: 'Sample Video Title 2',\n          publishedAt: '2024-01-10T14:30:00Z',\n          viewCount: 22000,\n          likeCount: 1800,\n          commentCount: 156,\n          thumbnail: 'https://via.placeholder.com/320x180',\n          duration: 'PT15M45S',\n        },\n      ];\n    }\n\n    // Check if we can make API call\n    if (!this.canMakeApiCall()) {\n      console.log('API call limit reached, returning mock videos');\n      return [\n        {\n          id: 'mock-video-1',\n          title: 'Sample Video Title 1',\n          publishedAt: '2024-01-15T10:00:00Z',\n          viewCount: 15000,\n          likeCount: 1200,\n          commentCount: 89,\n          thumbnail: 'https://via.placeholder.com/320x180',\n          duration: 'PT10M30S',\n        },\n        {\n          id: 'mock-video-2',\n          title: 'Sample Video Title 2',\n          publishedAt: '2024-01-10T14:30:00Z',\n          viewCount: 22000,\n          likeCount: 1800,\n          commentCount: 156,\n          thumbnail: 'https://via.placeholder.com/320x180',\n          duration: 'PT15M45S',\n        },\n      ];\n    }\n\n    try {\n      // Make real API call\n      const url = buildYouTubeUrl(YOUTUBE_ENDPOINTS.videos, {\n        part: 'snippet',\n        channelId: this.config.channelId,\n        order: 'date',\n        maxResults: limit.toString(),\n        type: 'video',\n      }, this.config.apiKey);\n\n      const data = await this.fetchFromAPI(url);\n      this.recordApiCall();\n      \n      if (data.items) {\n        const videoIds = data.items.map((item: any) => item.id.videoId).join(',');\n        \n        // Check if we can make another API call for video stats\n        if (!this.canMakeApiCall()) {\n          console.log('API call limit reached, returning videos without detailed stats');\n          return data.items.map((item: any) => ({\n            id: item.id.videoId,\n            title: item.snippet.title,\n            publishedAt: item.snippet.publishedAt,\n            viewCount: 0,\n            likeCount: 0,\n            commentCount: 0,\n            thumbnail: item.snippet.thumbnails.medium.url,\n            duration: 'PT0S',\n          }));\n        }\n        \n        // Get detailed video statistics\n        const statsUrl = buildYouTubeUrl(YOUTUBE_ENDPOINTS.videoStats, {\n          part: 'statistics,contentDetails',\n          id: videoIds,\n        }, this.config.apiKey);\n\n        const statsData = await this.fetchFromAPI(statsUrl);\n        this.recordApiCall();\n        const statsMap = new Map();\n        \n        if (statsData.items) {\n          statsData.items.forEach((item: any) => {\n            statsMap.set(item.id, {\n              viewCount: parseInt(item.statistics.viewCount || '0'),\n              likeCount: parseInt(item.statistics.likeCount || '0'),\n              commentCount: parseInt(item.statistics.commentCount || '0'),\n              duration: item.contentDetails.duration,\n            });\n          });\n        }\n\n        return data.items.map((item: any) => {\n          const stats = statsMap.get(item.id.videoId) || {\n            viewCount: 0,\n            likeCount: 0,\n            commentCount: 0,\n            duration: 'PT0S',\n          };\n\n          return {\n            id: item.id.videoId,\n            title: item.snippet.title,\n            publishedAt: item.snippet.publishedAt,\n            viewCount: stats.viewCount,\n            likeCount: stats.likeCount,\n            commentCount: stats.commentCount,\n            thumbnail: item.snippet.thumbnails.medium.url,\n            duration: stats.duration,\n          };\n        });\n      }\n\n      return [];\n    } catch (error) {\n      console.error('Error in getRecentVideos:', error);\n      \n      // Return mock data if API fails\n      return [\n        {\n          id: 'mock-video-1',\n          title: 'Sample Video Title 1',\n          publishedAt: '2024-01-15T10:00:00Z',\n          viewCount: 15000,\n          likeCount: 1200,\n          commentCount: 89,\n          thumbnail: 'https://via.placeholder.com/320x180',\n          duration: 'PT10M30S',\n        },\n        {\n          id: 'mock-video-2',\n          title: 'Sample Video Title 2',\n          publishedAt: '2024-01-10T14:30:00Z',\n          viewCount: 22000,\n          likeCount: 1800,\n          commentCount: 156,\n          thumbnail: 'https://via.placeholder.com/320x180',\n          duration: 'PT15M45S',\n        },\n      ];\n    }\n  }\n\n  async getAnalytics(): Promise<YouTubeAnalytics> {\n    const [channelStats, recentVideos] = await Promise.all([\n      this.getChannelStats(),\n      this.getRecentVideos(),\n    ]);\n\n    // Generate monthly data based on actual channel stats\n    const currentSubscribers = channelStats.subscriberCount;\n    const currentViews = channelStats.viewCount;\n    \n    // Get current date and generate last 6 months\n    const now = new Date();\n    const months = [];\n    for (let i = 5; i >= 0; i--) {\n      const date = new Date(now.getFullYear(), now.getMonth() - i, 1);\n      months.push(date.toLocaleDateString('en-US', { month: 'short' }));\n    }\n    \n    // Calculate progression factors for realistic growth\n    const progressionFactors = [0.7, 0.8, 0.85, 0.9, 0.95, 1.0];\n    \n    // Calculate monthly progression based on current stats\n    const monthlyViews = months.map((month, index) => ({\n      month,\n      views: Math.round(currentViews * progressionFactors[index])\n    }));\n\n    const monthlySubscribers = months.map((month, index) => ({\n      month,\n      subscribers: Math.round(currentSubscribers * progressionFactors[index])\n    }));\n\n    return {\n      channelStats,\n      recentVideos,\n      monthlyViews,\n      monthlySubscribers,\n    };\n  }\n}\n\nexport const youtubeService = new YouTubeService(); "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}