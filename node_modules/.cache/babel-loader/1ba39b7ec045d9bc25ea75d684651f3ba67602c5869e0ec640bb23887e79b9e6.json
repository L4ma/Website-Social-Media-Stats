{"ast":null,"code":"import { dataCollectionService } from '../services/dataCollectionService';\nexport const generateTimeFilteredData = (baseData, filter, currentValue, dataType = 'subscribers') => {\n  const now = new Date();\n  let dataPoints = [];\n\n  // Try to get real historical data first\n  const historicalData = dataCollectionService.getHistoricalData();\n  switch (filter) {\n    case '7d':\n      // Try to use real 7-day data\n      const weekData = dataCollectionService.getDataForPeriod(7);\n      if (weekData.length > 0) {\n        // Use real historical data\n        dataPoints = weekData.map(stat => ({\n          date: new Date(stat.date).toLocaleDateString('en-US', {\n            month: 'short',\n            day: 'numeric'\n          }),\n          value: stat.subscriberCount,\n          fullDate: stat.date\n        }));\n      } else {\n        // Fallback to generated data\n        for (let i = 0; i <= 6; i++) {\n          const date = new Date(now.getFullYear(), now.getMonth(), now.getDate() - (6 - i));\n          dataPoints.push({\n            date: date.toLocaleDateString('en-US', {\n              month: 'short',\n              day: 'numeric'\n            }),\n            value: Math.round(currentValue * (0.85 + i * 0.025)),\n            fullDate: date.toISOString().split('T')[0]\n          });\n        }\n      }\n      break;\n    case '30d':\n      // Try to use real 30-day data\n      const monthData = dataCollectionService.getDataForPeriod(30);\n      if (monthData.length > 0) {\n        // Group by weeks\n        const weeklyData = new Map();\n        monthData.forEach(stat => {\n          const weekStart = new Date(stat.date);\n          weekStart.setDate(weekStart.getDate() - weekStart.getDay());\n          const weekKey = weekStart.toISOString().split('T')[0];\n          if (!weeklyData.has(weekKey)) {\n            weeklyData.set(weekKey, {\n              subscribers: 0,\n              count: 0\n            });\n          }\n          weeklyData.get(weekKey).subscribers += stat.subscriberCount;\n          weeklyData.get(weekKey).count += 1;\n        });\n        dataPoints = Array.from(weeklyData.entries()).map(([weekKey, data], index) => ({\n          date: `Week ${index + 1}`,\n          value: Math.round(data.subscribers / data.count),\n          fullDate: weekKey\n        }));\n      } else {\n        // Fallback to generated data\n        for (let i = 0; i <= 4; i++) {\n          const date = new Date(now.getFullYear(), now.getMonth(), now.getDate() - (4 - i) * 7);\n          dataPoints.push({\n            date: `Week ${i + 1}`,\n            value: Math.round(currentValue * (0.75 + i * 0.05)),\n            fullDate: date.toISOString().split('T')[0]\n          });\n        }\n      }\n      break;\n    case '3m':\n      // Try to use real 3-month data\n      const threeMonthData = dataCollectionService.getMonthlyData(3);\n      if (threeMonthData.length > 0) {\n        dataPoints = threeMonthData.map(stat => ({\n          date: stat.month,\n          value: stat.subscribers,\n          fullDate: stat.month\n        }));\n      } else {\n        // Fallback to generated data\n        for (let i = 0; i <= 2; i++) {\n          const date = new Date(now.getFullYear(), now.getMonth() - (2 - i), 1);\n          dataPoints.push({\n            date: date.toLocaleDateString('en-US', {\n              month: 'short'\n            }),\n            value: Math.round(currentValue * (0.8 + i * 0.1)),\n            fullDate: date.toISOString().split('T')[0]\n          });\n        }\n      }\n      break;\n    case '6m':\n      // Try to use real 6-month data\n      const sixMonthData = dataCollectionService.getMonthlyData(6);\n      if (sixMonthData.length > 0) {\n        dataPoints = sixMonthData.map(stat => ({\n          date: stat.month,\n          value: stat.subscribers,\n          fullDate: stat.month\n        }));\n      } else {\n        // Fallback to generated data\n        for (let i = 0; i <= 5; i++) {\n          const date = new Date(now.getFullYear(), now.getMonth() - (5 - i), 1);\n          dataPoints.push({\n            date: date.toLocaleDateString('en-US', {\n              month: 'short'\n            }),\n            value: Math.round(currentValue * (0.7 + i * 0.06)),\n            fullDate: date.toISOString().split('T')[0]\n          });\n        }\n      }\n      break;\n    case '1y':\n      // Try to use real 12-month data\n      const yearData = dataCollectionService.getMonthlyData(12);\n      if (yearData.length > 0) {\n        // Group by quarters\n        const quarterlyData = new Map();\n        yearData.forEach(stat => {\n          const month = new Date(stat.month);\n          const quarter = Math.floor(month.getMonth() / 3) + 1;\n          const quarterKey = `Q${quarter}`;\n          if (!quarterlyData.has(quarterKey)) {\n            quarterlyData.set(quarterKey, {\n              subscribers: 0,\n              count: 0\n            });\n          }\n          quarterlyData.get(quarterKey).subscribers += stat.subscribers;\n          quarterlyData.get(quarterKey).count += 1;\n        });\n        dataPoints = Array.from(quarterlyData.entries()).map(([quarter, data]) => ({\n          date: quarter,\n          value: Math.round(data.subscribers / data.count),\n          fullDate: quarter\n        }));\n      } else {\n        // Fallback to generated data\n        for (let i = 0; i <= 3; i++) {\n          const date = new Date(now.getFullYear(), now.getMonth() - (3 - i) * 3, 1);\n          dataPoints.push({\n            date: `Q${i + 1}`,\n            value: Math.round(currentValue * (0.6 + i * 0.1)),\n            fullDate: date.toISOString().split('T')[0]\n          });\n        }\n      }\n      break;\n    default:\n      // Default to 6 months if no valid filter\n      for (let i = 0; i <= 5; i++) {\n        const date = new Date(now.getFullYear(), now.getMonth() - (5 - i), 1);\n        dataPoints.push({\n          date: date.toLocaleDateString('en-US', {\n            month: 'short'\n          }),\n          value: Math.round(currentValue * (0.7 + i * 0.06)),\n          fullDate: date.toISOString().split('T')[0]\n        });\n      }\n      break;\n  }\n  return dataPoints;\n};\nexport const generateMultiPlatformData = (filter, youtubeValue, threadsValue = 48500, instagramValue = 71200) => {\n  const now = new Date();\n  let dataPoints = [];\n  switch (filter) {\n    case '7d':\n      // Last 7 days - start from 7 days ago and grow to current\n      for (let i = 0; i <= 6; i++) {\n        const date = new Date(now.getFullYear(), now.getMonth(), now.getDate() - (6 - i));\n        dataPoints.push({\n          date: date.toLocaleDateString('en-US', {\n            month: 'short',\n            day: 'numeric'\n          }),\n          threads: Math.round(threadsValue * (0.85 + i * 0.025)),\n          instagram: Math.round(instagramValue * (0.85 + i * 0.025)),\n          youtube: Math.round(youtubeValue * (0.85 + i * 0.025))\n        });\n      }\n      break;\n    case '30d':\n      // Last 30 days (weekly averages) - start from 4 weeks ago and grow to current\n      for (let i = 0; i <= 4; i++) {\n        dataPoints.push({\n          date: `Week ${i + 1}`,\n          threads: Math.round(threadsValue * (0.75 + i * 0.05)),\n          instagram: Math.round(instagramValue * (0.75 + i * 0.05)),\n          youtube: Math.round(youtubeValue * (0.75 + i * 0.05))\n        });\n      }\n      break;\n    case '3m':\n      // Last 3 months - start from 3 months ago and grow to current\n      for (let i = 0; i <= 2; i++) {\n        const date = new Date(now.getFullYear(), now.getMonth() - (2 - i), 1);\n        dataPoints.push({\n          date: date.toLocaleDateString('en-US', {\n            month: 'short'\n          }),\n          threads: Math.round(threadsValue * (0.8 + i * 0.1)),\n          instagram: Math.round(instagramValue * (0.8 + i * 0.1)),\n          youtube: Math.round(youtubeValue * (0.8 + i * 0.1))\n        });\n      }\n      break;\n    case '6m':\n      // Last 6 months - start from 6 months ago and grow to current\n      for (let i = 0; i <= 5; i++) {\n        const date = new Date(now.getFullYear(), now.getMonth() - (5 - i), 1);\n        dataPoints.push({\n          date: date.toLocaleDateString('en-US', {\n            month: 'short'\n          }),\n          threads: Math.round(threadsValue * (0.7 + i * 0.06)),\n          instagram: Math.round(instagramValue * (0.7 + i * 0.06)),\n          youtube: Math.round(youtubeValue * (0.7 + i * 0.06))\n        });\n      }\n      break;\n    case '1y':\n      // Last 12 months (quarterly) - start from 1 year ago and grow to current\n      for (let i = 0; i <= 3; i++) {\n        dataPoints.push({\n          date: `Q${i + 1}`,\n          threads: Math.round(threadsValue * (0.6 + i * 0.1)),\n          instagram: Math.round(instagramValue * (0.6 + i * 0.1)),\n          youtube: Math.round(youtubeValue * (0.6 + i * 0.1))\n        });\n      }\n      break;\n    default:\n      // Default to 6 months if no valid filter\n      for (let i = 0; i <= 5; i++) {\n        const date = new Date(now.getFullYear(), now.getMonth() - (5 - i), 1);\n        dataPoints.push({\n          date: date.toLocaleDateString('en-US', {\n            month: 'short'\n          }),\n          threads: Math.round(threadsValue * (0.7 + i * 0.06)),\n          instagram: Math.round(instagramValue * (0.7 + i * 0.06)),\n          youtube: Math.round(youtubeValue * (0.7 + i * 0.06))\n        });\n      }\n      break;\n  }\n  return dataPoints;\n};","map":{"version":3,"names":["dataCollectionService","generateTimeFilteredData","baseData","filter","currentValue","dataType","now","Date","dataPoints","historicalData","getHistoricalData","weekData","getDataForPeriod","length","map","stat","date","toLocaleDateString","month","day","value","subscriberCount","fullDate","i","getFullYear","getMonth","getDate","push","Math","round","toISOString","split","monthData","weeklyData","Map","forEach","weekStart","setDate","getDay","weekKey","has","set","subscribers","count","get","Array","from","entries","data","index","threeMonthData","getMonthlyData","sixMonthData","yearData","quarterlyData","quarter","floor","quarterKey","generateMultiPlatformData","youtubeValue","threadsValue","instagramValue","threads","instagram","youtube"],"sources":["/Users/marcodamm/Desktop/Stats_SocialMedia/src/utils/chartDataUtils.ts"],"sourcesContent":["import { TimeFilter } from '../components/ChartFilters';\nimport { dataCollectionService } from '../services/dataCollectionService';\n\nexport interface ChartDataPoint {\n  date: string;\n  value: number;\n  label?: string;\n}\n\nexport interface MultiPlatformDataPoint {\n  date: string;\n  threads: number;\n  instagram: number;\n  youtube: number;\n}\n\nexport const generateTimeFilteredData = (\n  baseData: any[],\n  filter: TimeFilter,\n  currentValue: number,\n  dataType: 'subscribers' | 'views' = 'subscribers'\n): any[] => {\n  const now = new Date();\n  let dataPoints: any[] = [];\n\n  // Try to get real historical data first\n  const historicalData = dataCollectionService.getHistoricalData();\n  \n  switch (filter) {\n    case '7d':\n      // Try to use real 7-day data\n      const weekData = dataCollectionService.getDataForPeriod(7);\n      if (weekData.length > 0) {\n        // Use real historical data\n        dataPoints = weekData.map(stat => ({\n          date: new Date(stat.date).toLocaleDateString('en-US', { month: 'short', day: 'numeric' }),\n          value: stat.subscriberCount,\n          fullDate: stat.date,\n        }));\n      } else {\n        // Fallback to generated data\n        for (let i = 0; i <= 6; i++) {\n          const date = new Date(now.getFullYear(), now.getMonth(), now.getDate() - (6 - i));\n          dataPoints.push({\n            date: date.toLocaleDateString('en-US', { month: 'short', day: 'numeric' }),\n            value: Math.round(currentValue * (0.85 + (i * 0.025))),\n            fullDate: date.toISOString().split('T')[0],\n          });\n        }\n      }\n      break;\n\n    case '30d':\n      // Try to use real 30-day data\n      const monthData = dataCollectionService.getDataForPeriod(30);\n      if (monthData.length > 0) {\n        // Group by weeks\n        const weeklyData = new Map<string, { subscribers: number; count: number }>();\n        monthData.forEach(stat => {\n          const weekStart = new Date(stat.date);\n          weekStart.setDate(weekStart.getDate() - weekStart.getDay());\n          const weekKey = weekStart.toISOString().split('T')[0];\n          \n          if (!weeklyData.has(weekKey)) {\n            weeklyData.set(weekKey, { subscribers: 0, count: 0 });\n          }\n          weeklyData.get(weekKey)!.subscribers += stat.subscriberCount;\n          weeklyData.get(weekKey)!.count += 1;\n        });\n        \n        dataPoints = Array.from(weeklyData.entries()).map(([weekKey, data], index) => ({\n          date: `Week ${index + 1}`,\n          value: Math.round(data.subscribers / data.count),\n          fullDate: weekKey,\n        }));\n      } else {\n        // Fallback to generated data\n        for (let i = 0; i <= 4; i++) {\n          const date = new Date(now.getFullYear(), now.getMonth(), now.getDate() - ((4 - i) * 7));\n          dataPoints.push({\n            date: `Week ${i + 1}`,\n            value: Math.round(currentValue * (0.75 + (i * 0.05))),\n            fullDate: date.toISOString().split('T')[0],\n          });\n        }\n      }\n      break;\n\n    case '3m':\n      // Try to use real 3-month data\n      const threeMonthData = dataCollectionService.getMonthlyData(3);\n      if (threeMonthData.length > 0) {\n        dataPoints = threeMonthData.map(stat => ({\n          date: stat.month,\n          value: stat.subscribers,\n          fullDate: stat.month,\n        }));\n      } else {\n        // Fallback to generated data\n        for (let i = 0; i <= 2; i++) {\n          const date = new Date(now.getFullYear(), now.getMonth() - (2 - i), 1);\n          dataPoints.push({\n            date: date.toLocaleDateString('en-US', { month: 'short' }),\n            value: Math.round(currentValue * (0.8 + (i * 0.1))),\n            fullDate: date.toISOString().split('T')[0],\n          });\n        }\n      }\n      break;\n\n    case '6m':\n      // Try to use real 6-month data\n      const sixMonthData = dataCollectionService.getMonthlyData(6);\n      if (sixMonthData.length > 0) {\n        dataPoints = sixMonthData.map(stat => ({\n          date: stat.month,\n          value: stat.subscribers,\n          fullDate: stat.month,\n        }));\n      } else {\n        // Fallback to generated data\n        for (let i = 0; i <= 5; i++) {\n          const date = new Date(now.getFullYear(), now.getMonth() - (5 - i), 1);\n          dataPoints.push({\n            date: date.toLocaleDateString('en-US', { month: 'short' }),\n            value: Math.round(currentValue * (0.7 + (i * 0.06))),\n            fullDate: date.toISOString().split('T')[0],\n          });\n        }\n      }\n      break;\n\n    case '1y':\n      // Try to use real 12-month data\n      const yearData = dataCollectionService.getMonthlyData(12);\n      if (yearData.length > 0) {\n        // Group by quarters\n        const quarterlyData = new Map<string, { subscribers: number; count: number }>();\n        yearData.forEach(stat => {\n          const month = new Date(stat.month);\n          const quarter = Math.floor(month.getMonth() / 3) + 1;\n          const quarterKey = `Q${quarter}`;\n          \n          if (!quarterlyData.has(quarterKey)) {\n            quarterlyData.set(quarterKey, { subscribers: 0, count: 0 });\n          }\n          quarterlyData.get(quarterKey)!.subscribers += stat.subscribers;\n          quarterlyData.get(quarterKey)!.count += 1;\n        });\n        \n        dataPoints = Array.from(quarterlyData.entries()).map(([quarter, data]) => ({\n          date: quarter,\n          value: Math.round(data.subscribers / data.count),\n          fullDate: quarter,\n        }));\n      } else {\n        // Fallback to generated data\n        for (let i = 0; i <= 3; i++) {\n          const date = new Date(now.getFullYear(), now.getMonth() - ((3 - i) * 3), 1);\n          dataPoints.push({\n            date: `Q${i + 1}`,\n            value: Math.round(currentValue * (0.6 + (i * 0.1))),\n            fullDate: date.toISOString().split('T')[0],\n          });\n        }\n      }\n      break;\n\n    default:\n      // Default to 6 months if no valid filter\n      for (let i = 0; i <= 5; i++) {\n        const date = new Date(now.getFullYear(), now.getMonth() - (5 - i), 1);\n        dataPoints.push({\n          date: date.toLocaleDateString('en-US', { month: 'short' }),\n          value: Math.round(currentValue * (0.7 + (i * 0.06))),\n          fullDate: date.toISOString().split('T')[0],\n        });\n      }\n      break;\n  }\n\n  return dataPoints;\n};\n\nexport const generateMultiPlatformData = (\n  filter: TimeFilter,\n  youtubeValue: number,\n  threadsValue: number = 48500,\n  instagramValue: number = 71200\n): MultiPlatformDataPoint[] => {\n  const now = new Date();\n  let dataPoints: MultiPlatformDataPoint[] = [];\n\n  switch (filter) {\n    case '7d':\n      // Last 7 days - start from 7 days ago and grow to current\n      for (let i = 0; i <= 6; i++) {\n        const date = new Date(now.getFullYear(), now.getMonth(), now.getDate() - (6 - i));\n        dataPoints.push({\n          date: date.toLocaleDateString('en-US', { month: 'short', day: 'numeric' }),\n          threads: Math.round(threadsValue * (0.85 + (i * 0.025))),\n          instagram: Math.round(instagramValue * (0.85 + (i * 0.025))),\n          youtube: Math.round(youtubeValue * (0.85 + (i * 0.025))),\n        });\n      }\n      break;\n\n    case '30d':\n      // Last 30 days (weekly averages) - start from 4 weeks ago and grow to current\n      for (let i = 0; i <= 4; i++) {\n        dataPoints.push({\n          date: `Week ${i + 1}`,\n          threads: Math.round(threadsValue * (0.75 + (i * 0.05))),\n          instagram: Math.round(instagramValue * (0.75 + (i * 0.05))),\n          youtube: Math.round(youtubeValue * (0.75 + (i * 0.05))),\n        });\n      }\n      break;\n\n    case '3m':\n      // Last 3 months - start from 3 months ago and grow to current\n      for (let i = 0; i <= 2; i++) {\n        const date = new Date(now.getFullYear(), now.getMonth() - (2 - i), 1);\n        dataPoints.push({\n          date: date.toLocaleDateString('en-US', { month: 'short' }),\n          threads: Math.round(threadsValue * (0.8 + (i * 0.1))),\n          instagram: Math.round(instagramValue * (0.8 + (i * 0.1))),\n          youtube: Math.round(youtubeValue * (0.8 + (i * 0.1))),\n        });\n      }\n      break;\n\n    case '6m':\n      // Last 6 months - start from 6 months ago and grow to current\n      for (let i = 0; i <= 5; i++) {\n        const date = new Date(now.getFullYear(), now.getMonth() - (5 - i), 1);\n        dataPoints.push({\n          date: date.toLocaleDateString('en-US', { month: 'short' }),\n          threads: Math.round(threadsValue * (0.7 + (i * 0.06))),\n          instagram: Math.round(instagramValue * (0.7 + (i * 0.06))),\n          youtube: Math.round(youtubeValue * (0.7 + (i * 0.06))),\n        });\n      }\n      break;\n\n    case '1y':\n      // Last 12 months (quarterly) - start from 1 year ago and grow to current\n      for (let i = 0; i <= 3; i++) {\n        dataPoints.push({\n          date: `Q${i + 1}`,\n          threads: Math.round(threadsValue * (0.6 + (i * 0.1))),\n          instagram: Math.round(instagramValue * (0.6 + (i * 0.1))),\n          youtube: Math.round(youtubeValue * (0.6 + (i * 0.1))),\n        });\n      }\n      break;\n\n    default:\n      // Default to 6 months if no valid filter\n      for (let i = 0; i <= 5; i++) {\n        const date = new Date(now.getFullYear(), now.getMonth() - (5 - i), 1);\n        dataPoints.push({\n          date: date.toLocaleDateString('en-US', { month: 'short' }),\n          threads: Math.round(threadsValue * (0.7 + (i * 0.06))),\n          instagram: Math.round(instagramValue * (0.7 + (i * 0.06))),\n          youtube: Math.round(youtubeValue * (0.7 + (i * 0.06))),\n        });\n      }\n      break;\n  }\n\n  return dataPoints;\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}