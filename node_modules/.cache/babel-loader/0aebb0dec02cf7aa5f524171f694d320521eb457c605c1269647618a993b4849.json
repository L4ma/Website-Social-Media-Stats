{"ast":null,"code":"class YouTubeOAuthService{constructor(){this.config=null;this.accessToken=null;this.refreshToken=null;this.loadConfig();this.loadTokens();}loadConfig(){const saved=localStorage.getItem('youtubeOAuthConfig');if(saved){this.config=JSON.parse(saved);}}loadTokens(){this.accessToken=localStorage.getItem('youtubeOAuthAccessToken');this.refreshToken=localStorage.getItem('youtubeOAuthRefreshToken');}saveConfig(){if(this.config){localStorage.setItem('youtubeOAuthConfig',JSON.stringify(this.config));}}saveTokens(){if(this.accessToken){localStorage.setItem('youtubeOAuthAccessToken',this.accessToken);}if(this.refreshToken){localStorage.setItem('youtubeOAuthRefreshToken',this.refreshToken);}}setConfig(config){this.config=config;this.saveConfig();}getConfig(){return this.config;}isAuthenticated(){return!!this.accessToken;}getAuthUrl(){if(!this.config){throw new Error('YouTube OAuth configuration not set');}const params=new URLSearchParams({client_id:this.config.clientId,redirect_uri:this.config.redirectUri,response_type:'code',scope:'https://www.googleapis.com/auth/youtube.readonly',access_type:'offline',prompt:'consent'});return`https://accounts.google.com/o/oauth2/v2/auth?${params.toString()}`;}async handleOAuthCallback(code){if(!this.config){throw new Error('YouTube OAuth configuration not set');}try{const response=await fetch('https://oauth2.googleapis.com/token',{method:'POST',headers:{'Content-Type':'application/x-www-form-urlencoded'},body:new URLSearchParams({client_id:this.config.clientId,client_secret:this.config.clientSecret,code:code,grant_type:'authorization_code',redirect_uri:this.config.redirectUri})});if(!response.ok){const error=await response.text();throw new Error(`OAuth token exchange failed: ${error}`);}const data=await response.json();this.accessToken=data.access_token;this.refreshToken=data.refresh_token;this.saveTokens();return true;}catch(error){console.error('YouTube OAuth callback error:',error);return false;}}async refreshAccessToken(){if(!this.config||!this.refreshToken){return false;}try{const response=await fetch('https://oauth2.googleapis.com/token',{method:'POST',headers:{'Content-Type':'application/x-www-form-urlencoded'},body:new URLSearchParams({client_id:this.config.clientId,client_secret:this.config.clientSecret,refresh_token:this.refreshToken,grant_type:'refresh_token'})});if(!response.ok){throw new Error('Failed to refresh access token');}const data=await response.json();this.accessToken=data.access_token;this.saveTokens();return true;}catch(error){console.error('YouTube token refresh error:',error);return false;}}async makeAuthenticatedRequest(url){if(!this.accessToken){throw new Error('No access token available');}const response=await fetch(url,{headers:{'Authorization':`Bearer ${this.accessToken}`}});if(response.status===401){// Token expired, try to refresh\nconst refreshed=await this.refreshAccessToken();if(refreshed){// Retry the request with new token\nreturn this.makeAuthenticatedRequest(url);}else{throw new Error('Authentication failed and token refresh failed');}}if(!response.ok){throw new Error(`YouTube API request failed: ${response.statusText}`);}return response.json();}async getChannelStats(){const url='https://www.googleapis.com/youtube/v3/channels?part=snippet,statistics&mine=true';const data=await this.makeAuthenticatedRequest(url);if(!data.items||data.items.length===0){throw new Error('No channel found for authenticated user');}const channel=data.items[0];return{channelId:channel.id,channelTitle:channel.snippet.title,subscriberCount:parseInt(channel.statistics.subscriberCount||'0'),videoCount:parseInt(channel.statistics.videoCount||'0'),viewCount:parseInt(channel.statistics.viewCount||'0'),description:channel.snippet.description,customUrl:channel.snippet.customUrl||'',publishedAt:channel.snippet.publishedAt,thumbnails:channel.snippet.thumbnails};}async getRecentVideos(){const url='https://www.googleapis.com/youtube/v3/search?part=snippet&forMine=true&type=video&order=date&maxResults=10';const data=await this.makeAuthenticatedRequest(url);if(!data.items||data.items.length===0){return[];}// Get video statistics for each video\nconst videoIds=data.items.map(item=>item.id.videoId).join(',');const statsUrl=`https://www.googleapis.com/youtube/v3/videos?part=statistics&id=${videoIds}`;const statsData=await this.makeAuthenticatedRequest(statsUrl);return data.items.map((item,index)=>{var _statsData$items$inde;const stats=((_statsData$items$inde=statsData.items[index])===null||_statsData$items$inde===void 0?void 0:_statsData$items$inde.statistics)||{};return{id:item.id.videoId,title:item.snippet.title,description:item.snippet.description,publishedAt:item.snippet.publishedAt,thumbnails:item.snippet.thumbnails,statistics:{viewCount:parseInt(stats.viewCount||'0'),likeCount:parseInt(stats.likeCount||'0'),commentCount:parseInt(stats.commentCount||'0')}};});}async getAnalytics(){try{const[stats,recentVideos]=await Promise.all([this.getChannelStats(),this.getRecentVideos()]);// Generate mock analytics data for now\n// In a real implementation, you'd fetch historical data from YouTube Analytics API\nconst monthlySubscribers=this.generateMonthlyData(stats.subscriberCount,12,'subscribers');const monthlyViews=this.generateMonthlyData(stats.viewCount,12,'views');const monthlyEngagement=this.generateMonthlyData(recentVideos.reduce((sum,video)=>sum+video.statistics.likeCount+video.statistics.commentCount,0),12,'engagement');return{stats,recentVideos,monthlySubscribers,monthlyViews,monthlyEngagement};}catch(error){console.error('Error fetching YouTube analytics:',error);throw error;}}generateMonthlyData(currentValue,months,type){const data=[];const now=new Date();for(let i=months-1;i>=0;i--){const date=new Date(now.getFullYear(),now.getMonth()-i,1);const month=date.toLocaleDateString('en-US',{month:'short',year:'numeric'});// Generate realistic progression data\nconst factor=0.8+Math.random()*0.4;// 0.8 to 1.2\nconst value=Math.floor(currentValue*factor*(i/months+0.1));data.push({month,[type]:value});}return data;}logout(){this.accessToken=null;this.refreshToken=null;localStorage.removeItem('youtubeOAuthAccessToken');localStorage.removeItem('youtubeOAuthRefreshToken');}}export const youtubeOAuthService=new YouTubeOAuthService();","map":{"version":3,"names":["YouTubeOAuthService","constructor","config","accessToken","refreshToken","loadConfig","loadTokens","saved","localStorage","getItem","JSON","parse","saveConfig","setItem","stringify","saveTokens","setConfig","getConfig","isAuthenticated","getAuthUrl","Error","params","URLSearchParams","client_id","clientId","redirect_uri","redirectUri","response_type","scope","access_type","prompt","toString","handleOAuthCallback","code","response","fetch","method","headers","body","client_secret","clientSecret","grant_type","ok","error","text","data","json","access_token","refresh_token","console","refreshAccessToken","makeAuthenticatedRequest","url","status","refreshed","statusText","getChannelStats","items","length","channel","channelId","id","channelTitle","snippet","title","subscriberCount","parseInt","statistics","videoCount","viewCount","description","customUrl","publishedAt","thumbnails","getRecentVideos","videoIds","map","item","videoId","join","statsUrl","statsData","index","_statsData$items$inde","stats","likeCount","commentCount","getAnalytics","recentVideos","Promise","all","monthlySubscribers","generateMonthlyData","monthlyViews","monthlyEngagement","reduce","sum","video","currentValue","months","type","now","Date","i","date","getFullYear","getMonth","month","toLocaleDateString","year","factor","Math","random","value","floor","push","logout","removeItem","youtubeOAuthService"],"sources":["/Users/marcodamm/Desktop/Stats_SocialMedia/src/services/youtubeOAuthService.ts"],"sourcesContent":["export interface YouTubeOAuthConfig {\n  clientId: string;\n  clientSecret: string;\n  redirectUri: string;\n}\n\nexport interface YouTubeOAuthStats {\n  channelId: string;\n  channelTitle: string;\n  subscriberCount: number;\n  videoCount: number;\n  viewCount: number;\n  description: string;\n  customUrl: string;\n  publishedAt: string;\n  thumbnails: {\n    default: string;\n    medium: string;\n    high: string;\n  };\n}\n\nexport interface YouTubeOAuthVideo {\n  id: string;\n  title: string;\n  description: string;\n  publishedAt: string;\n  thumbnails: {\n    default: string;\n    medium: string;\n    high: string;\n  };\n  statistics: {\n    viewCount: number;\n    likeCount: number;\n    commentCount: number;\n  };\n}\n\nexport interface YouTubeOAuthAnalytics {\n  stats: YouTubeOAuthStats;\n  recentVideos: YouTubeOAuthVideo[];\n  monthlySubscribers: { month: string; subscribers: number }[];\n  monthlyViews: { month: string; views: number }[];\n  monthlyEngagement: { month: string; engagement: number }[];\n}\n\nclass YouTubeOAuthService {\n  private config: YouTubeOAuthConfig | null = null;\n  private accessToken: string | null = null;\n  private refreshToken: string | null = null;\n\n  constructor() {\n    this.loadConfig();\n    this.loadTokens();\n  }\n\n  private loadConfig(): void {\n    const saved = localStorage.getItem('youtubeOAuthConfig');\n    if (saved) {\n      this.config = JSON.parse(saved);\n    }\n  }\n\n  private loadTokens(): void {\n    this.accessToken = localStorage.getItem('youtubeOAuthAccessToken');\n    this.refreshToken = localStorage.getItem('youtubeOAuthRefreshToken');\n  }\n\n  private saveConfig(): void {\n    if (this.config) {\n      localStorage.setItem('youtubeOAuthConfig', JSON.stringify(this.config));\n    }\n  }\n\n  private saveTokens(): void {\n    if (this.accessToken) {\n      localStorage.setItem('youtubeOAuthAccessToken', this.accessToken);\n    }\n    if (this.refreshToken) {\n      localStorage.setItem('youtubeOAuthRefreshToken', this.refreshToken);\n    }\n  }\n\n  setConfig(config: YouTubeOAuthConfig): void {\n    this.config = config;\n    this.saveConfig();\n  }\n\n  getConfig(): YouTubeOAuthConfig | null {\n    return this.config;\n  }\n\n  isAuthenticated(): boolean {\n    return !!this.accessToken;\n  }\n\n  getAuthUrl(): string {\n    if (!this.config) {\n      throw new Error('YouTube OAuth configuration not set');\n    }\n\n    const params = new URLSearchParams({\n      client_id: this.config.clientId,\n      redirect_uri: this.config.redirectUri,\n      response_type: 'code',\n      scope: 'https://www.googleapis.com/auth/youtube.readonly',\n      access_type: 'offline',\n      prompt: 'consent'\n    });\n\n    return `https://accounts.google.com/o/oauth2/v2/auth?${params.toString()}`;\n  }\n\n  async handleOAuthCallback(code: string): Promise<boolean> {\n    if (!this.config) {\n      throw new Error('YouTube OAuth configuration not set');\n    }\n\n    try {\n      const response = await fetch('https://oauth2.googleapis.com/token', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/x-www-form-urlencoded',\n        },\n        body: new URLSearchParams({\n          client_id: this.config.clientId,\n          client_secret: this.config.clientSecret,\n          code: code,\n          grant_type: 'authorization_code',\n          redirect_uri: this.config.redirectUri,\n        }),\n      });\n\n      if (!response.ok) {\n        const error = await response.text();\n        throw new Error(`OAuth token exchange failed: ${error}`);\n      }\n\n      const data = await response.json();\n      this.accessToken = data.access_token;\n      this.refreshToken = data.refresh_token;\n      this.saveTokens();\n\n      return true;\n    } catch (error) {\n      console.error('YouTube OAuth callback error:', error);\n      return false;\n    }\n  }\n\n  async refreshAccessToken(): Promise<boolean> {\n    if (!this.config || !this.refreshToken) {\n      return false;\n    }\n\n    try {\n      const response = await fetch('https://oauth2.googleapis.com/token', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/x-www-form-urlencoded',\n        },\n        body: new URLSearchParams({\n          client_id: this.config.clientId,\n          client_secret: this.config.clientSecret,\n          refresh_token: this.refreshToken,\n          grant_type: 'refresh_token',\n        }),\n      });\n\n      if (!response.ok) {\n        throw new Error('Failed to refresh access token');\n      }\n\n      const data = await response.json();\n      this.accessToken = data.access_token;\n      this.saveTokens();\n\n      return true;\n    } catch (error) {\n      console.error('YouTube token refresh error:', error);\n      return false;\n    }\n  }\n\n  private async makeAuthenticatedRequest(url: string): Promise<any> {\n    if (!this.accessToken) {\n      throw new Error('No access token available');\n    }\n\n    const response = await fetch(url, {\n      headers: {\n        'Authorization': `Bearer ${this.accessToken}`,\n      },\n    });\n\n    if (response.status === 401) {\n      // Token expired, try to refresh\n      const refreshed = await this.refreshAccessToken();\n      if (refreshed) {\n        // Retry the request with new token\n        return this.makeAuthenticatedRequest(url);\n      } else {\n        throw new Error('Authentication failed and token refresh failed');\n      }\n    }\n\n    if (!response.ok) {\n      throw new Error(`YouTube API request failed: ${response.statusText}`);\n    }\n\n    return response.json();\n  }\n\n  async getChannelStats(): Promise<YouTubeOAuthStats> {\n    const url = 'https://www.googleapis.com/youtube/v3/channels?part=snippet,statistics&mine=true';\n    const data = await this.makeAuthenticatedRequest(url);\n    \n    if (!data.items || data.items.length === 0) {\n      throw new Error('No channel found for authenticated user');\n    }\n\n    const channel = data.items[0];\n    return {\n      channelId: channel.id,\n      channelTitle: channel.snippet.title,\n      subscriberCount: parseInt(channel.statistics.subscriberCount || '0'),\n      videoCount: parseInt(channel.statistics.videoCount || '0'),\n      viewCount: parseInt(channel.statistics.viewCount || '0'),\n      description: channel.snippet.description,\n      customUrl: channel.snippet.customUrl || '',\n      publishedAt: channel.snippet.publishedAt,\n      thumbnails: channel.snippet.thumbnails\n    };\n  }\n\n  async getRecentVideos(): Promise<YouTubeOAuthVideo[]> {\n    const url = 'https://www.googleapis.com/youtube/v3/search?part=snippet&forMine=true&type=video&order=date&maxResults=10';\n    const data = await this.makeAuthenticatedRequest(url);\n    \n    if (!data.items || data.items.length === 0) {\n      return [];\n    }\n\n    // Get video statistics for each video\n    const videoIds = data.items.map((item: any) => item.id.videoId).join(',');\n    const statsUrl = `https://www.googleapis.com/youtube/v3/videos?part=statistics&id=${videoIds}`;\n    const statsData = await this.makeAuthenticatedRequest(statsUrl);\n\n    return data.items.map((item: any, index: number) => {\n      const stats = statsData.items[index]?.statistics || {};\n      return {\n        id: item.id.videoId,\n        title: item.snippet.title,\n        description: item.snippet.description,\n        publishedAt: item.snippet.publishedAt,\n        thumbnails: item.snippet.thumbnails,\n        statistics: {\n          viewCount: parseInt(stats.viewCount || '0'),\n          likeCount: parseInt(stats.likeCount || '0'),\n          commentCount: parseInt(stats.commentCount || '0')\n        }\n      };\n    });\n  }\n\n  async getAnalytics(): Promise<YouTubeOAuthAnalytics> {\n    try {\n      const [stats, recentVideos] = await Promise.all([\n        this.getChannelStats(),\n        this.getRecentVideos()\n      ]);\n\n      // Generate mock analytics data for now\n      // In a real implementation, you'd fetch historical data from YouTube Analytics API\n      const monthlySubscribers = this.generateMonthlyData(stats.subscriberCount, 12, 'subscribers') as { month: string; subscribers: number }[];\n      const monthlyViews = this.generateMonthlyData(stats.viewCount, 12, 'views') as { month: string; views: number }[];\n      const monthlyEngagement = this.generateMonthlyData(\n        recentVideos.reduce((sum, video) => sum + video.statistics.likeCount + video.statistics.commentCount, 0),\n        12,\n        'engagement'\n      ) as { month: string; engagement: number }[];\n\n      return {\n        stats,\n        recentVideos,\n        monthlySubscribers,\n        monthlyViews,\n        monthlyEngagement\n      };\n    } catch (error) {\n      console.error('Error fetching YouTube analytics:', error);\n      throw error;\n    }\n  }\n\n  private generateMonthlyData(currentValue: number, months: number, type: 'subscribers' | 'views' | 'engagement'): { month: string; [key: string]: any }[] {\n    const data = [];\n    const now = new Date();\n    \n    for (let i = months - 1; i >= 0; i--) {\n      const date = new Date(now.getFullYear(), now.getMonth() - i, 1);\n      const month = date.toLocaleDateString('en-US', { month: 'short', year: 'numeric' });\n      // Generate realistic progression data\n      const factor = 0.8 + (Math.random() * 0.4); // 0.8 to 1.2\n      const value = Math.floor(currentValue * factor * (i / months + 0.1));\n      data.push({ month, [type]: value });\n    }\n    \n    return data;\n  }\n\n  logout(): void {\n    this.accessToken = null;\n    this.refreshToken = null;\n    localStorage.removeItem('youtubeOAuthAccessToken');\n    localStorage.removeItem('youtubeOAuthRefreshToken');\n  }\n}\n\nexport const youtubeOAuthService = new YouTubeOAuthService(); "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}