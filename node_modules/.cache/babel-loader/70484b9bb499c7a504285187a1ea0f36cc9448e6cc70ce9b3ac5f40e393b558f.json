{"ast":null,"code":"import{youtubeService}from'./youtubeService';class DataCollectionService{constructor(){this.STORAGE_KEY='youtube_historical_data';this.DAILY_COLLECTION_KEY='youtube_daily_collection';}// Check if we should collect data today\nshouldCollectToday(){const lastCollection=localStorage.getItem(this.DAILY_COLLECTION_KEY);console.log('DataCollectionService: Checking if should collect today');console.log('DataCollectionService: Last collection date:',lastCollection);if(!lastCollection){console.log('DataCollectionService: No last collection found, should collect today');return true;}const lastDate=new Date(lastCollection);const today=new Date();// Use local date strings for comparison\nconst lastDateString=lastDate.toLocaleDateString('en-CA');const todayDateString=today.toLocaleDateString('en-CA');console.log('DataCollectionService: Last collection date object:',lastDate);console.log('DataCollectionService: Today date object:',today);console.log('DataCollectionService: Date comparison:',{lastDateString,todayDateString,lastDate:lastDate.getDate(),todayDate:today.getDate(),lastMonth:lastDate.getMonth(),todayMonth:today.getMonth(),lastYear:lastDate.getFullYear(),todayYear:today.getFullYear()});// Check if it's a different day using local date strings\nconst shouldCollect=lastDateString!==todayDateString;console.log('DataCollectionService: Should collect today:',shouldCollect);return shouldCollect;}// Collect and save today's data\nasync collectDailyData(){console.log('DataCollectionService: Starting daily data collection');// Check if YouTube service is configured\nconst youtubeConfig=youtubeService.getConfig();console.log('DataCollectionService: YouTube config:',youtubeConfig);if(!youtubeConfig||!youtubeConfig.apiKey||!youtubeConfig.channelId){console.error('DataCollectionService: YouTube not properly configured');throw new Error('YouTube service not properly configured. Please set up your API key and channel ID first.');}try{console.log('DataCollectionService: Fetching channel stats from YouTube service');const channelStats=await youtubeService.getChannelStats();console.log('DataCollectionService: Received channel stats:',channelStats);if(!channelStats){throw new Error('Failed to fetch channel stats from YouTube service');}const todayStats={date:new Date().toLocaleDateString('en-CA'),// YYYY-MM-DD format in local timezone\nsubscriberCount:channelStats.subscriberCount,viewCount:channelStats.viewCount,videoCount:channelStats.videoCount,channelName:channelStats.channelName};console.log('DataCollectionService: Created today stats:',todayStats);// Get existing historical data\nconst historicalData=this.getHistoricalData();console.log('DataCollectionService: Current historical data:',historicalData);// Add today's data if it doesn't exist\nconst existingIndex=historicalData.dailyStats.findIndex(stat=>stat.date===todayStats.date);console.log('DataCollectionService: Existing index for today:',existingIndex);if(existingIndex===-1){console.log('DataCollectionService: Adding today\\'s data to historical data');historicalData.dailyStats.push(todayStats);historicalData.lastUpdated=new Date().toISOString();// Save updated data\nconsole.log('DataCollectionService: Saving to localStorage...');localStorage.setItem(this.STORAGE_KEY,JSON.stringify(historicalData));localStorage.setItem(this.DAILY_COLLECTION_KEY,new Date().toISOString());console.log('DataCollectionService: Daily data collected and saved:',todayStats);console.log('DataCollectionService: Updated historical data:',historicalData);console.log('DataCollectionService: localStorage keys saved:',{STORAGE_KEY:this.STORAGE_KEY,DAILY_COLLECTION_KEY:this.DAILY_COLLECTION_KEY});}else{console.log('DataCollectionService: Today\\'s data already exists, skipping');}}catch(error){console.error('DataCollectionService: Error collecting daily data:',error);console.error('DataCollectionService: Error details:',{message:error instanceof Error?error.message:String(error),stack:error instanceof Error?error.stack:undefined});throw error;// Re-throw to let the UI handle the error\n}}// Get historical data from localStorage\ngetHistoricalData(){const stored=localStorage.getItem(this.STORAGE_KEY);if(stored){return JSON.parse(stored);}return{dailyStats:[],lastUpdated:new Date().toISOString()};}// Get data for specific time periods\ngetDataForPeriod(days){const historicalData=this.getHistoricalData();const today=new Date();const cutoffDate=new Date(today.getTime()-days*24*60*60*1000);return historicalData.dailyStats.filter(stat=>{const statDate=new Date(stat.date);return statDate>=cutoffDate;}).sort((a,b)=>new Date(a.date).getTime()-new Date(b.date).getTime());}// Get monthly aggregated data\ngetMonthlyData(months){const historicalData=this.getHistoricalData();const today=new Date();const cutoffDate=new Date(today.getFullYear(),today.getMonth()-months,1);const monthlyData=new Map();historicalData.dailyStats.forEach(stat=>{const statDate=new Date(stat.date);if(statDate>=cutoffDate){const monthKey=statDate.toLocaleDateString('en-US',{year:'numeric',month:'short'});if(!monthlyData.has(monthKey)){monthlyData.set(monthKey,{subscribers:0,views:0,count:0});}const monthData=monthlyData.get(monthKey);monthData.subscribers+=stat.subscriberCount;monthData.views+=stat.viewCount;monthData.count+=1;}});// Calculate averages for each month\nreturn Array.from(monthlyData.entries()).map(_ref=>{let[month,data]=_ref;return{month,subscribers:Math.round(data.subscribers/data.count),views:Math.round(data.views/data.count)};}).sort((a,b)=>new Date(a.month).getTime()-new Date(b.month).getTime());}// Initialize daily collection if needed\nasync initializeDailyCollection(){if(this.shouldCollectToday()){await this.collectDailyData();}}// Clear historical data (for testing)\nclearHistoricalData(){localStorage.removeItem(this.STORAGE_KEY);localStorage.removeItem(this.DAILY_COLLECTION_KEY);}}export const dataCollectionService=new DataCollectionService();","map":{"version":3,"names":["youtubeService","DataCollectionService","constructor","STORAGE_KEY","DAILY_COLLECTION_KEY","shouldCollectToday","lastCollection","localStorage","getItem","console","log","lastDate","Date","today","lastDateString","toLocaleDateString","todayDateString","getDate","todayDate","lastMonth","getMonth","todayMonth","lastYear","getFullYear","todayYear","shouldCollect","collectDailyData","youtubeConfig","getConfig","apiKey","channelId","error","Error","channelStats","getChannelStats","todayStats","date","subscriberCount","viewCount","videoCount","channelName","historicalData","getHistoricalData","existingIndex","dailyStats","findIndex","stat","push","lastUpdated","toISOString","setItem","JSON","stringify","message","String","stack","undefined","stored","parse","getDataForPeriod","days","cutoffDate","getTime","filter","statDate","sort","a","b","getMonthlyData","months","monthlyData","Map","forEach","monthKey","year","month","has","set","subscribers","views","count","monthData","get","Array","from","entries","map","_ref","data","Math","round","initializeDailyCollection","clearHistoricalData","removeItem","dataCollectionService"],"sources":["/Users/marcodamm/Desktop/Stats_SocialMedia/src/services/dataCollectionService.ts"],"sourcesContent":["import { youtubeService } from './youtubeService';\n\nexport interface DailyStats {\n  date: string;\n  subscriberCount: number;\n  viewCount: number;\n  videoCount: number;\n  channelName: string;\n}\n\nexport interface HistoricalData {\n  dailyStats: DailyStats[];\n  lastUpdated: string;\n}\n\nclass DataCollectionService {\n  private readonly STORAGE_KEY = 'youtube_historical_data';\n  private readonly DAILY_COLLECTION_KEY = 'youtube_daily_collection';\n\n  // Check if we should collect data today\n  shouldCollectToday(): boolean {\n    const lastCollection = localStorage.getItem(this.DAILY_COLLECTION_KEY);\n    console.log('DataCollectionService: Checking if should collect today');\n    console.log('DataCollectionService: Last collection date:', lastCollection);\n    \n    if (!lastCollection) {\n      console.log('DataCollectionService: No last collection found, should collect today');\n      return true;\n    }\n\n    const lastDate = new Date(lastCollection);\n    const today = new Date();\n    \n    // Use local date strings for comparison\n    const lastDateString = lastDate.toLocaleDateString('en-CA');\n    const todayDateString = today.toLocaleDateString('en-CA');\n    \n    console.log('DataCollectionService: Last collection date object:', lastDate);\n    console.log('DataCollectionService: Today date object:', today);\n    console.log('DataCollectionService: Date comparison:', {\n      lastDateString,\n      todayDateString,\n      lastDate: lastDate.getDate(),\n      todayDate: today.getDate(),\n      lastMonth: lastDate.getMonth(),\n      todayMonth: today.getMonth(),\n      lastYear: lastDate.getFullYear(),\n      todayYear: today.getFullYear()\n    });\n    \n    // Check if it's a different day using local date strings\n    const shouldCollect = lastDateString !== todayDateString;\n           \n    console.log('DataCollectionService: Should collect today:', shouldCollect);\n    return shouldCollect;\n  }\n\n  // Collect and save today's data\n  async collectDailyData(): Promise<void> {\n    console.log('DataCollectionService: Starting daily data collection');\n    \n    // Check if YouTube service is configured\n    const youtubeConfig = youtubeService.getConfig();\n    console.log('DataCollectionService: YouTube config:', youtubeConfig);\n    \n    if (!youtubeConfig || !youtubeConfig.apiKey || !youtubeConfig.channelId) {\n      console.error('DataCollectionService: YouTube not properly configured');\n      throw new Error('YouTube service not properly configured. Please set up your API key and channel ID first.');\n    }\n    \n    try {\n      console.log('DataCollectionService: Fetching channel stats from YouTube service');\n      const channelStats = await youtubeService.getChannelStats();\n      console.log('DataCollectionService: Received channel stats:', channelStats);\n      \n      if (!channelStats) {\n        throw new Error('Failed to fetch channel stats from YouTube service');\n      }\n      \n      const todayStats: DailyStats = {\n        date: new Date().toLocaleDateString('en-CA'), // YYYY-MM-DD format in local timezone\n        subscriberCount: channelStats.subscriberCount,\n        viewCount: channelStats.viewCount,\n        videoCount: channelStats.videoCount,\n        channelName: channelStats.channelName,\n      };\n      \n      console.log('DataCollectionService: Created today stats:', todayStats);\n\n      // Get existing historical data\n      const historicalData = this.getHistoricalData();\n      console.log('DataCollectionService: Current historical data:', historicalData);\n      \n      // Add today's data if it doesn't exist\n      const existingIndex = historicalData.dailyStats.findIndex(\n        stat => stat.date === todayStats.date\n      );\n      \n      console.log('DataCollectionService: Existing index for today:', existingIndex);\n      \n      if (existingIndex === -1) {\n        console.log('DataCollectionService: Adding today\\'s data to historical data');\n        historicalData.dailyStats.push(todayStats);\n        historicalData.lastUpdated = new Date().toISOString();\n        \n        // Save updated data\n        console.log('DataCollectionService: Saving to localStorage...');\n        localStorage.setItem(this.STORAGE_KEY, JSON.stringify(historicalData));\n        localStorage.setItem(this.DAILY_COLLECTION_KEY, new Date().toISOString());\n        \n        console.log('DataCollectionService: Daily data collected and saved:', todayStats);\n        console.log('DataCollectionService: Updated historical data:', historicalData);\n        console.log('DataCollectionService: localStorage keys saved:', {\n          STORAGE_KEY: this.STORAGE_KEY,\n          DAILY_COLLECTION_KEY: this.DAILY_COLLECTION_KEY\n        });\n      } else {\n        console.log('DataCollectionService: Today\\'s data already exists, skipping');\n      }\n    } catch (error) {\n      console.error('DataCollectionService: Error collecting daily data:', error);\n      console.error('DataCollectionService: Error details:', {\n        message: error instanceof Error ? error.message : String(error),\n        stack: error instanceof Error ? error.stack : undefined\n      });\n      throw error; // Re-throw to let the UI handle the error\n    }\n  }\n\n  // Get historical data from localStorage\n  getHistoricalData(): HistoricalData {\n    const stored = localStorage.getItem(this.STORAGE_KEY);\n    if (stored) {\n      return JSON.parse(stored);\n    }\n    \n    return {\n      dailyStats: [],\n      lastUpdated: new Date().toISOString(),\n    };\n  }\n\n  // Get data for specific time periods\n  getDataForPeriod(days: number): DailyStats[] {\n    const historicalData = this.getHistoricalData();\n    const today = new Date();\n    const cutoffDate = new Date(today.getTime() - (days * 24 * 60 * 60 * 1000));\n    \n    return historicalData.dailyStats.filter(stat => {\n      const statDate = new Date(stat.date);\n      return statDate >= cutoffDate;\n    }).sort((a, b) => new Date(a.date).getTime() - new Date(b.date).getTime());\n  }\n\n  // Get monthly aggregated data\n  getMonthlyData(months: number): Array<{ month: string; subscribers: number; views: number }> {\n    const historicalData = this.getHistoricalData();\n    const today = new Date();\n    const cutoffDate = new Date(today.getFullYear(), today.getMonth() - months, 1);\n    \n    const monthlyData = new Map<string, { subscribers: number; views: number; count: number }>();\n    \n    historicalData.dailyStats.forEach(stat => {\n      const statDate = new Date(stat.date);\n      if (statDate >= cutoffDate) {\n        const monthKey = statDate.toLocaleDateString('en-US', { year: 'numeric', month: 'short' });\n        \n        if (!monthlyData.has(monthKey)) {\n          monthlyData.set(monthKey, { subscribers: 0, views: 0, count: 0 });\n        }\n        \n        const monthData = monthlyData.get(monthKey)!;\n        monthData.subscribers += stat.subscriberCount;\n        monthData.views += stat.viewCount;\n        monthData.count += 1;\n      }\n    });\n    \n    // Calculate averages for each month\n    return Array.from(monthlyData.entries()).map(([month, data]) => ({\n      month,\n      subscribers: Math.round(data.subscribers / data.count),\n      views: Math.round(data.views / data.count),\n    })).sort((a, b) => new Date(a.month).getTime() - new Date(b.month).getTime());\n  }\n\n  // Initialize daily collection if needed\n  async initializeDailyCollection(): Promise<void> {\n    if (this.shouldCollectToday()) {\n      await this.collectDailyData();\n    }\n  }\n\n  // Clear historical data (for testing)\n  clearHistoricalData(): void {\n    localStorage.removeItem(this.STORAGE_KEY);\n    localStorage.removeItem(this.DAILY_COLLECTION_KEY);\n  }\n}\n\nexport const dataCollectionService = new DataCollectionService(); "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}