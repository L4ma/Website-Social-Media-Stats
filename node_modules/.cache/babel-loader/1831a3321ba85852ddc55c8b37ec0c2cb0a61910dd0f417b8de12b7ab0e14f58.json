{"ast":null,"code":"import { youtubeService } from './youtubeService';\nclass DataCollectionService {\n  constructor() {\n    this.STORAGE_KEY = 'youtube_historical_data';\n    this.DAILY_COLLECTION_KEY = 'youtube_daily_collection';\n  }\n  // Check if we should collect data today\n  shouldCollectToday() {\n    const lastCollection = localStorage.getItem(this.DAILY_COLLECTION_KEY);\n    console.log('DataCollectionService: Checking if should collect today');\n    console.log('DataCollectionService: Last collection date:', lastCollection);\n    if (!lastCollection) {\n      console.log('DataCollectionService: No last collection found, should collect today');\n      return true;\n    }\n    const lastDate = new Date(lastCollection);\n    const today = new Date();\n    console.log('DataCollectionService: Last collection date object:', lastDate);\n    console.log('DataCollectionService: Today date object:', today);\n    console.log('DataCollectionService: Date comparison:', {\n      lastDate: lastDate.getDate(),\n      todayDate: today.getDate(),\n      lastMonth: lastDate.getMonth(),\n      todayMonth: today.getMonth(),\n      lastYear: lastDate.getFullYear(),\n      todayYear: today.getFullYear()\n    });\n\n    // Check if it's a different day\n    const shouldCollect = lastDate.getDate() !== today.getDate() || lastDate.getMonth() !== today.getMonth() || lastDate.getFullYear() !== today.getFullYear();\n    console.log('DataCollectionService: Should collect today:', shouldCollect);\n    return shouldCollect;\n  }\n\n  // Collect and save today's data\n  async collectDailyData() {\n    console.log('DataCollectionService: Starting daily data collection');\n    try {\n      console.log('DataCollectionService: Fetching channel stats from YouTube service');\n      const channelStats = await youtubeService.getChannelStats();\n      console.log('DataCollectionService: Received channel stats:', channelStats);\n      const todayStats = {\n        date: new Date().toISOString().split('T')[0],\n        // YYYY-MM-DD format\n        subscriberCount: channelStats.subscriberCount,\n        viewCount: channelStats.viewCount,\n        videoCount: channelStats.videoCount,\n        channelName: channelStats.channelName\n      };\n      console.log('DataCollectionService: Created today stats:', todayStats);\n\n      // Get existing historical data\n      const historicalData = this.getHistoricalData();\n      console.log('DataCollectionService: Current historical data:', historicalData);\n\n      // Add today's data if it doesn't exist\n      const existingIndex = historicalData.dailyStats.findIndex(stat => stat.date === todayStats.date);\n      console.log('DataCollectionService: Existing index for today:', existingIndex);\n      if (existingIndex === -1) {\n        console.log('DataCollectionService: Adding today\\'s data to historical data');\n        historicalData.dailyStats.push(todayStats);\n        historicalData.lastUpdated = new Date().toISOString();\n\n        // Save updated data\n        localStorage.setItem(this.STORAGE_KEY, JSON.stringify(historicalData));\n        localStorage.setItem(this.DAILY_COLLECTION_KEY, new Date().toISOString());\n        console.log('DataCollectionService: Daily data collected and saved:', todayStats);\n        console.log('DataCollectionService: Updated historical data:', historicalData);\n      } else {\n        console.log('DataCollectionService: Today\\'s data already exists, skipping');\n      }\n    } catch (error) {\n      console.error('DataCollectionService: Error collecting daily data:', error);\n      throw error; // Re-throw to let the UI handle the error\n    }\n  }\n\n  // Get historical data from localStorage\n  getHistoricalData() {\n    const stored = localStorage.getItem(this.STORAGE_KEY);\n    if (stored) {\n      return JSON.parse(stored);\n    }\n    return {\n      dailyStats: [],\n      lastUpdated: new Date().toISOString()\n    };\n  }\n\n  // Get data for specific time periods\n  getDataForPeriod(days) {\n    const historicalData = this.getHistoricalData();\n    const today = new Date();\n    const cutoffDate = new Date(today.getTime() - days * 24 * 60 * 60 * 1000);\n    return historicalData.dailyStats.filter(stat => {\n      const statDate = new Date(stat.date);\n      return statDate >= cutoffDate;\n    }).sort((a, b) => new Date(a.date).getTime() - new Date(b.date).getTime());\n  }\n\n  // Get monthly aggregated data\n  getMonthlyData(months) {\n    const historicalData = this.getHistoricalData();\n    const today = new Date();\n    const cutoffDate = new Date(today.getFullYear(), today.getMonth() - months, 1);\n    const monthlyData = new Map();\n    historicalData.dailyStats.forEach(stat => {\n      const statDate = new Date(stat.date);\n      if (statDate >= cutoffDate) {\n        const monthKey = statDate.toLocaleDateString('en-US', {\n          year: 'numeric',\n          month: 'short'\n        });\n        if (!monthlyData.has(monthKey)) {\n          monthlyData.set(monthKey, {\n            subscribers: 0,\n            views: 0,\n            count: 0\n          });\n        }\n        const monthData = monthlyData.get(monthKey);\n        monthData.subscribers += stat.subscriberCount;\n        monthData.views += stat.viewCount;\n        monthData.count += 1;\n      }\n    });\n\n    // Calculate averages for each month\n    return Array.from(monthlyData.entries()).map(([month, data]) => ({\n      month,\n      subscribers: Math.round(data.subscribers / data.count),\n      views: Math.round(data.views / data.count)\n    })).sort((a, b) => new Date(a.month).getTime() - new Date(b.month).getTime());\n  }\n\n  // Initialize daily collection if needed\n  async initializeDailyCollection() {\n    if (this.shouldCollectToday()) {\n      await this.collectDailyData();\n    }\n  }\n\n  // Clear historical data (for testing)\n  clearHistoricalData() {\n    localStorage.removeItem(this.STORAGE_KEY);\n    localStorage.removeItem(this.DAILY_COLLECTION_KEY);\n  }\n}\nexport const dataCollectionService = new DataCollectionService();","map":{"version":3,"names":["youtubeService","DataCollectionService","constructor","STORAGE_KEY","DAILY_COLLECTION_KEY","shouldCollectToday","lastCollection","localStorage","getItem","console","log","lastDate","Date","today","getDate","todayDate","lastMonth","getMonth","todayMonth","lastYear","getFullYear","todayYear","shouldCollect","collectDailyData","channelStats","getChannelStats","todayStats","date","toISOString","split","subscriberCount","viewCount","videoCount","channelName","historicalData","getHistoricalData","existingIndex","dailyStats","findIndex","stat","push","lastUpdated","setItem","JSON","stringify","error","stored","parse","getDataForPeriod","days","cutoffDate","getTime","filter","statDate","sort","a","b","getMonthlyData","months","monthlyData","Map","forEach","monthKey","toLocaleDateString","year","month","has","set","subscribers","views","count","monthData","get","Array","from","entries","map","data","Math","round","initializeDailyCollection","clearHistoricalData","removeItem","dataCollectionService"],"sources":["/Users/marcodamm/Desktop/Stats_SocialMedia/src/services/dataCollectionService.ts"],"sourcesContent":["import { youtubeService } from './youtubeService';\n\nexport interface DailyStats {\n  date: string;\n  subscriberCount: number;\n  viewCount: number;\n  videoCount: number;\n  channelName: string;\n}\n\nexport interface HistoricalData {\n  dailyStats: DailyStats[];\n  lastUpdated: string;\n}\n\nclass DataCollectionService {\n  private readonly STORAGE_KEY = 'youtube_historical_data';\n  private readonly DAILY_COLLECTION_KEY = 'youtube_daily_collection';\n\n  // Check if we should collect data today\n  shouldCollectToday(): boolean {\n    const lastCollection = localStorage.getItem(this.DAILY_COLLECTION_KEY);\n    console.log('DataCollectionService: Checking if should collect today');\n    console.log('DataCollectionService: Last collection date:', lastCollection);\n    \n    if (!lastCollection) {\n      console.log('DataCollectionService: No last collection found, should collect today');\n      return true;\n    }\n\n    const lastDate = new Date(lastCollection);\n    const today = new Date();\n    \n    console.log('DataCollectionService: Last collection date object:', lastDate);\n    console.log('DataCollectionService: Today date object:', today);\n    console.log('DataCollectionService: Date comparison:', {\n      lastDate: lastDate.getDate(),\n      todayDate: today.getDate(),\n      lastMonth: lastDate.getMonth(),\n      todayMonth: today.getMonth(),\n      lastYear: lastDate.getFullYear(),\n      todayYear: today.getFullYear()\n    });\n    \n    // Check if it's a different day\n    const shouldCollect = lastDate.getDate() !== today.getDate() || \n           lastDate.getMonth() !== today.getMonth() || \n           lastDate.getFullYear() !== today.getFullYear();\n           \n    console.log('DataCollectionService: Should collect today:', shouldCollect);\n    return shouldCollect;\n  }\n\n  // Collect and save today's data\n  async collectDailyData(): Promise<void> {\n    console.log('DataCollectionService: Starting daily data collection');\n    try {\n      console.log('DataCollectionService: Fetching channel stats from YouTube service');\n      const channelStats = await youtubeService.getChannelStats();\n      console.log('DataCollectionService: Received channel stats:', channelStats);\n      \n      const todayStats: DailyStats = {\n        date: new Date().toISOString().split('T')[0], // YYYY-MM-DD format\n        subscriberCount: channelStats.subscriberCount,\n        viewCount: channelStats.viewCount,\n        videoCount: channelStats.videoCount,\n        channelName: channelStats.channelName,\n      };\n      \n      console.log('DataCollectionService: Created today stats:', todayStats);\n\n      // Get existing historical data\n      const historicalData = this.getHistoricalData();\n      console.log('DataCollectionService: Current historical data:', historicalData);\n      \n      // Add today's data if it doesn't exist\n      const existingIndex = historicalData.dailyStats.findIndex(\n        stat => stat.date === todayStats.date\n      );\n      \n      console.log('DataCollectionService: Existing index for today:', existingIndex);\n      \n      if (existingIndex === -1) {\n        console.log('DataCollectionService: Adding today\\'s data to historical data');\n        historicalData.dailyStats.push(todayStats);\n        historicalData.lastUpdated = new Date().toISOString();\n        \n        // Save updated data\n        localStorage.setItem(this.STORAGE_KEY, JSON.stringify(historicalData));\n        localStorage.setItem(this.DAILY_COLLECTION_KEY, new Date().toISOString());\n        \n        console.log('DataCollectionService: Daily data collected and saved:', todayStats);\n        console.log('DataCollectionService: Updated historical data:', historicalData);\n      } else {\n        console.log('DataCollectionService: Today\\'s data already exists, skipping');\n      }\n    } catch (error) {\n      console.error('DataCollectionService: Error collecting daily data:', error);\n      throw error; // Re-throw to let the UI handle the error\n    }\n  }\n\n  // Get historical data from localStorage\n  getHistoricalData(): HistoricalData {\n    const stored = localStorage.getItem(this.STORAGE_KEY);\n    if (stored) {\n      return JSON.parse(stored);\n    }\n    \n    return {\n      dailyStats: [],\n      lastUpdated: new Date().toISOString(),\n    };\n  }\n\n  // Get data for specific time periods\n  getDataForPeriod(days: number): DailyStats[] {\n    const historicalData = this.getHistoricalData();\n    const today = new Date();\n    const cutoffDate = new Date(today.getTime() - (days * 24 * 60 * 60 * 1000));\n    \n    return historicalData.dailyStats.filter(stat => {\n      const statDate = new Date(stat.date);\n      return statDate >= cutoffDate;\n    }).sort((a, b) => new Date(a.date).getTime() - new Date(b.date).getTime());\n  }\n\n  // Get monthly aggregated data\n  getMonthlyData(months: number): Array<{ month: string; subscribers: number; views: number }> {\n    const historicalData = this.getHistoricalData();\n    const today = new Date();\n    const cutoffDate = new Date(today.getFullYear(), today.getMonth() - months, 1);\n    \n    const monthlyData = new Map<string, { subscribers: number; views: number; count: number }>();\n    \n    historicalData.dailyStats.forEach(stat => {\n      const statDate = new Date(stat.date);\n      if (statDate >= cutoffDate) {\n        const monthKey = statDate.toLocaleDateString('en-US', { year: 'numeric', month: 'short' });\n        \n        if (!monthlyData.has(monthKey)) {\n          monthlyData.set(monthKey, { subscribers: 0, views: 0, count: 0 });\n        }\n        \n        const monthData = monthlyData.get(monthKey)!;\n        monthData.subscribers += stat.subscriberCount;\n        monthData.views += stat.viewCount;\n        monthData.count += 1;\n      }\n    });\n    \n    // Calculate averages for each month\n    return Array.from(monthlyData.entries()).map(([month, data]) => ({\n      month,\n      subscribers: Math.round(data.subscribers / data.count),\n      views: Math.round(data.views / data.count),\n    })).sort((a, b) => new Date(a.month).getTime() - new Date(b.month).getTime());\n  }\n\n  // Initialize daily collection if needed\n  async initializeDailyCollection(): Promise<void> {\n    if (this.shouldCollectToday()) {\n      await this.collectDailyData();\n    }\n  }\n\n  // Clear historical data (for testing)\n  clearHistoricalData(): void {\n    localStorage.removeItem(this.STORAGE_KEY);\n    localStorage.removeItem(this.DAILY_COLLECTION_KEY);\n  }\n}\n\nexport const dataCollectionService = new DataCollectionService(); "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}