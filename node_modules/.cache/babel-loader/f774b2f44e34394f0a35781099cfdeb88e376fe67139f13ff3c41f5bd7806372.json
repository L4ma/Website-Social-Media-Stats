{"ast":null,"code":"import { youtubeConfig, buildYouTubeUrl, YOUTUBE_ENDPOINTS } from '../config/youtube';\nclass YouTubeService {\n  constructor() {\n    this.config = void 0;\n    // Try to load saved configuration from localStorage\n    const savedConfig = localStorage.getItem('youtubeConfig');\n    if (savedConfig) {\n      const parsed = JSON.parse(savedConfig);\n      this.config = {\n        channelId: parsed.channelId || youtubeConfig.channelId,\n        apiKey: parsed.apiKey || youtubeConfig.apiKey,\n        channelName: parsed.channelName || youtubeConfig.channelName,\n        channelUrl: parsed.channelUrl || youtubeConfig.channelUrl\n      };\n    } else {\n      this.config = youtubeConfig;\n    }\n  }\n  updateConfig(newConfig) {\n    this.config = newConfig;\n  }\n  async fetchFromAPI(url) {\n    try {\n      const response = await fetch(url);\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      return await response.json();\n    } catch (error) {\n      console.error('YouTube API Error:', error);\n      throw error;\n    }\n  }\n  async getChannelStats() {\n    if (!this.config.channelId || !this.config.apiKey) {\n      // Return mock data if no API key is configured\n      return {\n        subscriberCount: 12400,\n        videoCount: 89,\n        viewCount: 1800000,\n        channelName: this.config.channelName,\n        channelUrl: this.config.channelUrl,\n        channelId: this.config.channelId || 'mock-channel-id'\n      };\n    }\n    const url = buildYouTubeUrl(YOUTUBE_ENDPOINTS.channel, {\n      part: 'statistics,snippet',\n      id: this.config.channelId\n    }, this.config.apiKey);\n    const data = await this.fetchFromAPI(url);\n    if (data.items && data.items.length > 0) {\n      const channel = data.items[0];\n      return {\n        subscriberCount: parseInt(channel.statistics.subscriberCount || '0'),\n        videoCount: parseInt(channel.statistics.videoCount || '0'),\n        viewCount: parseInt(channel.statistics.viewCount || '0'),\n        channelName: channel.snippet.title,\n        channelUrl: `https://www.youtube.com/channel/${channel.id}`,\n        channelId: channel.id\n      };\n    }\n    throw new Error('Channel not found');\n  }\n  async getRecentVideos(limit = 10) {\n    if (!this.config.channelId || !this.config.apiKey) {\n      // Return mock data\n      return [{\n        id: 'mock-video-1',\n        title: 'Sample Video Title 1',\n        publishedAt: '2024-01-15T10:00:00Z',\n        viewCount: 15000,\n        likeCount: 1200,\n        commentCount: 89,\n        thumbnail: 'https://via.placeholder.com/320x180',\n        duration: 'PT10M30S'\n      }, {\n        id: 'mock-video-2',\n        title: 'Sample Video Title 2',\n        publishedAt: '2024-01-10T14:30:00Z',\n        viewCount: 22000,\n        likeCount: 1800,\n        commentCount: 156,\n        thumbnail: 'https://via.placeholder.com/320x180',\n        duration: 'PT15M45S'\n      }];\n    }\n    try {\n      const url = buildYouTubeUrl(YOUTUBE_ENDPOINTS.videos, {\n        part: 'snippet',\n        channelId: this.config.channelId,\n        order: 'date',\n        maxResults: limit.toString(),\n        type: 'video'\n      }, this.config.apiKey);\n      const data = await this.fetchFromAPI(url);\n      if (data.items) {\n        const videoIds = data.items.map(item => item.id.videoId).join(',');\n\n        // Get detailed video statistics\n        const statsUrl = buildYouTubeUrl(YOUTUBE_ENDPOINTS.videoStats, {\n          part: 'statistics,contentDetails',\n          id: videoIds\n        }, this.config.apiKey);\n        const statsData = await this.fetchFromAPI(statsUrl);\n        const statsMap = new Map();\n        if (statsData.items) {\n          statsData.items.forEach(item => {\n            statsMap.set(item.id, {\n              viewCount: parseInt(item.statistics.viewCount || '0'),\n              likeCount: parseInt(item.statistics.likeCount || '0'),\n              commentCount: parseInt(item.statistics.commentCount || '0'),\n              duration: item.contentDetails.duration\n            });\n          });\n        }\n        return data.items.map(item => {\n          const stats = statsMap.get(item.id.videoId) || {\n            viewCount: 0,\n            likeCount: 0,\n            commentCount: 0,\n            duration: 'PT0S'\n          };\n          return {\n            id: item.id.videoId,\n            title: item.snippet.title,\n            publishedAt: item.snippet.publishedAt,\n            viewCount: stats.viewCount,\n            likeCount: stats.likeCount,\n            commentCount: stats.commentCount,\n            thumbnail: item.snippet.thumbnails.medium.url,\n            duration: stats.duration\n          };\n        });\n      }\n      return [];\n    } catch (error) {\n      console.error('Error fetching recent videos:', error);\n      // Return mock data if API call fails\n      return [{\n        id: 'mock-video-1',\n        title: 'Sample Video Title 1',\n        publishedAt: '2024-01-15T10:00:00Z',\n        viewCount: 15000,\n        likeCount: 1200,\n        commentCount: 89,\n        thumbnail: 'https://via.placeholder.com/320x180',\n        duration: 'PT10M30S'\n      }, {\n        id: 'mock-video-2',\n        title: 'Sample Video Title 2',\n        publishedAt: '2024-01-10T14:30:00Z',\n        viewCount: 22000,\n        likeCount: 1800,\n        commentCount: 156,\n        thumbnail: 'https://via.placeholder.com/320x180',\n        duration: 'PT15M45S'\n      }];\n    }\n  }\n  async getAnalytics() {\n    const [channelStats, recentVideos] = await Promise.all([this.getChannelStats(), this.getRecentVideos()]);\n\n    // Generate realistic monthly data based on actual channel stats\n    const currentSubscribers = channelStats.subscriberCount;\n    const currentViews = channelStats.viewCount;\n\n    // Get current date and generate last 6 months\n    const now = new Date();\n    const months = [];\n    for (let i = 5; i >= 0; i--) {\n      const date = new Date(now.getFullYear(), now.getMonth() - i, 1);\n      months.push(date.toLocaleDateString('en-US', {\n        month: 'short'\n      }));\n    }\n\n    // Calculate progression factors for realistic growth\n    const progressionFactors = [0.7, 0.8, 0.85, 0.9, 0.95, 1.0];\n\n    // Calculate monthly progression based on current stats\n    const monthlyViews = months.map((month, index) => ({\n      month,\n      views: Math.round(currentViews * progressionFactors[index])\n    }));\n    const monthlySubscribers = months.map((month, index) => ({\n      month,\n      subscribers: Math.round(currentSubscribers * progressionFactors[index])\n    }));\n    return {\n      channelStats,\n      recentVideos,\n      monthlyViews,\n      monthlySubscribers\n    };\n  }\n}\nexport const youtubeService = new YouTubeService();","map":{"version":3,"names":["youtubeConfig","buildYouTubeUrl","YOUTUBE_ENDPOINTS","YouTubeService","constructor","config","savedConfig","localStorage","getItem","parsed","JSON","parse","channelId","apiKey","channelName","channelUrl","updateConfig","newConfig","fetchFromAPI","url","response","fetch","ok","Error","status","json","error","console","getChannelStats","subscriberCount","videoCount","viewCount","channel","part","id","data","items","length","parseInt","statistics","snippet","title","getRecentVideos","limit","publishedAt","likeCount","commentCount","thumbnail","duration","videos","order","maxResults","toString","type","videoIds","map","item","videoId","join","statsUrl","videoStats","statsData","statsMap","Map","forEach","set","contentDetails","stats","get","thumbnails","medium","getAnalytics","channelStats","recentVideos","Promise","all","currentSubscribers","currentViews","now","Date","months","i","date","getFullYear","getMonth","push","toLocaleDateString","month","progressionFactors","monthlyViews","index","views","Math","round","monthlySubscribers","subscribers","youtubeService"],"sources":["/Users/marcodamm/Desktop/Stats_SocialMedia/src/services/youtubeService.ts"],"sourcesContent":["import { youtubeConfig, buildYouTubeUrl, YOUTUBE_ENDPOINTS, YouTubeConfig } from '../config/youtube';\n\nexport interface YouTubeChannelStats {\n  subscriberCount: number;\n  videoCount: number;\n  viewCount: number;\n  channelName: string;\n  channelUrl: string;\n  channelId: string;\n}\n\nexport interface YouTubeVideo {\n  id: string;\n  title: string;\n  publishedAt: string;\n  viewCount: number;\n  likeCount: number;\n  commentCount: number;\n  thumbnail: string;\n  duration: string;\n}\n\nexport interface YouTubeAnalytics {\n  channelStats: YouTubeChannelStats;\n  recentVideos: YouTubeVideo[];\n  monthlyViews: Array<{ month: string; views: number }>;\n  monthlySubscribers: Array<{ month: string; subscribers: number }>;\n}\n\nclass YouTubeService {\n  private config: YouTubeConfig;\n\n  constructor() {\n    // Try to load saved configuration from localStorage\n    const savedConfig = localStorage.getItem('youtubeConfig');\n    if (savedConfig) {\n      const parsed = JSON.parse(savedConfig);\n      this.config = {\n        channelId: parsed.channelId || youtubeConfig.channelId,\n        apiKey: parsed.apiKey || youtubeConfig.apiKey,\n        channelName: parsed.channelName || youtubeConfig.channelName,\n        channelUrl: parsed.channelUrl || youtubeConfig.channelUrl,\n      };\n    } else {\n      this.config = youtubeConfig;\n    }\n  }\n\n  updateConfig(newConfig: YouTubeConfig) {\n    this.config = newConfig;\n  }\n\n  private async fetchFromAPI(url: string): Promise<any> {\n    try {\n      const response = await fetch(url);\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      return await response.json();\n    } catch (error) {\n      console.error('YouTube API Error:', error);\n      throw error;\n    }\n  }\n\n  async getChannelStats(): Promise<YouTubeChannelStats> {\n    if (!this.config.channelId || !this.config.apiKey) {\n      // Return mock data if no API key is configured\n      return {\n        subscriberCount: 12400,\n        videoCount: 89,\n        viewCount: 1800000,\n        channelName: this.config.channelName,\n        channelUrl: this.config.channelUrl,\n        channelId: this.config.channelId || 'mock-channel-id',\n      };\n    }\n\n    const url = buildYouTubeUrl(YOUTUBE_ENDPOINTS.channel, {\n      part: 'statistics,snippet',\n      id: this.config.channelId,\n    }, this.config.apiKey);\n\n    const data = await this.fetchFromAPI(url);\n    \n    if (data.items && data.items.length > 0) {\n      const channel = data.items[0];\n      return {\n        subscriberCount: parseInt(channel.statistics.subscriberCount || '0'),\n        videoCount: parseInt(channel.statistics.videoCount || '0'),\n        viewCount: parseInt(channel.statistics.viewCount || '0'),\n        channelName: channel.snippet.title,\n        channelUrl: `https://www.youtube.com/channel/${channel.id}`,\n        channelId: channel.id,\n      };\n    }\n\n    throw new Error('Channel not found');\n  }\n\n  async getRecentVideos(limit: number = 10): Promise<YouTubeVideo[]> {\n    if (!this.config.channelId || !this.config.apiKey) {\n      // Return mock data\n      return [\n        {\n          id: 'mock-video-1',\n          title: 'Sample Video Title 1',\n          publishedAt: '2024-01-15T10:00:00Z',\n          viewCount: 15000,\n          likeCount: 1200,\n          commentCount: 89,\n          thumbnail: 'https://via.placeholder.com/320x180',\n          duration: 'PT10M30S',\n        },\n        {\n          id: 'mock-video-2',\n          title: 'Sample Video Title 2',\n          publishedAt: '2024-01-10T14:30:00Z',\n          viewCount: 22000,\n          likeCount: 1800,\n          commentCount: 156,\n          thumbnail: 'https://via.placeholder.com/320x180',\n          duration: 'PT15M45S',\n        },\n      ];\n    }\n\n    try {\n      const url = buildYouTubeUrl(YOUTUBE_ENDPOINTS.videos, {\n        part: 'snippet',\n        channelId: this.config.channelId,\n        order: 'date',\n        maxResults: limit.toString(),\n        type: 'video',\n      }, this.config.apiKey);\n\n      const data = await this.fetchFromAPI(url);\n      \n      if (data.items) {\n        const videoIds = data.items.map((item: any) => item.id.videoId).join(',');\n        \n        // Get detailed video statistics\n        const statsUrl = buildYouTubeUrl(YOUTUBE_ENDPOINTS.videoStats, {\n          part: 'statistics,contentDetails',\n          id: videoIds,\n        }, this.config.apiKey);\n\n        const statsData = await this.fetchFromAPI(statsUrl);\n        const statsMap = new Map();\n        \n        if (statsData.items) {\n          statsData.items.forEach((item: any) => {\n            statsMap.set(item.id, {\n              viewCount: parseInt(item.statistics.viewCount || '0'),\n              likeCount: parseInt(item.statistics.likeCount || '0'),\n              commentCount: parseInt(item.statistics.commentCount || '0'),\n              duration: item.contentDetails.duration,\n            });\n          });\n        }\n\n        return data.items.map((item: any) => {\n          const stats = statsMap.get(item.id.videoId) || {\n            viewCount: 0,\n            likeCount: 0,\n            commentCount: 0,\n            duration: 'PT0S',\n          };\n\n          return {\n            id: item.id.videoId,\n            title: item.snippet.title,\n            publishedAt: item.snippet.publishedAt,\n            viewCount: stats.viewCount,\n            likeCount: stats.likeCount,\n            commentCount: stats.commentCount,\n            thumbnail: item.snippet.thumbnails.medium.url,\n            duration: stats.duration,\n          };\n        });\n      }\n\n      return [];\n    } catch (error) {\n      console.error('Error fetching recent videos:', error);\n      // Return mock data if API call fails\n      return [\n        {\n          id: 'mock-video-1',\n          title: 'Sample Video Title 1',\n          publishedAt: '2024-01-15T10:00:00Z',\n          viewCount: 15000,\n          likeCount: 1200,\n          commentCount: 89,\n          thumbnail: 'https://via.placeholder.com/320x180',\n          duration: 'PT10M30S',\n        },\n        {\n          id: 'mock-video-2',\n          title: 'Sample Video Title 2',\n          publishedAt: '2024-01-10T14:30:00Z',\n          viewCount: 22000,\n          likeCount: 1800,\n          commentCount: 156,\n          thumbnail: 'https://via.placeholder.com/320x180',\n          duration: 'PT15M45S',\n        },\n      ];\n    }\n  }\n\n  async getAnalytics(): Promise<YouTubeAnalytics> {\n    const [channelStats, recentVideos] = await Promise.all([\n      this.getChannelStats(),\n      this.getRecentVideos(),\n    ]);\n\n    // Generate realistic monthly data based on actual channel stats\n    const currentSubscribers = channelStats.subscriberCount;\n    const currentViews = channelStats.viewCount;\n    \n    // Get current date and generate last 6 months\n    const now = new Date();\n    const months = [];\n    for (let i = 5; i >= 0; i--) {\n      const date = new Date(now.getFullYear(), now.getMonth() - i, 1);\n      months.push(date.toLocaleDateString('en-US', { month: 'short' }));\n    }\n    \n    // Calculate progression factors for realistic growth\n    const progressionFactors = [0.7, 0.8, 0.85, 0.9, 0.95, 1.0];\n    \n    // Calculate monthly progression based on current stats\n    const monthlyViews = months.map((month, index) => ({\n      month,\n      views: Math.round(currentViews * progressionFactors[index])\n    }));\n\n    const monthlySubscribers = months.map((month, index) => ({\n      month,\n      subscribers: Math.round(currentSubscribers * progressionFactors[index])\n    }));\n\n    return {\n      channelStats,\n      recentVideos,\n      monthlyViews,\n      monthlySubscribers,\n    };\n  }\n}\n\nexport const youtubeService = new YouTubeService(); "],"mappings":"AAAA,SAASA,aAAa,EAAEC,eAAe,EAAEC,iBAAiB,QAAuB,mBAAmB;AA6BpG,MAAMC,cAAc,CAAC;EAGnBC,WAAWA,CAAA,EAAG;IAAA,KAFNC,MAAM;IAGZ;IACA,MAAMC,WAAW,GAAGC,YAAY,CAACC,OAAO,CAAC,eAAe,CAAC;IACzD,IAAIF,WAAW,EAAE;MACf,MAAMG,MAAM,GAAGC,IAAI,CAACC,KAAK,CAACL,WAAW,CAAC;MACtC,IAAI,CAACD,MAAM,GAAG;QACZO,SAAS,EAAEH,MAAM,CAACG,SAAS,IAAIZ,aAAa,CAACY,SAAS;QACtDC,MAAM,EAAEJ,MAAM,CAACI,MAAM,IAAIb,aAAa,CAACa,MAAM;QAC7CC,WAAW,EAAEL,MAAM,CAACK,WAAW,IAAId,aAAa,CAACc,WAAW;QAC5DC,UAAU,EAAEN,MAAM,CAACM,UAAU,IAAIf,aAAa,CAACe;MACjD,CAAC;IACH,CAAC,MAAM;MACL,IAAI,CAACV,MAAM,GAAGL,aAAa;IAC7B;EACF;EAEAgB,YAAYA,CAACC,SAAwB,EAAE;IACrC,IAAI,CAACZ,MAAM,GAAGY,SAAS;EACzB;EAEA,MAAcC,YAAYA,CAACC,GAAW,EAAgB;IACpD,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACF,GAAG,CAAC;MACjC,IAAI,CAACC,QAAQ,CAACE,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,uBAAuBH,QAAQ,CAACI,MAAM,EAAE,CAAC;MAC3D;MACA,OAAO,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;IAC9B,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,oBAAoB,EAAEA,KAAK,CAAC;MAC1C,MAAMA,KAAK;IACb;EACF;EAEA,MAAME,eAAeA,CAAA,EAAiC;IACpD,IAAI,CAAC,IAAI,CAACvB,MAAM,CAACO,SAAS,IAAI,CAAC,IAAI,CAACP,MAAM,CAACQ,MAAM,EAAE;MACjD;MACA,OAAO;QACLgB,eAAe,EAAE,KAAK;QACtBC,UAAU,EAAE,EAAE;QACdC,SAAS,EAAE,OAAO;QAClBjB,WAAW,EAAE,IAAI,CAACT,MAAM,CAACS,WAAW;QACpCC,UAAU,EAAE,IAAI,CAACV,MAAM,CAACU,UAAU;QAClCH,SAAS,EAAE,IAAI,CAACP,MAAM,CAACO,SAAS,IAAI;MACtC,CAAC;IACH;IAEA,MAAMO,GAAG,GAAGlB,eAAe,CAACC,iBAAiB,CAAC8B,OAAO,EAAE;MACrDC,IAAI,EAAE,oBAAoB;MAC1BC,EAAE,EAAE,IAAI,CAAC7B,MAAM,CAACO;IAClB,CAAC,EAAE,IAAI,CAACP,MAAM,CAACQ,MAAM,CAAC;IAEtB,MAAMsB,IAAI,GAAG,MAAM,IAAI,CAACjB,YAAY,CAACC,GAAG,CAAC;IAEzC,IAAIgB,IAAI,CAACC,KAAK,IAAID,IAAI,CAACC,KAAK,CAACC,MAAM,GAAG,CAAC,EAAE;MACvC,MAAML,OAAO,GAAGG,IAAI,CAACC,KAAK,CAAC,CAAC,CAAC;MAC7B,OAAO;QACLP,eAAe,EAAES,QAAQ,CAACN,OAAO,CAACO,UAAU,CAACV,eAAe,IAAI,GAAG,CAAC;QACpEC,UAAU,EAAEQ,QAAQ,CAACN,OAAO,CAACO,UAAU,CAACT,UAAU,IAAI,GAAG,CAAC;QAC1DC,SAAS,EAAEO,QAAQ,CAACN,OAAO,CAACO,UAAU,CAACR,SAAS,IAAI,GAAG,CAAC;QACxDjB,WAAW,EAAEkB,OAAO,CAACQ,OAAO,CAACC,KAAK;QAClC1B,UAAU,EAAE,mCAAmCiB,OAAO,CAACE,EAAE,EAAE;QAC3DtB,SAAS,EAAEoB,OAAO,CAACE;MACrB,CAAC;IACH;IAEA,MAAM,IAAIX,KAAK,CAAC,mBAAmB,CAAC;EACtC;EAEA,MAAMmB,eAAeA,CAACC,KAAa,GAAG,EAAE,EAA2B;IACjE,IAAI,CAAC,IAAI,CAACtC,MAAM,CAACO,SAAS,IAAI,CAAC,IAAI,CAACP,MAAM,CAACQ,MAAM,EAAE;MACjD;MACA,OAAO,CACL;QACEqB,EAAE,EAAE,cAAc;QAClBO,KAAK,EAAE,sBAAsB;QAC7BG,WAAW,EAAE,sBAAsB;QACnCb,SAAS,EAAE,KAAK;QAChBc,SAAS,EAAE,IAAI;QACfC,YAAY,EAAE,EAAE;QAChBC,SAAS,EAAE,qCAAqC;QAChDC,QAAQ,EAAE;MACZ,CAAC,EACD;QACEd,EAAE,EAAE,cAAc;QAClBO,KAAK,EAAE,sBAAsB;QAC7BG,WAAW,EAAE,sBAAsB;QACnCb,SAAS,EAAE,KAAK;QAChBc,SAAS,EAAE,IAAI;QACfC,YAAY,EAAE,GAAG;QACjBC,SAAS,EAAE,qCAAqC;QAChDC,QAAQ,EAAE;MACZ,CAAC,CACF;IACH;IAEA,IAAI;MACF,MAAM7B,GAAG,GAAGlB,eAAe,CAACC,iBAAiB,CAAC+C,MAAM,EAAE;QACpDhB,IAAI,EAAE,SAAS;QACfrB,SAAS,EAAE,IAAI,CAACP,MAAM,CAACO,SAAS;QAChCsC,KAAK,EAAE,MAAM;QACbC,UAAU,EAAER,KAAK,CAACS,QAAQ,CAAC,CAAC;QAC5BC,IAAI,EAAE;MACR,CAAC,EAAE,IAAI,CAAChD,MAAM,CAACQ,MAAM,CAAC;MAEtB,MAAMsB,IAAI,GAAG,MAAM,IAAI,CAACjB,YAAY,CAACC,GAAG,CAAC;MAEzC,IAAIgB,IAAI,CAACC,KAAK,EAAE;QACd,MAAMkB,QAAQ,GAAGnB,IAAI,CAACC,KAAK,CAACmB,GAAG,CAAEC,IAAS,IAAKA,IAAI,CAACtB,EAAE,CAACuB,OAAO,CAAC,CAACC,IAAI,CAAC,GAAG,CAAC;;QAEzE;QACA,MAAMC,QAAQ,GAAG1D,eAAe,CAACC,iBAAiB,CAAC0D,UAAU,EAAE;UAC7D3B,IAAI,EAAE,2BAA2B;UACjCC,EAAE,EAAEoB;QACN,CAAC,EAAE,IAAI,CAACjD,MAAM,CAACQ,MAAM,CAAC;QAEtB,MAAMgD,SAAS,GAAG,MAAM,IAAI,CAAC3C,YAAY,CAACyC,QAAQ,CAAC;QACnD,MAAMG,QAAQ,GAAG,IAAIC,GAAG,CAAC,CAAC;QAE1B,IAAIF,SAAS,CAACzB,KAAK,EAAE;UACnByB,SAAS,CAACzB,KAAK,CAAC4B,OAAO,CAAER,IAAS,IAAK;YACrCM,QAAQ,CAACG,GAAG,CAACT,IAAI,CAACtB,EAAE,EAAE;cACpBH,SAAS,EAAEO,QAAQ,CAACkB,IAAI,CAACjB,UAAU,CAACR,SAAS,IAAI,GAAG,CAAC;cACrDc,SAAS,EAAEP,QAAQ,CAACkB,IAAI,CAACjB,UAAU,CAACM,SAAS,IAAI,GAAG,CAAC;cACrDC,YAAY,EAAER,QAAQ,CAACkB,IAAI,CAACjB,UAAU,CAACO,YAAY,IAAI,GAAG,CAAC;cAC3DE,QAAQ,EAAEQ,IAAI,CAACU,cAAc,CAAClB;YAChC,CAAC,CAAC;UACJ,CAAC,CAAC;QACJ;QAEA,OAAOb,IAAI,CAACC,KAAK,CAACmB,GAAG,CAAEC,IAAS,IAAK;UACnC,MAAMW,KAAK,GAAGL,QAAQ,CAACM,GAAG,CAACZ,IAAI,CAACtB,EAAE,CAACuB,OAAO,CAAC,IAAI;YAC7C1B,SAAS,EAAE,CAAC;YACZc,SAAS,EAAE,CAAC;YACZC,YAAY,EAAE,CAAC;YACfE,QAAQ,EAAE;UACZ,CAAC;UAED,OAAO;YACLd,EAAE,EAAEsB,IAAI,CAACtB,EAAE,CAACuB,OAAO;YACnBhB,KAAK,EAAEe,IAAI,CAAChB,OAAO,CAACC,KAAK;YACzBG,WAAW,EAAEY,IAAI,CAAChB,OAAO,CAACI,WAAW;YACrCb,SAAS,EAAEoC,KAAK,CAACpC,SAAS;YAC1Bc,SAAS,EAAEsB,KAAK,CAACtB,SAAS;YAC1BC,YAAY,EAAEqB,KAAK,CAACrB,YAAY;YAChCC,SAAS,EAAES,IAAI,CAAChB,OAAO,CAAC6B,UAAU,CAACC,MAAM,CAACnD,GAAG;YAC7C6B,QAAQ,EAAEmB,KAAK,CAACnB;UAClB,CAAC;QACH,CAAC,CAAC;MACJ;MAEA,OAAO,EAAE;IACX,CAAC,CAAC,OAAOtB,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAAC;MACrD;MACA,OAAO,CACL;QACEQ,EAAE,EAAE,cAAc;QAClBO,KAAK,EAAE,sBAAsB;QAC7BG,WAAW,EAAE,sBAAsB;QACnCb,SAAS,EAAE,KAAK;QAChBc,SAAS,EAAE,IAAI;QACfC,YAAY,EAAE,EAAE;QAChBC,SAAS,EAAE,qCAAqC;QAChDC,QAAQ,EAAE;MACZ,CAAC,EACD;QACEd,EAAE,EAAE,cAAc;QAClBO,KAAK,EAAE,sBAAsB;QAC7BG,WAAW,EAAE,sBAAsB;QACnCb,SAAS,EAAE,KAAK;QAChBc,SAAS,EAAE,IAAI;QACfC,YAAY,EAAE,GAAG;QACjBC,SAAS,EAAE,qCAAqC;QAChDC,QAAQ,EAAE;MACZ,CAAC,CACF;IACH;EACF;EAEA,MAAMuB,YAAYA,CAAA,EAA8B;IAC9C,MAAM,CAACC,YAAY,EAAEC,YAAY,CAAC,GAAG,MAAMC,OAAO,CAACC,GAAG,CAAC,CACrD,IAAI,CAAC/C,eAAe,CAAC,CAAC,EACtB,IAAI,CAACc,eAAe,CAAC,CAAC,CACvB,CAAC;;IAEF;IACA,MAAMkC,kBAAkB,GAAGJ,YAAY,CAAC3C,eAAe;IACvD,MAAMgD,YAAY,GAAGL,YAAY,CAACzC,SAAS;;IAE3C;IACA,MAAM+C,GAAG,GAAG,IAAIC,IAAI,CAAC,CAAC;IACtB,MAAMC,MAAM,GAAG,EAAE;IACjB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,IAAI,CAAC,EAAEA,CAAC,EAAE,EAAE;MAC3B,MAAMC,IAAI,GAAG,IAAIH,IAAI,CAACD,GAAG,CAACK,WAAW,CAAC,CAAC,EAAEL,GAAG,CAACM,QAAQ,CAAC,CAAC,GAAGH,CAAC,EAAE,CAAC,CAAC;MAC/DD,MAAM,CAACK,IAAI,CAACH,IAAI,CAACI,kBAAkB,CAAC,OAAO,EAAE;QAAEC,KAAK,EAAE;MAAQ,CAAC,CAAC,CAAC;IACnE;;IAEA;IACA,MAAMC,kBAAkB,GAAG,CAAC,GAAG,EAAE,GAAG,EAAE,IAAI,EAAE,GAAG,EAAE,IAAI,EAAE,GAAG,CAAC;;IAE3D;IACA,MAAMC,YAAY,GAAGT,MAAM,CAACzB,GAAG,CAAC,CAACgC,KAAK,EAAEG,KAAK,MAAM;MACjDH,KAAK;MACLI,KAAK,EAAEC,IAAI,CAACC,KAAK,CAAChB,YAAY,GAAGW,kBAAkB,CAACE,KAAK,CAAC;IAC5D,CAAC,CAAC,CAAC;IAEH,MAAMI,kBAAkB,GAAGd,MAAM,CAACzB,GAAG,CAAC,CAACgC,KAAK,EAAEG,KAAK,MAAM;MACvDH,KAAK;MACLQ,WAAW,EAAEH,IAAI,CAACC,KAAK,CAACjB,kBAAkB,GAAGY,kBAAkB,CAACE,KAAK,CAAC;IACxE,CAAC,CAAC,CAAC;IAEH,OAAO;MACLlB,YAAY;MACZC,YAAY;MACZgB,YAAY;MACZK;IACF,CAAC;EACH;AACF;AAEA,OAAO,MAAME,cAAc,GAAG,IAAI7F,cAAc,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}