name: Publish Docker Image to GitHub Container Registry

on:
  push:
    branches: [ main, master ]
    tags: [ 'v*' ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Use Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18.x'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run linter
      run: npm run lint
      
    - name: Build application
      run: npm run build
      
  publish:
    needs: test
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Convert repository name to lowercase
      id: repo
      run: |
        echo "repo_lowercase=$(echo "${{ github.repository }}" | tr '[:upper:]' '[:lower:]')" >> $GITHUB_OUTPUT
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ghcr.io/${{ steps.repo.outputs.repo_lowercase }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
        
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
           - name: Test the published image
         run: |
           docker pull ghcr.io/${{ steps.repo.outputs.repo_lowercase }}:latest
           # Start container in background and wait for it to be ready
           docker run -d --name test-container ghcr.io/${{ steps.repo.outputs.repo_lowercase }}:latest
           sleep 10
           # Check if container is running and nginx is responding
           if docker ps | grep -q test-container; then
             echo "Container is running successfully"
             docker stop test-container
             docker rm test-container
           else
             echo "Container failed to start"
             docker logs test-container
             exit 1
           fi 